/*! For license information please see 80.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkgithub_page=self.webpackChunkgithub_page||[]).push([[80],{80:function(t,n,e){e.d(n,{B:function(){return ar}});var r=function(t){return"object"==typeof t?null!==t:"function"==typeof t},o=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t},i=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t},u=function(t){return Object(i(t))},c=Math.ceil,a=Math.floor,f=function(t){return isNaN(t=+t)?0:(t>0?a:c)(t)},s=Math.min,l=function(t){return t>0?s(f(t),9007199254740991):0},h=function(t,n){var e,r,o=String(i(t)),u=f(n),c=o.length;return u<0||u>=c?"":(e=o.charCodeAt(u))<55296||e>56319||u+1===c||(r=o.charCodeAt(u+1))<56320||r>57343?o.charAt(u):o.slice(u,u+2)},p=function(t,n,e){return n+(e?h(t,n).length:1)},v={}.toString,d=function(t){return v.call(t).slice(8,-1)};function y(t,n,e){return t(e={path:n,exports:{},require:function(t,n){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==n&&e.path)}},e.exports),e.exports}var g,w,m=y((function(t){var n=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)})),b=y((function(t){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)})),_=y((function(t){var n="__core-js_shared__",e=b[n]||(b[n]={});(t.exports=function(t,n){return e[t]||(e[t]=void 0!==n?n:{})})("versions",[]).push({version:m.version,mode:"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})})),x=0,E=Math.random(),O=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++x+E).toString(36))},j=y((function(t){var n=_("wks"),e=b.Symbol,r="function"==typeof e;(t.exports=function(t){return n[t]||(n[t]=r&&e[t]||(r?e:O)("Symbol."+t))}).store=n})),S=j("toStringTag"),P="Arguments"==d(function(){return arguments}()),R=function(t){var n,e,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),S))?e:P?d(n):"Object"==(r=d(n))&&"function"==typeof n.callee?"Arguments":r},k=RegExp.prototype.exec,A=function(t,n){var e=t.exec;if("function"==typeof e){var r=e.call(t,n);if("object"!=typeof r)throw new TypeError("RegExp exec method returned something other than an Object or null");return r}if("RegExp"!==R(t))throw new TypeError("RegExp#exec called on incompatible receiver");return k.call(t,n)},L=function(){var t=o(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n},I=RegExp.prototype.exec,T=String.prototype.replace,F=I,M="lastIndex",U=(g=/a/,w=/b*/g,I.call(g,"a"),I.call(w,"a"),0!==g[M]||0!==w[M]),N=void 0!==/()??/.exec("")[1];(U||N)&&(F=function(t){var n,e,r,o,i=this;return N&&(e=new RegExp("^"+i.source+"$(?!\\s)",L.call(i))),U&&(n=i[M]),r=I.call(i,t),U&&r&&(i[M]=i.global?r.index+r[0].length:n),N&&r&&r.length>1&&T.call(r[0],e,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r});var B=F,C=function(t){try{return!!t()}catch(t){return!0}},D=!C((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})),W=b.document,G=r(W)&&r(W.createElement),$=function(t){return G?W.createElement(t):{}},V=!D&&!C((function(){return 7!=Object.defineProperty($("div"),"a",{get:function(){return 7}}).a})),z=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")},Y=Object.defineProperty,q={f:D?Object.defineProperty:function(t,n,e){if(o(t),n=z(n,!0),o(e),V)try{return Y(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},J=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}},K=D?function(t,n,e){return q.f(t,n,J(1,e))}:function(t,n,e){return t[n]=e,t},H={}.hasOwnProperty,Q=function(t,n){return H.call(t,n)},X=_("native-function-to-string",Function.toString),Z=y((function(t){var n=O("src"),e="toString",r=(""+X).split(e);m.inspectSource=function(t){return X.call(t)},(t.exports=function(t,e,o,i){var u="function"==typeof o;u&&(Q(o,"name")||K(o,"name",e)),t[e]!==o&&(u&&(Q(o,n)||K(o,n,t[e]?""+t[e]:r.join(String(e)))),t===b?t[e]=o:i?t[e]?t[e]=o:K(t,e,o):(delete t[e],K(t,e,o)))})(Function.prototype,e,(function(){return"function"==typeof this&&this[n]||X.call(this)}))})),tt=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t},nt=function(t,n,e){if(tt(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}},et="prototype",rt=function(t,n,e){var r,o,i,u,c=t&rt.F,a=t&rt.G,f=t&rt.S,s=t&rt.P,l=t&rt.B,h=a?b:f?b[n]||(b[n]={}):(b[n]||{})[et],p=a?m:m[n]||(m[n]={}),v=p[et]||(p[et]={});for(r in a&&(e=n),e)i=((o=!c&&h&&void 0!==h[r])?h:e)[r],u=l&&o?nt(i,b):s&&"function"==typeof i?nt(Function.call,i):i,h&&Z(h,r,i,t&rt.U),p[r]!=i&&K(p,r,u),s&&v[r]!=i&&(v[r]=i)};b.core=m,rt.F=1,rt.G=2,rt.S=4,rt.P=8,rt.B=16,rt.W=32,rt.U=64,rt.R=128;var ot=rt;ot({target:"RegExp",proto:!0,forced:B!==/./.exec},{exec:B});j("species");var it=!C((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),ut=(function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);2===e.length&&"a"===e[0]&&e[1]}(),Math.max),ct=Math.min,at=Math.floor,ft=/\$([$&`']|\d\d?|<[^>]*>)/g,st=/\$([$&`']|\d\d?)/g;function lt(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function ht(t){return ht=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},ht(t)}function pt(t,n){return pt=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t},pt(t,n)}function vt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function dt(t,n,e){return dt=vt()?Reflect.construct:function(t,n,e){var r=[null];r.push.apply(r,n);var o=new(Function.bind.apply(t,r));return e&&pt(o,e.prototype),o},dt.apply(null,arguments)}function yt(t){var n="function"==typeof Map?new Map:void 0;return yt=function(t){if(null===t||(e=t,-1===Function.toString.call(e).indexOf("[native code]")))return t;var e;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(t))return n.get(t);n.set(t,r)}function r(){return dt(t,arguments,ht(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),pt(r,t)},yt(t)}!function(t){var n=j(t),e=!C((function(){var e={};return e[n]=function(){return 7},7!=""[t](e)})),r=e?!C((function(){var t=!1,e=/a/;return e.exec=function(){return t=!0,null},e[n](""),!t})):void 0;if(!e||!r||!it){var c=/./[n],a=function(t,n,e,r){return[function(r,o){var i=t(this),u=null==r?void 0:r[n];return void 0!==u?u.call(r,i,o):e.call(String(i),r,o)},function(t,n){var u=r(e,t,this,n);if(u.done)return u.value;var c=o(t),a=String(this),s="function"==typeof n;s||(n=String(n));var h=c.global;if(h){var v=c.unicode;c.lastIndex=0}for(var d=[];;){var y=A(c,a);if(null===y)break;if(d.push(y),!h)break;""===String(y[0])&&(c.lastIndex=p(a,l(c.lastIndex),v))}for(var g,w="",m=0,b=0;b<d.length;b++){y=d[b];for(var _=String(y[0]),x=ut(ct(f(y.index),a.length),0),E=[],O=1;O<y.length;O++)E.push(void 0===(g=y[O])?g:String(g));var j=y.groups;if(s){var S=[_].concat(E,x,a);void 0!==j&&S.push(j);var P=String(n.apply(void 0,S))}else P=i(_,a,x,E,j,n);x>=m&&(w+=a.slice(m,x)+P,m=x+_.length)}return w+a.slice(m)}];function i(t,n,r,o,i,c){var a=r+t.length,f=o.length,s=st;return void 0!==i&&(i=u(i),s=ft),e.call(c,s,(function(e,u){var c;switch(u.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(a);case"<":c=i[u.slice(1,-1)];break;default:var s=+u;if(0===s)return e;if(s>f){var l=at(s/10);return 0===l?e:l<=f?void 0===o[l-1]?u.charAt(1):o[l-1]+u.charAt(1):e}c=o[s-1]}return void 0===c?"":c}))}}(i,n,""[t],(function(t,n,r,o,i){return n.exec===B?e&&!i?{done:!0,value:c.call(n,r,o)}:{done:!0,value:t.call(r,n,o)}:{done:!1}})),s=a[0],h=a[1];Z(String.prototype,t,s),K(RegExp.prototype,n,(function(t,n){return h.call(t,this,n)}))}}("replace"),y((function(t){var n=function(t){var n,e=Object.prototype,r=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",u=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function a(t,n,e){return Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[n]}try{a({},"")}catch(t){a=function(t,n,e){return t[n]=e}}function f(t,n,e,r){var o=n&&n.prototype instanceof y?n:y,i=Object.create(o.prototype),u=new R(r||[]);return i._invoke=function(t,n,e){var r=l;return function(o,i){if(r===p)throw new Error("Generator is already running");if(r===v){if("throw"===o)throw i;return A()}for(e.method=o,e.arg=i;;){var u=e.delegate;if(u){var c=j(u,e);if(c){if(c===d)continue;return c}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=v,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=p;var a=s(t,n,e);if("normal"===a.type){if(r=e.done?v:h,a.arg===d)continue;return{value:a.arg,done:e.done}}"throw"===a.type&&(r=v,e.method="throw",e.arg=a.arg)}}}(t,e,u),i}function s(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=f;var l="suspendedStart",h="suspendedYield",p="executing",v="completed",d={};function y(){}function g(){}function w(){}var m={};m[i]=function(){return this};var b=Object.getPrototypeOf,_=b&&b(b(k([])));_&&_!==e&&r.call(_,i)&&(m=_);var x=w.prototype=y.prototype=Object.create(m);function E(t){["next","throw","return"].forEach((function(n){a(t,n,(function(t){return this._invoke(n,t)}))}))}function O(t,n){function e(o,i,u,c){var a=s(t[o],t,i);if("throw"!==a.type){var f=a.arg,l=f.value;return l&&"object"==typeof l&&r.call(l,"__await")?n.resolve(l.__await).then((function(t){e("next",t,u,c)}),(function(t){e("throw",t,u,c)})):n.resolve(l).then((function(t){f.value=t,u(f)}),(function(t){return e("throw",t,u,c)}))}c(a.arg)}var o;this._invoke=function(t,r){function i(){return new n((function(n,o){e(t,r,n,o)}))}return o=o?o.then(i,i):i()}}function j(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,j(t,e),"throw"===e.method))return d;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=s(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,d;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,d):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function S(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function P(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function R(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function k(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,u=function e(){for(;++o<t.length;)if(r.call(t,o))return e.value=t[o],e.done=!1,e;return e.value=n,e.done=!0,e};return u.next=u}}return{next:A}}function A(){return{value:n,done:!0}}return g.prototype=x.constructor=w,w.constructor=g,g.displayName=a(w,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===g||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,a(t,c,"GeneratorFunction")),t.prototype=Object.create(x),t},t.awrap=function(t){return{__await:t}},E(O.prototype),O.prototype[u]=function(){return this},t.AsyncIterator=O,t.async=function(n,e,r,o,i){void 0===i&&(i=Promise);var u=new O(f(n,e,r,o),i);return t.isGeneratorFunction(e)?u:u.next().then((function(t){return t.done?t.value:u.next()}))},E(x),a(x,c,"Generator"),x[i]=function(){return this},x.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=k,R.prototype={constructor:R,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(P),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function o(r,o){return c.type="throw",c.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var u=this.tryEntries[i],c=u.completion;if("root"===u.tryLoc)return o("end");if(u.tryLoc<=this.prev){var a=r.call(u,"catchLoc"),f=r.call(u,"finallyLoc");if(a&&f){if(this.prev<u.catchLoc)return o(u.catchLoc,!0);if(this.prev<u.finallyLoc)return o(u.finallyLoc)}else if(a){if(this.prev<u.catchLoc)return o(u.catchLoc,!0)}else{if(!f)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return o(u.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=n,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),d},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),P(e),d}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;P(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:k(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),d}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}}));var gt=q.f,wt=Function.prototype,mt=/^\s*function ([^ (]*)/,bt="name";function _t(t,n,e,r){return new(e||(e=Promise))((function(o,i){function u(t){try{a(r.next(t))}catch(t){i(t)}}function c(t){try{a(r.throw(t))}catch(t){i(t)}}function a(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,c)}a((r=r.apply(t,n||[])).next())}))}bt in wt||D&&gt(wt,bt,{configurable:!0,get:function(){try{return(""+this).match(mt)[1]}catch(t){return""}}});for(var xt,Et=O("typed_array"),Ot=O("view"),jt=!(!b.ArrayBuffer||!b.DataView),St=jt,Pt=0,Rt="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");Pt<9;)(xt=b[Rt[Pt++]])?(K(xt.prototype,Et,!0),K(xt.prototype,Ot,!0)):St=!1;var kt={ABV:jt,CONSTR:St,TYPED:Et,VIEW:Ot},At=function(t,n,e){for(var r in n)Z(t,r,n[r],e);return t},Lt=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t},It=function(t){if(void 0===t)return 0;var n=f(t),e=l(n);if(n!==e)throw RangeError("Wrong length!");return e},Tt=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==d(t)?t.split(""):Object(t)},Ft=function(t){return Tt(i(t))},Mt=Math.max,Ut=Math.min,Nt=function(t,n){return(t=f(t))<0?Mt(t+n,0):Ut(t,n)},Bt=function(t){return function(n,e,r){var o,i=Ft(n),u=l(i.length),c=Nt(r,u);if(t&&e!=e){for(;u>c;)if((o=i[c++])!=o)return!0}else for(;u>c;c++)if((t||c in i)&&i[c]===e)return t||c||0;return!t&&-1}},Ct=_("keys"),Dt=function(t){return Ct[t]||(Ct[t]=O(t))},Wt=Bt(!1),Gt=Dt("IE_PROTO"),$t=function(t,n){var e,r=Ft(t),o=0,i=[];for(e in r)e!=Gt&&Q(r,e)&&i.push(e);for(;n.length>o;)Q(r,e=n[o++])&&(~Wt(i,e)||i.push(e));return i},Vt="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),zt=Vt.concat("length","prototype"),Yt={f:Object.getOwnPropertyNames||function(t){return $t(t,zt)}},qt=function(t){for(var n=u(this),e=l(n.length),r=arguments.length,o=Nt(r>1?arguments[1]:void 0,e),i=r>2?arguments[2]:void 0,c=void 0===i?e:Nt(i,e);c>o;)n[o++]=t;return n},Jt=q.f,Kt=j("toStringTag"),Ht=function(t,n,e){t&&!Q(t=e?t:t.prototype,Kt)&&Jt(t,Kt,{configurable:!0,value:n})},Qt=y((function(t,n){var e=Yt.f,r=q.f,o="ArrayBuffer",i="DataView",u="prototype",c="Wrong index!",a=b[o],s=b[i],h=b.Math,p=b.RangeError,v=b.Infinity,d=a,y=h.abs,g=h.pow,w=h.floor,m=h.log,_=h.LN2,x="buffer",E="byteLength",O="byteOffset",j=D?"_b":x,S=D?"_l":E,P=D?"_o":O;function R(t,n,e){var r,o,i,u=new Array(e),c=8*e-n-1,a=(1<<c)-1,f=a>>1,s=23===n?g(2,-24)-g(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=y(t))!=t||t===v?(o=t!=t?1:0,r=a):(r=w(m(t)/_),t*(i=g(2,-r))<1&&(r--,i*=2),(t+=r+f>=1?s/i:s*g(2,1-f))*i>=2&&(r++,i/=2),r+f>=a?(o=0,r=a):r+f>=1?(o=(t*i-1)*g(2,n),r+=f):(o=t*g(2,f-1)*g(2,n),r=0));n>=8;u[l++]=255&o,o/=256,n-=8);for(r=r<<n|o,c+=n;c>0;u[l++]=255&r,r/=256,c-=8);return u[--l]|=128*h,u}function k(t,n,e){var r,o=8*e-n-1,i=(1<<o)-1,u=i>>1,c=o-7,a=e-1,f=t[a--],s=127&f;for(f>>=7;c>0;s=256*s+t[a],a--,c-=8);for(r=s&(1<<-c)-1,s>>=-c,c+=n;c>0;r=256*r+t[a],a--,c-=8);if(0===s)s=1-u;else{if(s===i)return r?NaN:f?-v:v;r+=g(2,n),s-=u}return(f?-1:1)*r*g(2,s-n)}function A(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function L(t){return[255&t]}function I(t){return[255&t,t>>8&255]}function T(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function F(t){return R(t,52,8)}function M(t){return R(t,23,4)}function U(t,n,e){r(t[u],n,{get:function(){return this[e]}})}function N(t,n,e,r){var o=It(+e);if(o+n>t[S])throw p(c);var i=t[j]._b,u=o+t[P],a=i.slice(u,u+n);return r?a:a.reverse()}function B(t,n,e,r,o,i){var u=It(+e);if(u+n>t[S])throw p(c);for(var a=t[j]._b,f=u+t[P],s=r(+o),l=0;l<n;l++)a[f+l]=s[i?l:n-l-1]}if(kt.ABV){if(!C((function(){a(1)}))||!C((function(){new a(-1)}))||C((function(){return new a,new a(1.5),new a(NaN),a.name!=o}))){for(var W,G=(a=function(t){return Lt(this,a),new d(It(t))})[u]=d[u],$=e(d),V=0;$.length>V;)(W=$[V++])in a||K(a,W,d[W]);G.constructor=a}var z=new s(new a(2)),Y=s[u].setInt8;z.setInt8(0,2147483648),z.setInt8(1,2147483649),!z.getInt8(0)&&z.getInt8(1)||At(s[u],{setInt8:function(t,n){Y.call(this,t,n<<24>>24)},setUint8:function(t,n){Y.call(this,t,n<<24>>24)}},!0)}else a=function(t){Lt(this,a,o);var n=It(t);this._b=qt.call(new Array(n),0),this[S]=n},s=function(t,n,e){Lt(this,s,i),Lt(t,a,i);var r=t[S],o=f(n);if(o<0||o>r)throw p("Wrong offset!");if(o+(e=void 0===e?r-o:l(e))>r)throw p("Wrong length!");this[j]=t,this[P]=o,this[S]=e},D&&(U(a,E,"_l"),U(s,x,"_b"),U(s,E,"_l"),U(s,O,"_o")),At(s[u],{getInt8:function(t){return N(this,1,t)[0]<<24>>24},getUint8:function(t){return N(this,1,t)[0]},getInt16:function(t){var n=N(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=N(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return A(N(this,4,t,arguments[1]))},getUint32:function(t){return A(N(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return k(N(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return k(N(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){B(this,1,t,L,n)},setUint8:function(t,n){B(this,1,t,L,n)},setInt16:function(t,n){B(this,2,t,I,n,arguments[2])},setUint16:function(t,n){B(this,2,t,I,n,arguments[2])},setInt32:function(t,n){B(this,4,t,T,n,arguments[2])},setUint32:function(t,n){B(this,4,t,T,n,arguments[2])},setFloat32:function(t,n){B(this,4,t,M,n,arguments[2])},setFloat64:function(t,n){B(this,8,t,F,n,arguments[2])}});Ht(a,o),Ht(s,i),K(s[u],kt.VIEW,!0),n[o]=a,n[i]=s})),Xt={},Zt=j("iterator"),tn=Array.prototype,nn=function(t){return void 0!==t&&(Xt.Array===t||tn[Zt]===t)},en=Object.keys||function(t){return $t(t,Vt)},rn=D?Object.defineProperties:function(t,n){o(t);for(var e,r=en(n),i=r.length,u=0;i>u;)q.f(t,e=r[u++],n[e]);return t},on=b.document,un=on&&on.documentElement,cn=Dt("IE_PROTO"),an=function(){},fn="prototype",sn=function(){var t,n=$("iframe"),e=Vt.length;for(n.style.display="none",un.appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),sn=t.F;e--;)delete sn[fn][Vt[e]];return sn()},ln=Object.create||function(t,n){var e;return null!==t?(an[fn]=o(t),e=new an,an[fn]=null,e[cn]=t):e=sn(),void 0===n?e:rn(e,n)},hn=Dt("IE_PROTO"),pn=Object.prototype,vn=Object.getPrototypeOf||function(t){return t=u(t),Q(t,hn)?t[hn]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?pn:null},dn=j("iterator"),yn=m.getIteratorMethod=function(t){if(null!=t)return t[dn]||t["@@iterator"]||Xt[R(t)]},gn=Array.isArray||function(t){return"Array"==d(t)},wn=j("species"),mn=function(t,n){return new(function(t){var n;return gn(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!gn(n.prototype)||(n=void 0),r(n)&&null===(n=n[wn])&&(n=void 0)),void 0===n?Array:n}(t))(n)},bn=function(t,n){var e=1==t,r=2==t,o=3==t,i=4==t,c=6==t,a=5==t||c,f=n||mn;return function(n,s,h){for(var p,v,d=u(n),y=Tt(d),g=nt(s,h,3),w=l(y.length),m=0,b=e?f(n,w):r?f(n,0):void 0;w>m;m++)if((a||m in y)&&(v=g(p=y[m],m,d),t))if(e)b[m]=v;else if(v)switch(t){case 3:return!0;case 5:return p;case 6:return m;case 2:b.push(p)}else if(i)return!1;return c?-1:o||i?i:b}},_n=j("species"),xn=function(t,n){var e,r=o(t).constructor;return void 0===r||null==(e=o(r)[_n])?n:tt(e)},En=j("unscopables"),On=Array.prototype;null==On[En]&&K(On,En,{});var jn=function(t){On[En][t]=!0},Sn=function(t,n){return{value:n,done:!!t}},Pn={};K(Pn,j("iterator"),(function(){return this}));var Rn=function(t,n,e){t.prototype=ln(Pn,{next:J(1,e)}),Ht(t,n+" Iterator")},kn=j("iterator"),An=!([].keys&&"next"in[].keys()),Ln="keys",In="values",Tn=function(){return this},Fn=function(t,n,e,r,o){Rn(e,n,(function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,Sn(1)):Sn(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])}));var i,u,c,a=function(t){if(!An&&t in l)return l[t];switch(t){case Ln:case In:return function(){return new e(this,t)}}return function(){return new e(this,t)}},f=n+" Iterator",s=!1,l=t.prototype,h=l[kn]||l["@@iterator"]||o&&l[o],p=h||a(o),v=o?a("entries"):void 0,d=l.entries||h;if(d&&(c=vn(d.call(new t)))!==Object.prototype&&c.next&&(Ht(c,f,!0),"function"!=typeof c[kn]&&K(c,kn,Tn)),h&&h.name!==In&&(s=!0,p=function(){return h.call(this)}),(An||s||!l[kn])&&K(l,kn,p),Xt[n]=p,Xt[f]=Tn,o)if(void(i={values:p,keys:a(Ln),entries:v}))for(u in i)u in l||Z(l,u,i[u]);else ot(ot.P+ot.F*(An||s),n,i);return i}(Array,"Array",(function(t,n){this._t=Ft(t),this._i=0,this._k=n}),0,"values");Xt.Arguments=Xt.Array,jn("keys"),jn("values"),jn("entries");var Mn=j("iterator"),Un=!1;try{var Nn=[7][Mn]();Nn.return=function(){Un=!0},Array.from(Nn,(function(){throw 2}))}catch(t){}var Bn=function(t,n){if(!n&&!Un)return!1;var e=!1;try{var r=[7],o=r[Mn]();o.next=function(){return{done:e=!0}},r[Mn]=function(){return o},t(r)}catch(t){}return e},Cn=j("species"),Dn=function(t){var n=b[t];D&&n&&!n[Cn]&&q.f(n,Cn,{configurable:!0,get:function(){return this}})},Wn=[].copyWithin||function(t,n){var e=u(this),r=l(e.length),o=Nt(t,r),i=Nt(n,r),c=arguments.length>2?arguments[2]:void 0,a=Math.min((void 0===c?r:Nt(c,r))-i,r-o),f=1;for(i<o&&o<i+a&&(f=-1,i+=a-1,o+=a-1);a-- >0;)i in e?e[o]=e[i]:delete e[o],o+=f,i+=f;return e},Gn={f:{}.propertyIsEnumerable},$n=Object.getOwnPropertyDescriptor,Vn={f:D?$n:function(t,n){if(t=Ft(t),n=z(n,!0),V)try{return $n(t,n)}catch(t){}if(Q(t,n))return J(!Gn.f.call(t,n),t[n])}},zn=y((function(t){if(D){var n=b,e=C,o=ot,i=kt,c=Qt,a=nt,s=Lt,h=J,p=K,v=At,d=f,y=l,g=It,w=Nt,m=z,_=Q,x=R,E=r,S=u,P=nn,k=ln,A=vn,L=Yt.f,I=yn,T=O,F=j,M=bn,U=Bt,N=xn,B=Fn,W=Xt,G=Bn,$=Dn,V=qt,Y=Wn,H=q,X=Vn,Z=H.f,tt=X.f,et=n.RangeError,rt=n.TypeError,it=n.Uint8Array,ut="ArrayBuffer",ct="Shared"+ut,at="BYTES_PER_ELEMENT",ft="prototype",st=Array[ft],lt=c.ArrayBuffer,ht=c.DataView,pt=M(0),vt=M(2),dt=M(3),yt=M(4),gt=M(5),wt=M(6),mt=U(!0),bt=U(!1),_t=B.values,xt=B.keys,Et=B.entries,Ot=st.lastIndexOf,jt=st.reduce,St=st.reduceRight,Pt=st.join,Rt=st.sort,Tt=st.slice,Ft=st.toString,Mt=st.toLocaleString,Ut=F("iterator"),Ct=F("toStringTag"),Dt=T("typed_constructor"),Wt=T("def_constructor"),Gt=i.CONSTR,$t=i.TYPED,Vt=i.VIEW,zt="Wrong length!",Jt=M(1,(function(t,n){return en(N(t,t[Wt]),n)})),Kt=e((function(){return 1===new it(new Uint16Array([1]).buffer)[0]})),Ht=!!it&&!!it[ft].set&&e((function(){new it(1).set({})})),Zt=function(t,n){var e=d(t);if(e<0||e%n)throw et("Wrong offset!");return e},tn=function(t){if(E(t)&&$t in t)return t;throw rt(t+" is not a typed array!")},en=function(t,n){if(!E(t)||!(Dt in t))throw rt("It is not a typed array constructor!");return new t(n)},rn=function(t,n){return on(N(t,t[Wt]),n)},on=function(t,n){for(var e=0,r=n.length,o=en(t,r);r>e;)o[e]=n[e++];return o},un=function(t,n,e){Z(t,n,{get:function(){return this._d[e]}})},cn=function(t){var n,e,r,o,i,u,c=S(t),f=arguments.length,s=f>1?arguments[1]:void 0,l=void 0!==s,h=I(c);if(null!=h&&!P(h)){for(u=h.call(c),r=[],n=0;!(i=u.next()).done;n++)r.push(i.value);c=r}for(l&&f>2&&(s=a(s,arguments[2],2)),n=0,e=y(c.length),o=en(this,e);e>n;n++)o[n]=l?s(c[n],n):c[n];return o},an=function(){for(var t=0,n=arguments.length,e=en(this,n);n>t;)e[t]=arguments[t++];return e},fn=!!it&&e((function(){Mt.call(new it(1))})),sn=function(){return Mt.apply(fn?Tt.call(tn(this)):tn(this),arguments)},hn={copyWithin:function(t,n){return Y.call(tn(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return yt(tn(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return V.apply(tn(this),arguments)},filter:function(t){return rn(this,vt(tn(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return gt(tn(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return wt(tn(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){pt(tn(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return bt(tn(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return mt(tn(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return Pt.apply(tn(this),arguments)},lastIndexOf:function(t){return Ot.apply(tn(this),arguments)},map:function(t){return Jt(tn(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return jt.apply(tn(this),arguments)},reduceRight:function(t){return St.apply(tn(this),arguments)},reverse:function(){for(var t,n=this,e=tn(n).length,r=Math.floor(e/2),o=0;o<r;)t=n[o],n[o++]=n[--e],n[e]=t;return n},some:function(t){return dt(tn(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return Rt.call(tn(this),t)},subarray:function(t,n){var e=tn(this),r=e.length,o=w(t,r);return new(N(e,e[Wt]))(e.buffer,e.byteOffset+o*e.BYTES_PER_ELEMENT,y((void 0===n?r:w(n,r))-o))}},pn=function(t,n){return rn(this,Tt.call(tn(this),t,n))},dn=function(t){tn(this);var n=Zt(arguments[1],1),e=this.length,r=S(t),o=y(r.length),i=0;if(o+n>e)throw et(zt);for(;i<o;)this[n+i]=r[i++]},gn={entries:function(){return Et.call(tn(this))},keys:function(){return xt.call(tn(this))},values:function(){return _t.call(tn(this))}},wn=function(t,n){return E(t)&&t[$t]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},mn=function(t,n){return wn(t,n=m(n,!0))?h(2,t[n]):tt(t,n)},_n=function(t,n,e){return!(wn(t,n=m(n,!0))&&E(e)&&_(e,"value"))||_(e,"get")||_(e,"set")||e.configurable||_(e,"writable")&&!e.writable||_(e,"enumerable")&&!e.enumerable?Z(t,n,e):(t[n]=e.value,t)};Gt||(X.f=mn,H.f=_n),o(o.S+o.F*!Gt,"Object",{getOwnPropertyDescriptor:mn,defineProperty:_n}),e((function(){Ft.call({})}))&&(Ft=Mt=function(){return Pt.call(this)});var En=v({},hn);v(En,gn),p(En,Ut,gn.values),v(En,{slice:pn,set:dn,constructor:function(){},toString:Ft,toLocaleString:sn}),un(En,"buffer","b"),un(En,"byteOffset","o"),un(En,"byteLength","l"),un(En,"length","e"),Z(En,Ct,{get:function(){return this[$t]}}),t.exports=function(t,r,u,c){var a=t+((c=!!c)?"Clamped":"")+"Array",f="get"+t,l="set"+t,h=n[a],v=h||{},d=h&&A(h),w=!h||!i.ABV,m={},b=h&&h[ft],_=function(t,n){Z(t,n,{get:function(){return function(t,n){var e=t._d;return e.v[f](n*r+e.o,Kt)}(this,n)},set:function(t){return function(t,n,e){var o=t._d;c&&(e=(e=Math.round(e))<0?0:e>255?255:255&e),o.v[l](n*r+o.o,e,Kt)}(this,n,t)},enumerable:!0})};w?(h=u((function(t,n,e,o){s(t,h,a,"_d");var i,u,c,f,l=0,v=0;if(E(n)){if(!(n instanceof lt||(f=x(n))==ut||f==ct))return $t in n?on(h,n):cn.call(h,n);i=n,v=Zt(e,r);var d=n.byteLength;if(void 0===o){if(d%r)throw et(zt);if((u=d-v)<0)throw et(zt)}else if((u=y(o)*r)+v>d)throw et(zt);c=u/r}else c=g(n),i=new lt(u=c*r);for(p(t,"_d",{b:i,o:v,l:u,e:c,v:new ht(i)});l<c;)_(t,l++)})),b=h[ft]=k(En),p(b,"constructor",h)):e((function(){h(1)}))&&e((function(){new h(-1)}))&&G((function(t){new h,new h(null),new h(1.5),new h(t)}),!0)||(h=u((function(t,n,e,o){var i;return s(t,h,a),E(n)?n instanceof lt||(i=x(n))==ut||i==ct?void 0!==o?new v(n,Zt(e,r),o):void 0!==e?new v(n,Zt(e,r)):new v(n):$t in n?on(h,n):cn.call(h,n):new v(g(n))})),pt(d!==Function.prototype?L(v).concat(L(d)):L(v),(function(t){t in h||p(h,t,v[t])})),h[ft]=b,b.constructor=h);var O=b[Ut],j=!!O&&("values"==O.name||null==O.name),S=gn.values;p(h,Dt,!0),p(b,$t,a),p(b,Vt,!0),p(b,Wt,h),(c?new h(1)[Ct]==a:Ct in b)||Z(b,Ct,{get:function(){return a}}),m[a]=h,o(o.G+o.W+o.F*(h!=v),m),o(o.S,a,{BYTES_PER_ELEMENT:r}),o(o.S+o.F*e((function(){v.of.call(h,1)})),a,{from:cn,of:an}),at in b||p(b,at,r),o(o.P,a,hn),$(a),o(o.P+o.F*Ht,a,{set:dn}),o(o.P+o.F*!j,a,gn),b.toString!=Ft&&(b.toString=Ft),o(o.P+o.F*e((function(){new h(1).slice()})),a,{slice:pn}),o(o.P+o.F*(e((function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()}))||!e((function(){b.toLocaleString.call([1,2])}))),a,{toLocaleString:sn}),W[a]=j?O:S,j||p(b,Ut,S)}}else t.exports=function(){}}));zn("Uint8",1,(function(t){return function(n,e,r){return t(this,n,e,r)}}));var Yn,qn,Jn,Kn=function(t,n,e,r){try{return r?n(o(e)[0],e[1]):n(e)}catch(n){var i=t.return;throw void 0!==i&&o(i.call(t)),n}},Hn=y((function(t){var n={},e={},r=t.exports=function(t,r,i,u,c){var a,f,s,h,p=c?function(){return t}:yn(t),v=nt(i,u,r?2:1),d=0;if("function"!=typeof p)throw TypeError(t+" is not iterable!");if(nn(p)){for(a=l(t.length);a>d;d++)if((h=r?v(o(f=t[d])[0],f[1]):v(t[d]))===n||h===e)return h}else for(s=p.call(t);!(f=s.next()).done;)if((h=Kn(s,v,f.value,r))===n||h===e)return h};r.BREAK=n,r.RETURN=e})),Qn=b.process,Xn=b.setImmediate,Zn=b.clearImmediate,te=b.MessageChannel,ne=b.Dispatch,ee=0,re={},oe="onreadystatechange",ie=function(){var t=+this;if(re.hasOwnProperty(t)){var n=re[t];delete re[t],n()}},ue=function(t){ie.call(t.data)};Xn&&Zn||(Xn=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return re[++ee]=function(){!function(t,n,e){switch(n.length){case 0:return t();case 1:return t(n[0]);case 2:return t(n[0],n[1]);case 3:return t(n[0],n[1],n[2]);case 4:return t(n[0],n[1],n[2],n[3])}t.apply(e,n)}("function"==typeof t?t:Function(t),n)},Yn(ee),ee},Zn=function(t){delete re[t]},"process"==d(Qn)?Yn=function(t){Qn.nextTick(nt(ie,t,1))}:ne&&ne.now?Yn=function(t){ne.now(nt(ie,t,1))}:te?(Jn=(qn=new te).port2,qn.port1.onmessage=ue,Yn=nt(Jn.postMessage,Jn,1)):b.addEventListener&&"function"==typeof postMessage&&!b.importScripts?(Yn=function(t){b.postMessage(t+"","*")},b.addEventListener("message",ue,!1)):Yn=oe in $("script")?function(t){un.appendChild($("script"))[oe]=function(){un.removeChild(this),ie.call(t)}}:function(t){setTimeout(nt(ie,t,1),0)});var ce={set:Xn,clear:Zn},ae=ce.set,fe=b.MutationObserver||b.WebKitMutationObserver,se=b.process,le=b.Promise,he="process"==d(se);function pe(t){var n,e;this.promise=new t((function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r})),this.resolve=tt(n),this.reject=tt(e)}var ve,de,ye,ge,we={f:function(t){return new pe(t)}},me=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}},be=b.navigator,_e=be&&be.userAgent||"",xe=ce.set,Ee=function(){var t,n,e,r=function(){var r,o;for(he&&(r=se.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(he)e=function(){se.nextTick(r)};else if(!fe||b.navigator&&b.navigator.standalone)if(le&&le.resolve){var o=le.resolve(void 0);e=function(){o.then(r)}}else e=function(){ae.call(b,r)};else{var i=!0,u=document.createTextNode("");new fe(r).observe(u,{characterData:!0}),e=function(){u.data=i=!i}}return function(r){var o={fn:r,next:void 0};n&&(n.next=o),t||(t=o,e()),n=o}}(),Oe="Promise",je=b.TypeError,Se=b.process,Pe=Se&&Se.versions,Re=Pe&&Pe.v8||"",ke=b[Oe],Ae="process"==R(Se),Le=function(){},Ie=de=we.f,Te=!!function(){try{var t=ke.resolve(1),n=(t.constructor={})[j("species")]=function(t){t(Le,Le)};return(Ae||"function"==typeof PromiseRejectionEvent)&&t.then(Le)instanceof n&&0!==Re.indexOf("6.6")&&-1===_e.indexOf("Chrome/66")}catch(t){}}(),Fe=function(t){var n;return!(!r(t)||"function"!=typeof(n=t.then))&&n},Me=function(t,n){if(!t._n){t._n=!0;var e=t._c;Ee((function(){for(var r=t._v,o=1==t._s,i=0,u=function(n){var e,i,u,c=o?n.ok:n.fail,a=n.resolve,f=n.reject,s=n.domain;try{c?(o||(2==t._h&&Be(t),t._h=1),!0===c?e=r:(s&&s.enter(),e=c(r),s&&(s.exit(),u=!0)),e===n.promise?f(je("Promise-chain cycle")):(i=Fe(e))?i.call(e,a,f):a(e)):f(r)}catch(t){s&&!u&&s.exit(),f(t)}};e.length>i;)u(e[i++]);t._c=[],t._n=!1,n&&!t._h&&Ue(t)}))}},Ue=function(t){xe.call(b,(function(){var n,e,r,o=t._v,i=Ne(t);if(i&&(n=me((function(){Ae?Se.emit("unhandledRejection",o,t):(e=b.onunhandledrejection)?e({promise:t,reason:o}):(r=b.console)&&r.error&&r.error("Unhandled promise rejection",o)})),t._h=Ae||Ne(t)?2:1),t._a=void 0,i&&n.e)throw n.v}))},Ne=function(t){return 1!==t._h&&0===(t._a||t._c).length},Be=function(t){xe.call(b,(function(){var n;Ae?Se.emit("rejectionHandled",t):(n=b.onrejectionhandled)&&n({promise:t,reason:t._v})}))},Ce=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),Me(n,!0))},De=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw je("Promise can't be resolved itself");(n=Fe(t))?Ee((function(){var r={_w:e,_d:!1};try{n.call(t,nt(De,r,1),nt(Ce,r,1))}catch(t){Ce.call(r,t)}})):(e._v=t,e._s=1,Me(e,!1))}catch(t){Ce.call({_w:e,_d:!1},t)}}};Te||(ke=function(t){Lt(this,ke,Oe,"_h"),tt(t),ve.call(this);try{t(nt(De,this,1),nt(Ce,this,1))}catch(t){Ce.call(this,t)}},(ve=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=At(ke.prototype,{then:function(t,n){var e=Ie(xn(this,ke));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=Ae?Se.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&Me(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),ye=function(){var t=new ve;this.promise=t,this.resolve=nt(De,t,1),this.reject=nt(Ce,t,1)},we.f=Ie=function(t){return t===ke||t===ge?new ye(t):de(t)}),ot(ot.G+ot.W+ot.F*!Te,{Promise:ke}),Ht(ke,Oe),Dn(Oe),ge=m[Oe],ot(ot.S+ot.F*!Te,Oe,{reject:function(t){var n=Ie(this);return(0,n.reject)(t),n.promise}}),ot(ot.S+ot.F*!Te,Oe,{resolve:function(t){return function(t,n){if(o(t),r(n)&&n.constructor===t)return n;var e=we.f(t);return(0,e.resolve)(n),e.promise}(this,t)}}),ot(ot.S+ot.F*!(Te&&Bn((function(t){ke.all(t).catch(Le)}))),Oe,{all:function(t){var n=this,e=Ie(n),r=e.resolve,o=e.reject,i=me((function(){var e=[],i=0,u=1;Hn(t,!1,(function(t){var c=i++,a=!1;e.push(void 0),u++,n.resolve(t).then((function(t){a||(a=!0,e[c]=t,--u||r(e))}),o)})),--u||r(e)}));return i.e&&o(i.v),e.promise},race:function(t){var n=this,e=Ie(n),r=e.reject,o=me((function(){Hn(t,!1,(function(t){n.resolve(t).then(e.resolve,r)}))}));return o.e&&r(o.v),e.promise}});var We={};function Ge(t){return _t(this,void 0,void 0,regeneratorRuntime.mark((function n(){var e;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!("createImageBitmap"in window)){n.next=6;break}return n.next=3,createImageBitmap(t);case 3:n.t0=n.sent,n.next=9;break;case 6:return n.next=8,$e(t);case 8:n.t0=n.sent;case 9:return e=n.t0,n.abrupt("return",ze(e));case 11:case"end":return n.stop()}}),n)})))}function $e(t){return _t(this,void 0,void 0,regeneratorRuntime.mark((function n(){var e;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return e=URL.createObjectURL(t),n.prev=1,n.next=4,Ve(e);case 4:return n.abrupt("return",n.sent);case 5:return n.prev=5,URL.revokeObjectURL(e),n.finish(5);case 8:case"end":return n.stop()}}),n,null,[[1,,5,8]])})))}function Ve(t){return _t(this,void 0,void 0,regeneratorRuntime.mark((function n(){var e,r;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if((e=new Image).decoding="async",e.src=t,r=new Promise((function(t,n){e.onload=function(){return t()},e.onerror=function(){return n(Error("Image loading error"))}})),!e.decode){n.next=7;break}return n.next=7,e.decode().catch((function(){return null}));case 7:return n.next=9,r;case 9:return n.abrupt("return",e);case 10:case"end":return n.stop()}}),n)})))}function ze(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.width,r=void 0===e?t.width:e,o=n.height,i=void 0===o?t.height:o,u=n.sx,c=void 0===u?0:u,a=n.sy,f=void 0===a?0:a,s=n.sw,l=void 0===s?t.width:s,h=n.sh,p=void 0===h?t.height:h,v=document.createElement("canvas");v.width=r,v.height=i;var d=v.getContext("2d");if(!d)throw new Error("Could not create canvas context");return d.drawImage(t,c,f,l,p,0,0,r,i),d.getImageData(0,0,r,i)}function Ye(t,n,e){return _t(this,void 0,void 0,regeneratorRuntime.mark((function r(){var o,i,u,c,a,f,s,l,h;return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if((o=document.createElement("canvas")).width=t.width,o.height=t.height,i=o.getContext("2d")){r.next=6;break}throw Error("Canvas not initialized");case 6:if(i.putImageData(t,0,0),!("toBlob"in o)){r.next=13;break}return r.next=10,new Promise((function(t){return o.toBlob(t,n,e)}));case 10:u=r.sent,r.next=22;break;case 13:if(c=o.toDataURL(n,e),a=/data:([^;]+);base64,(.*)$/.exec(c)){r.next=17;break}throw Error("Data URL reading failed");case 17:for(f=a[1],s=atob(a[2]),l=new Uint8Array(s.length),h=0;h<l.length;h+=1)l[h]=s.charCodeAt(h);u=new Blob([l],{type:f});case 22:if(u){r.next=24;break}throw Error("Encoding failed");case 24:return r.abrupt("return",u);case 25:case"end":return r.stop()}}),r)})))}function qe(t){return _t(this,void 0,void 0,regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,Ge(t);case 3:return n.abrupt("return",n.sent);case 6:throw n.prev=6,n.t0=n.catch(0),console.log("decodeImage err",n.t0),Error("Couldn't decode image");case 10:case"end":return n.stop()}}),n,null,[[0,6]])})))}We[j("toStringTag")]="z",We+""!="[object z]"&&Z(Object.prototype,"toString",(function(){return"[object "+R(this)+"]"}),!0);var Je,Ke="browser-png",He="image/png",Qe=Object.freeze({__proto__:null,type:Ke,label:"Browser PNG",mimeType:He,extension:"png",defaultOptions:{}}),Xe="browser-jpeg",Ze="image/jpeg",tr=Object.freeze({__proto__:null,type:Xe,label:"Browser JPEG",mimeType:Ze,extension:"jpg",defaultOptions:{quality:.75}}),nr="browser-webp",er="image/webp",rr=Object.freeze({__proto__:null,type:nr,label:"Browser WebP",mimeType:er,extension:"webp",defaultOptions:{quality:.75}});function or(t,n){return function(t,n){var e=n.quality;return Ye(t,Ze,e)}(t,n)}function ir(t,n){return function(t,n){var e=n.quality;return Ye(t,er,e)}(t,n)}var ur=function(t){!function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&pt(t,n)}(o,t);var n,e,r=(n=o,e=vt(),function(){var t,r=ht(n);if(e){var o=ht(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return function(t,n){return!n||"object"!=typeof n&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}(this,t)});function o(t,n,e){var i;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,o),(i=r.call(this,t,e)).name=n,i}return o}(yt(Blob)),cr=(lt(Je={},Ke,Qe),lt(Je,Xe,tr),lt(Je,nr,rr),Je),ar=function(t,n,e){return _t(void 0,void 0,void 0,regeneratorRuntime.mark((function r(){var o,i,u;return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return console.log("fmn test compress",t,n,e),r.next=3,qe(t);case 3:return o=r.sent,console.log("decoded",o),r.next=7,function(){switch(n.type){case Ke:return function(t){return Ye(t,He)}(o);case Xe:return or(o,n.options);case nr:return ir(o,n.options);default:throw Error("Unexpected encoder ".concat(JSON.stringify(n)))}}();case 7:return i=r.sent,u=cr[n.type],r.abrupt("return",new ur([i],e.replace(/.[^.]*$/,".".concat(u.extension)),{type:u.mimeType}));case 10:case"end":return r.stop()}}),r)})))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODAuYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7NklBQUEsSUFBSUEsRUFBWSxTQUFVQyxHQUN4QixNQUFxQixpQkFBUEEsRUFBeUIsT0FBUEEsRUFBNEIsbUJBQVBBLENBQ3ZELEVBRUlDLEVBQVksU0FBVUQsR0FDeEIsSUFBS0QsRUFBVUMsR0FBSyxNQUFNRSxVQUFVRixFQUFLLHNCQUN6QyxPQUFPQSxDQUNULEVBR0lHLEVBQVcsU0FBVUgsR0FDdkIsR0FBVUksTUFBTkosRUFBaUIsTUFBTUUsVUFBVSx5QkFBMkJGLEdBQ2hFLE9BQU9BLENBQ1QsRUFJSUssRUFBWSxTQUFVTCxHQUN4QixPQUFPTSxPQUFPSCxFQUFTSCxHQUN6QixFQUdJTyxFQUFPQyxLQUFLRCxLQUNaRSxFQUFRRCxLQUFLQyxNQUNiQyxFQUFhLFNBQVVWLEdBQ3pCLE9BQU9XLE1BQU1YLEdBQU1BLEdBQU0sR0FBS0EsRUFBSyxFQUFJUyxFQUFRRixHQUFNUCxFQUN2RCxFQUlJWSxFQUFNSixLQUFLSSxJQUNYQyxFQUFZLFNBQVViLEdBQ3hCLE9BQU9BLEVBQUssRUFBSVksRUFBSUYsRUFBV1YsR0FBSyxrQkFBb0IsQ0FDMUQsRUFrQkljLEVBYkssU0FBVUMsRUFBTUMsR0FDckIsSUFHSUMsRUFBR0MsRUFISEMsRUFBSUMsT0FBT2pCLEVBQVNZLElBQ3BCTSxFQUFJWCxFQUFXTSxHQUNmTSxFQUFJSCxFQUFFSSxPQUVWLE9BQUlGLEVBQUksR0FBS0EsR0FBS0MsRUFBc0IsSUFDeENMLEVBQUlFLEVBQUVLLFdBQVdILElBQ04sT0FBVUosRUFBSSxPQUFVSSxFQUFJLElBQU1DLElBQU1KLEVBQUlDLEVBQUVLLFdBQVdILEVBQUksSUFBTSxPQUFVSCxFQUFJLE1BQzVFQyxFQUFFTSxPQUFPSixHQUNURixFQUFFTyxNQUFNTCxFQUFHQSxFQUFJLEVBQ2pDLEVBT0VNLEVBQXNCLFNBQVVDLEVBQUdDLEVBQU9DLEdBQzVDLE9BQU9ELEdBQVNDLEVBQVVoQixFQUFHYyxFQUFHQyxHQUFPTixPQUFTLEVBQ2xELEVBRUlRLEVBQVcsQ0FBQyxFQUFFQSxTQUVkQyxFQUFPLFNBQVVoQyxHQUNuQixPQUFPK0IsRUFBU0UsS0FBS2pDLEdBQUkwQixNQUFNLEdBQUksRUFDckMsRUFFQSxTQUFTUSxFQUFxQkMsRUFBSUMsRUFBU0MsR0FDMUMsT0FNR0YsRUFOSUUsRUFBUyxDQUNkQyxLQUFNRixFQUNORyxRQUFTLENBQUMsRUFDVkMsUUFBUyxTQUFVRixFQUFNRyxHQUN0QixPQUtOLFdBQ0MsTUFBTSxJQUFJQyxNQUFNLDBFQUNqQixDQVBhQyxDQUFzQixNQUFDRixHQUF1Q0osRUFBT0MsS0FDOUUsR0FDV0QsRUFBT0UsU0FBVUYsRUFBT0UsT0FDdkMsQ0FNQSxJQW9ITUssRUFDQUMsRUFySEZDLEVBQVFaLEdBQXFCLFNBQVVHLEdBQzNDLElBQUlVLEVBQU9WLEVBQU9FLFFBQVUsQ0FBRVMsUUFBUyxVQUNyQixpQkFBUEMsTUFBaUJBLElBQU1GLEVBQ2xDLElBRUlHLEVBQVVoQixHQUFxQixTQUFVRyxHQUU3QyxJQUFJYyxFQUFTZCxFQUFPRSxRQUEyQixvQkFBVmEsUUFBeUJBLE9BQU81QyxNQUFRQSxLQUN6RTRDLE9BQXdCLG9CQUFSQyxNQUF1QkEsS0FBSzdDLE1BQVFBLEtBQU82QyxLQUUzREMsU0FBUyxjQUFUQSxHQUNjLGlCQUFQQyxNQUFpQkEsSUFBTUosRUFDbEMsSUFJSUssRUFBVXRCLEdBQXFCLFNBQVVHLEdBQzdDLElBQUlvQixFQUFTLHFCQUNUQyxFQUFRUixFQUFRTyxLQUFZUCxFQUFRTyxHQUFVLENBQUMsSUFFbERwQixFQUFPRSxRQUFVLFNBQVVvQixFQUFLQyxHQUMvQixPQUFPRixFQUFNQyxLQUFTRCxFQUFNQyxRQUFpQnZELElBQVZ3RCxFQUFzQkEsRUFBUSxDQUFDLEVBQ3BFLEdBQUcsV0FBWSxJQUFJQyxLQUFLLENBQ3RCYixRQUFTRixFQUFNRSxRQUNmYyxLQUFPLFNBQ1BDLFVBQVcsd0NBRWIsSUFFSUMsRUFBSyxFQUNMQyxFQUFLekQsS0FBSzBELFNBQ1ZDLEVBQU8sU0FBVVIsR0FDbkIsTUFBTyxVQUFVUyxZQUFlaEUsSUFBUnVELEVBQW9CLEdBQUtBLEVBQUssUUFBU0ssRUFBS0MsR0FBSWxDLFNBQVMsSUFDbkYsRUFFSXNDLEVBQU9uQyxHQUFxQixTQUFVRyxHQUMxQyxJQUFJcUIsRUFBUUYsRUFBUSxPQUVoQmMsRUFBU3BCLEVBQVFvQixPQUNqQkMsRUFBOEIsbUJBQVZELEdBRVRqQyxFQUFPRSxRQUFVLFNBQVVpQyxHQUN4QyxPQUFPZCxFQUFNYyxLQUFVZCxFQUFNYyxHQUMzQkQsR0FBY0QsRUFBT0UsS0FBVUQsRUFBYUQsRUFBU0gsR0FBTSxVQUFZSyxHQUMzRSxHQUVTZCxNQUFRQSxDQUNqQixJQUlJZSxFQUFNSixFQUFLLGVBRVhLLEVBQW1ELGFBQTdDMUMsRUFBSyxXQUFjLE9BQU8yQyxTQUFXLENBQWhDLElBU1hDLEVBQVcsU0FBVTVFLEdBQ3ZCLElBQUk2RSxFQUFHQyxFQUFHQyxFQUNWLFlBQWMzRSxJQUFQSixFQUFtQixZQUFxQixPQUFQQSxFQUFjLE9BRU4saUJBQXBDOEUsRUFWRCxTQUFVOUUsRUFBSTJELEdBQ3pCLElBQ0UsT0FBTzNELEVBQUcyRCxFQUNaLENBQUUsTUFBT3FCLEdBQWlCLENBQzVCLENBTWtCQyxDQUFPSixFQUFJdkUsT0FBT04sR0FBS3lFLElBQW9CSyxFQUV2REosRUFBTTFDLEVBQUs2QyxHQUVNLFdBQWhCRSxFQUFJL0MsRUFBSzZDLEtBQXNDLG1CQUFaQSxFQUFFSyxPQUF1QixZQUFjSCxDQUNqRixFQUVJSSxFQUFjQyxPQUFPQyxVQUFVQyxLQUkvQkMsRUFBc0IsU0FBVUMsRUFBRzVELEdBQ3JDLElBQUkwRCxFQUFPRSxFQUFFRixLQUNiLEdBQW9CLG1CQUFUQSxFQUFxQixDQUM5QixJQUFJRyxFQUFTSCxFQUFLckQsS0FBS3VELEVBQUc1RCxHQUMxQixHQUFzQixpQkFBWDZELEVBQ1QsTUFBTSxJQUFJdkYsVUFBVSxzRUFFdEIsT0FBT3VGLENBQ1QsQ0FDQSxHQUFvQixXQUFoQmIsRUFBU1ksR0FDWCxNQUFNLElBQUl0RixVQUFVLCtDQUV0QixPQUFPaUYsRUFBWWxELEtBQUt1RCxFQUFHNUQsRUFDN0IsRUFJSThELEVBQVMsV0FDWCxJQUFJM0UsRUFBT2QsRUFBVTBGLE1BQ2pCRixFQUFTLEdBTWIsT0FMSTFFLEVBQUtvQyxTQUFRc0MsR0FBVSxLQUN2QjFFLEVBQUs2RSxhQUFZSCxHQUFVLEtBQzNCMUUsRUFBSzhFLFlBQVdKLEdBQVUsS0FDMUIxRSxFQUFLZSxVQUFTMkQsR0FBVSxLQUN4QjFFLEVBQUsrRSxTQUFRTCxHQUFVLEtBQ3BCQSxDQUNULEVBRUlNLEVBQWFYLE9BQU9DLFVBQVVDLEtBSTlCVSxFQUFnQjVFLE9BQU9pRSxVQUFVWSxRQUVqQ0MsRUFBY0gsRUFFZEksRUFBYSxZQUViQyxHQUNFeEQsRUFBTSxJQUNOQyxFQUFNLE1BQ1ZrRCxFQUFXOUQsS0FBS1csRUFBSyxLQUNyQm1ELEVBQVc5RCxLQUFLWSxFQUFLLEtBQ00sSUFBcEJELEVBQUl1RCxJQUF5QyxJQUFwQnRELEVBQUlzRCxJQUlsQ0UsT0FBdUNqRyxJQUF2QixPQUFPa0YsS0FBSyxJQUFJLElBRXhCYyxHQUE0QkMsS0FHdENILEVBQWMsU0FBY0ksR0FDMUIsSUFDSUMsRUFBV0MsRUFBUUMsRUFBT3BGLEVBRDFCcUYsRUFBS2YsS0F3QlQsT0FyQklVLElBQ0ZHLEVBQVMsSUFBSXBCLE9BQU8sSUFBTXNCLEVBQUdDLE9BQVMsV0FBWWpCLEVBQU96RCxLQUFLeUUsS0FFNUROLElBQTBCRyxFQUFZRyxFQUFHUCxJQUU3Q00sRUFBUVYsRUFBVzlELEtBQUt5RSxFQUFJSixHQUV4QkYsR0FBNEJLLElBQzlCQyxFQUFHUCxHQUFjTyxFQUFHdkQsT0FBU3NELEVBQU01RSxNQUFRNEUsRUFBTSxHQUFHbEYsT0FBU2dGLEdBRTNERixHQUFpQkksR0FBU0EsRUFBTWxGLE9BQVMsR0FJM0N5RSxFQUFjL0QsS0FBS3dFLEVBQU0sR0FBSUQsR0FBUSxXQUNuQyxJQUFLbkYsRUFBSSxFQUFHQSxFQUFJc0QsVUFBVXBELE9BQVMsRUFBR0YsU0FDZmpCLElBQWpCdUUsVUFBVXRELEtBQWtCb0YsRUFBTXBGLFFBQUtqQixFQUUvQyxJQUdLcUcsQ0FDVCxHQUdGLElBQUlHLEVBQWNWLEVBRWRXLEVBQVMsU0FBVXZCLEdBQ3JCLElBQ0UsUUFBU0EsR0FDWCxDQUFFLE1BQU9OLEdBQ1AsT0FBTyxDQUNULENBQ0YsRUFHSThCLEdBQWdCRCxHQUFPLFdBQ3pCLE9BQStFLEdBQXhFdkcsT0FBT3lHLGVBQWUsQ0FBQyxFQUFHLElBQUssQ0FBRUMsSUFBSyxXQUFjLE9BQU8sQ0FBRyxJQUFLL0YsQ0FDNUUsSUFFSWdHLEVBQWEvRCxFQUFRZ0UsU0FFckJDLEVBQUtwSCxFQUFVa0gsSUFBZWxILEVBQVVrSCxFQUFXRyxlQUNuREMsRUFBYSxTQUFVckgsR0FDekIsT0FBT21ILEVBQUtGLEVBQVdHLGNBQWNwSCxHQUFNLENBQUMsQ0FDOUMsRUFFSXNILEdBQWlCUixJQUFpQkQsR0FBTyxXQUMzQyxPQUE4RixHQUF2RnZHLE9BQU95RyxlQUFlTSxFQUFXLE9BQVEsSUFBSyxDQUFFTCxJQUFLLFdBQWMsT0FBTyxDQUFHLElBQUsvRixDQUMzRixJQU1Jc0csRUFBZSxTQUFVdkgsRUFBSTRCLEdBQy9CLElBQUs3QixFQUFVQyxHQUFLLE9BQU9BLEVBQzNCLElBQUltQyxFQUFJcUYsRUFDUixHQUFJNUYsR0FBa0MsbUJBQXJCTyxFQUFLbkMsRUFBRytCLFlBQTRCaEMsRUFBVXlILEVBQU1yRixFQUFHRixLQUFLakMsSUFBTSxPQUFPd0gsRUFDMUYsR0FBZ0MsbUJBQXBCckYsRUFBS25DLEVBQUd5SCxXQUEyQjFILEVBQVV5SCxFQUFNckYsRUFBR0YsS0FBS2pDLElBQU0sT0FBT3dILEVBQ3BGLElBQUs1RixHQUFrQyxtQkFBckJPLEVBQUtuQyxFQUFHK0IsWUFBNEJoQyxFQUFVeUgsRUFBTXJGLEVBQUdGLEtBQUtqQyxJQUFNLE9BQU93SCxFQUMzRixNQUFNdEgsVUFBVSwwQ0FDbEIsRUFFSXdILEVBQUtwSCxPQUFPeUcsZUFjWlksRUFBWSxDQUNmQyxFQWJPZCxFQUFleEcsT0FBT3lHLGVBQWlCLFNBQXdCbEMsRUFBR2dELEVBQUdDLEdBSTNFLEdBSEE3SCxFQUFVNEUsR0FDVmdELEVBQUlOLEVBQWFNLEdBQUcsR0FDcEI1SCxFQUFVNkgsR0FDTlIsRUFBZSxJQUNqQixPQUFPSSxFQUFHN0MsRUFBR2dELEVBQUdDLEVBQ2xCLENBQUUsTUFBTzlDLEdBQWlCLENBQzFCLEdBQUksUUFBUzhDLEdBQWMsUUFBU0EsRUFBWSxNQUFNNUgsVUFBVSw0QkFFaEUsTUFESSxVQUFXNEgsSUFBWWpELEVBQUVnRCxHQUFLQyxFQUFXbEUsT0FDdENpQixDQUNULEdBTUlrRCxFQUFnQixTQUFVQyxFQUFRcEUsR0FDcEMsTUFBTyxDQUNMcUUsYUFBdUIsRUFBVEQsR0FDZEUsZUFBeUIsRUFBVEYsR0FDaEJHLFdBQXFCLEVBQVRILEdBQ1pwRSxNQUFPQSxFQUVYLEVBRUl3RSxFQUFRdEIsRUFBZSxTQUFVdUIsRUFBUTFFLEVBQUtDLEdBQ2hELE9BQU8rRCxFQUFVQyxFQUFFUyxFQUFRMUUsRUFBS29FLEVBQWMsRUFBR25FLEdBQ25ELEVBQUksU0FBVXlFLEVBQVExRSxFQUFLQyxHQUV6QixPQURBeUUsRUFBTzFFLEdBQU9DLEVBQ1B5RSxDQUNULEVBRUlDLEVBQWlCLENBQUMsRUFBRUEsZUFDcEJDLEVBQU8sU0FBVXZJLEVBQUkyRCxHQUN2QixPQUFPMkUsRUFBZXJHLEtBQUtqQyxFQUFJMkQsRUFDakMsRUFFSTZFLEVBQW9CaEYsRUFBUSw0QkFBNkJGLFNBQVN2QixVQUVsRTBHLEVBQVl2RyxHQUFxQixTQUFVRyxHQUMvQyxJQUFJcUcsRUFBTXZFLEVBQUssT0FFWHdFLEVBQVksV0FDWkMsR0FBTyxHQUFLSixHQUFtQkssTUFBTUYsR0FFekM3RixFQUFNZ0csY0FBZ0IsU0FBVTlJLEdBQzlCLE9BQU93SSxFQUFrQnZHLEtBQUtqQyxFQUNoQyxHQUVDcUMsRUFBT0UsUUFBVSxTQUFVc0MsRUFBR2xCLEVBQUs2RCxFQUFLdUIsR0FDdkMsSUFBSUMsRUFBMkIsbUJBQVB4QixFQUNwQndCLElBQVlULEVBQUtmLEVBQUssU0FBV1ksRUFBTVosRUFBSyxPQUFRN0QsSUFDcERrQixFQUFFbEIsS0FBUzZELElBQ1h3QixJQUFZVCxFQUFLZixFQUFLa0IsSUFBUU4sRUFBTVosRUFBS2tCLEVBQUs3RCxFQUFFbEIsR0FBTyxHQUFLa0IsRUFBRWxCLEdBQU9pRixFQUFJSyxLQUFLN0gsT0FBT3VDLE1BQ3JGa0IsSUFBTTNCLEVBQ1IyQixFQUFFbEIsR0FBTzZELEVBQ0N1QixFQUdEbEUsRUFBRWxCLEdBQ1hrQixFQUFFbEIsR0FBTzZELEVBRVRZLEVBQU12RCxFQUFHbEIsRUFBSzZELFdBTFAzQyxFQUFFbEIsR0FDVHlFLEVBQU12RCxFQUFHbEIsRUFBSzZELElBT2xCLEdBQUdsRSxTQUFTK0IsVUFBV3NELEdBQVcsV0FDaEMsTUFBc0IsbUJBQVJoRCxNQUFzQkEsS0FBSytDLElBQVFGLEVBQWtCdkcsS0FBSzBELEtBQzFFLEdBQ0EsSUFFSXVELEdBQWEsU0FBVWxKLEdBQ3pCLEdBQWlCLG1CQUFOQSxFQUFrQixNQUFNRSxVQUFVRixFQUFLLHVCQUNsRCxPQUFPQSxDQUNULEVBSUltSixHQUFPLFNBQVVoSCxFQUFJcEIsRUFBTVEsR0FFN0IsR0FEQTJILEdBQVcvRyxRQUNFL0IsSUFBVFcsRUFBb0IsT0FBT29CLEVBQy9CLE9BQVFaLEdBQ04sS0FBSyxFQUFHLE9BQU8sU0FBVU4sR0FDdkIsT0FBT2tCLEVBQUdGLEtBQUtsQixFQUFNRSxFQUN2QixFQUNBLEtBQUssRUFBRyxPQUFPLFNBQVVBLEVBQUdDLEdBQzFCLE9BQU9pQixFQUFHRixLQUFLbEIsRUFBTUUsRUFBR0MsRUFDMUIsRUFDQSxLQUFLLEVBQUcsT0FBTyxTQUFVRCxFQUFHQyxFQUFHa0ksR0FDN0IsT0FBT2pILEVBQUdGLEtBQUtsQixFQUFNRSxFQUFHQyxFQUFHa0ksRUFDN0IsRUFFRixPQUFPLFdBQ0wsT0FBT2pILEVBQUdrSCxNQUFNdEksRUFBTTRELFVBQ3hCLENBQ0YsRUFFSTJFLEdBQVksWUFFWkMsR0FBVSxTQUFVQyxFQUFNaEYsRUFBTW1DLEdBQ2xDLElBUUloRCxFQUFLOEYsRUFBS0MsRUFBS0MsRUFSZkMsRUFBWUosRUFBT0QsR0FBUU0sRUFDM0JDLEVBQVlOLEVBQU9ELEdBQVFRLEVBQzNCQyxFQUFZUixFQUFPRCxHQUFRM0gsRUFDM0JxSSxFQUFXVCxFQUFPRCxHQUFRMUIsRUFDMUJxQyxFQUFVVixFQUFPRCxHQUFReEUsRUFDekJvRixFQUFTTCxFQUFZNUcsRUFBVThHLEVBQVk5RyxFQUFRc0IsS0FBVXRCLEVBQVFzQixHQUFRLENBQUMsSUFBTXRCLEVBQVFzQixJQUFTLENBQUMsR0FBRzhFLElBQ3pHL0csRUFBVXVILEVBQVloSCxFQUFRQSxFQUFNMEIsS0FBVTFCLEVBQU0wQixHQUFRLENBQUMsR0FDN0Q0RixFQUFXN0gsRUFBUStHLE1BQWUvRyxFQUFRK0csSUFBYSxDQUFDLEdBRzVELElBQUszRixLQUREbUcsSUFBV25ELEVBQVNuQyxHQUNabUMsRUFJVitDLElBRkFELEdBQU9HLEdBQWFPLFFBQTBCL0osSUFBaEIrSixFQUFPeEcsSUFFeEJ3RyxFQUFTeEQsR0FBUWhELEdBRTlCZ0csRUFBTU8sR0FBV1QsRUFBTU4sR0FBS08sRUFBS3hHLEdBQVcrRyxHQUEwQixtQkFBUFAsRUFBb0JQLEdBQUs3RixTQUFTckIsS0FBTXlILEdBQU9BLEVBRTFHUyxHQUFRMUIsRUFBVTBCLEVBQVF4RyxFQUFLK0YsRUFBS0YsRUFBT0QsR0FBUWMsR0FFbkQ5SCxFQUFRb0IsSUFBUStGLEdBQUt0QixFQUFNN0YsRUFBU29CLEVBQUtnRyxHQUN6Q00sR0FBWUcsRUFBU3pHLElBQVErRixJQUFLVSxFQUFTekcsR0FBTytGLEVBRTFELEVBQ0F4RyxFQUFRSCxLQUFPRCxFQUVmeUcsR0FBUU0sRUFBSSxFQUNaTixHQUFRUSxFQUFJLEVBQ1pSLEdBQVEzSCxFQUFJLEVBQ1oySCxHQUFRMUIsRUFBSSxFQUNaMEIsR0FBUXhFLEVBQUksR0FDWndFLEdBQVFlLEVBQUksR0FDWmYsR0FBUWMsRUFBSSxHQUNaZCxHQUFRL0QsRUFBSSxJQUNaLElBQUkrRSxHQUFVaEIsR0FFZGdCLEdBQVEsQ0FDTkosT0FBUSxTQUNSSyxPQUFPLEVBQ1BDLE9BQVE3RCxJQUFnQixJQUFJdEIsTUFDM0IsQ0FDREEsS0FBTXNCLElBR012QyxFQUFLLFdBQW5CLElBRUlxRyxJQUFpQzdELEdBQU8sV0FJMUMsSUFBSUgsRUFBSyxJQU1ULE9BTEFBLEVBQUdwQixLQUFPLFdBQ1IsSUFBSUcsRUFBUyxHQUViLE9BREFBLEVBQU9rRixPQUFTLENBQUUxSixFQUFHLEtBQ2R3RSxDQUNULEVBQ2tDLE1BQTNCLEdBQUdRLFFBQVFTLEVBQUksT0FDeEIsSUEyRUlrRSxJQXpFb0MsV0FFdEMsSUFBSWxFLEVBQUssT0FDTG1FLEVBQWVuRSxFQUFHcEIsS0FDdEJvQixFQUFHcEIsS0FBTyxXQUFjLE9BQU91RixFQUFheEIsTUFBTTFELEtBQU1oQixVQUFZLEVBQ3BFLElBQUljLEVBQVMsS0FBS29ELE1BQU1uQyxHQUNDLElBQWxCakIsRUFBT2xFLFFBQThCLE1BQWRrRSxFQUFPLElBQWNBLEVBQU8sRUFDM0QsQ0FQdUMsR0F5RTlCakYsS0FBS29LLEtBQ1hFLEdBQVF0SyxLQUFLSSxJQUNibUssR0FBVXZLLEtBQUtDLE1BQ2Z1SyxHQUF1Qiw0QkFDdkJDLEdBQWdDLG9CQSsxQnBDLFNBQVNDLEdBQWdCQyxFQUFLeEgsRUFBS0MsR0FZakMsT0FYSUQsS0FBT3dILEVBQ1Q3SyxPQUFPeUcsZUFBZW9FLEVBQUt4SCxFQUFLLENBQzlCQyxNQUFPQSxFQUNQcUUsWUFBWSxFQUNaQyxjQUFjLEVBQ2RDLFVBQVUsSUFHWmdELEVBQUl4SCxHQUFPQyxFQUdOdUgsQ0FDVCxDQWlCQSxTQUFTQyxHQUFnQkMsR0FJdkIsT0FIQUQsR0FBa0I5SyxPQUFPZ0wsZUFBaUJoTCxPQUFPaUwsZUFBaUIsU0FBeUJGLEdBQ3pGLE9BQU9BLEVBQUVHLFdBQWFsTCxPQUFPaUwsZUFBZUYsRUFDOUMsRUFDT0QsR0FBZ0JDLEVBQ3pCLENBRUEsU0FBU0ksR0FBZ0JKLEVBQUdLLEdBTTFCLE9BTEFELEdBQWtCbkwsT0FBT2dMLGdCQUFrQixTQUF5QkQsRUFBR0ssR0FFckUsT0FEQUwsRUFBRUcsVUFBWUUsRUFDUEwsQ0FDVCxFQUVPSSxHQUFnQkosRUFBR0ssRUFDNUIsQ0FFQSxTQUFTQyxLQUNQLEdBQXVCLG9CQUFaQyxVQUE0QkEsUUFBUUMsVUFBVyxPQUFPLEVBQ2pFLEdBQUlELFFBQVFDLFVBQVVDLEtBQU0sT0FBTyxFQUNuQyxHQUFxQixtQkFBVkMsTUFBc0IsT0FBTyxFQUV4QyxJQUVFLE9BREFDLEtBQUszRyxVQUFVdEQsU0FBU0UsS0FBSzJKLFFBQVFDLFVBQVVHLEtBQU0sSUFBSSxXQUFhLE1BQy9ELENBQ1QsQ0FBRSxNQUFPaEgsR0FDUCxPQUFPLENBQ1QsQ0FDRixDQUVBLFNBQVNpSCxHQUFXQyxFQUFRQyxFQUFNQyxHQWNoQyxPQVpFSCxHQURFTixLQUNXQyxRQUFRQyxVQUVSLFNBQW9CSyxFQUFRQyxFQUFNQyxHQUM3QyxJQUFJbkwsRUFBSSxDQUFDLE1BQ1RBLEVBQUU0QyxLQUFLd0YsTUFBTXBJLEVBQUdrTCxHQUNoQixJQUNJRSxFQUFXLElBREcvSSxTQUFTZ0osS0FBS2pELE1BQU02QyxFQUFRakwsSUFHOUMsT0FESW1MLEdBQU9YLEdBQWdCWSxFQUFVRCxFQUFNL0csV0FDcENnSCxDQUNULEVBR0tKLEdBQVc1QyxNQUFNLEtBQU0xRSxVQUNoQyxDQU1BLFNBQVM0SCxHQUFpQkgsR0FDeEIsSUFBSUksRUFBd0IsbUJBQVJDLElBQXFCLElBQUlBLFNBQVFyTSxFQThCckQsT0E1QkFtTSxHQUFtQixTQUEwQkgsR0FDM0MsR0FBYyxPQUFWQSxJQVJtQmpLLEVBUWtCaUssR0FQcUIsSUFBekQ5SSxTQUFTdkIsU0FBU0UsS0FBS0UsR0FBSXVLLFFBQVEsa0JBT1MsT0FBT04sRUFSNUQsSUFBMkJqSyxFQVV2QixHQUFxQixtQkFBVmlLLEVBQ1QsTUFBTSxJQUFJbE0sVUFBVSxzREFHdEIsUUFBc0IsSUFBWHNNLEVBQXdCLENBQ2pDLEdBQUlBLEVBQU9HLElBQUlQLEdBQVEsT0FBT0ksRUFBT3hGLElBQUlvRixHQUV6Q0ksRUFBT0ksSUFBSVIsRUFBT1MsRUFDcEIsQ0FFQSxTQUFTQSxJQUNQLE9BQU9aLEdBQVdHLEVBQU96SCxVQUFXeUcsR0FBZ0J6RixNQUFNbUgsWUFDNUQsQ0FVQSxPQVJBRCxFQUFReEgsVUFBWS9FLE9BQU95TSxPQUFPWCxFQUFNL0csVUFBVyxDQUNqRHlILFlBQWEsQ0FDWGxKLE1BQU9pSixFQUNQNUUsWUFBWSxFQUNaRSxVQUFVLEVBQ1ZELGNBQWMsS0FHWHVELEdBQWdCb0IsRUFBU1QsRUFDbEMsRUFFT0csR0FBaUJILEVBQzFCLEVBbmhDZ0IsU0FBVVksR0FDeEIsSUFBSUMsRUFBUzVJLEVBQUsySSxHQUVkRSxHQUF1QnJHLEdBQU8sV0FFaEMsSUFBSWhDLEVBQUksQ0FBQyxFQUVULE9BREFBLEVBQUVvSSxHQUFVLFdBQWMsT0FBTyxDQUFHLEVBQ2YsR0FBZCxHQUFHRCxHQUFLbkksRUFDakIsSUFFSXNJLEVBQW9CRCxHQUF1QnJHLEdBQU8sV0FFcEQsSUFBSXVHLEdBQWEsRUFDYjFHLEVBQUssSUFTVCxPQVJBQSxFQUFHcEIsS0FBTyxXQUFpQyxPQUFuQjhILEdBQWEsRUFBYSxJQUFNLEVBT3hEMUcsRUFBR3VHLEdBQVEsS0FDSEcsQ0FDVixTQUFLaE4sRUFFTCxJQUNHOE0sSUFDQUMsSUFDc0J6QyxHQUV2QixDQUNBLElBQUkyQyxFQUFxQixJQUFJSixHQUN6QkssRUEyQ2dCLFNBQVVDLEVBQVNDLEVBQVNDLEVBQVVDLEdBQzVELE1BQU8sQ0FHTCxTQUFpQkMsRUFBYUMsR0FDNUIsSUFBSS9JLEVBQUkwSSxFQUFRNUgsTUFDWnhELEVBQW9CL0IsTUFBZnVOLE9BQTJCdk4sRUFBWXVOLEVBQVlILEdBQzVELFlBQWNwTixJQUFQK0IsRUFDSEEsRUFBR0YsS0FBSzBMLEVBQWE5SSxFQUFHK0ksR0FDeEJILEVBQVN4TCxLQUFLYixPQUFPeUQsR0FBSThJLEVBQWFDLEVBQzVDLEVBR0EsU0FBVUMsRUFBUUQsR0FDaEIsSUFBSUUsRUFBTUosRUFBZ0JELEVBQVVJLEVBQVFsSSxLQUFNaUksR0FDbEQsR0FBSUUsRUFBSUMsS0FBTSxPQUFPRCxFQUFJbEssTUFFekIsSUFBSW9LLEVBQUsvTixFQUFVNE4sR0FDZmpNLEVBQUlSLE9BQU91RSxNQUNYc0ksRUFBNEMsbUJBQWpCTCxFQUMxQkssSUFBbUJMLEVBQWV4TSxPQUFPd00sSUFDOUMsSUFBSXpLLEVBQVM2SyxFQUFHN0ssT0FDaEIsR0FBSUEsRUFBUSxDQUNWLElBQUkrSyxFQUFjRixFQUFHbE0sUUFDckJrTSxFQUFHekgsVUFBWSxDQUNqQixDQUVBLElBREEsSUFBSTRILEVBQVUsS0FDRCxDQUNYLElBQUkxSSxFQUFTRixFQUFvQnlJLEVBQUlwTSxHQUNyQyxHQUFlLE9BQVg2RCxFQUFpQixNQUVyQixHQURBMEksRUFBUXRLLEtBQUs0QixJQUNSdEMsRUFBUSxNQUVJLEtBREYvQixPQUFPcUUsRUFBTyxNQUNSdUksRUFBR3pILFVBQVk1RSxFQUFvQkMsRUFBR2YsRUFBVW1OLEVBQUd6SCxXQUFZMkgsR0FDdEYsQ0FHQSxJQUZBLElBeEN3QmxPLEVBd0NwQm9PLEVBQW9CLEdBQ3BCQyxFQUFxQixFQUNoQmhOLEVBQUksRUFBR0EsRUFBSThNLEVBQVE1TSxPQUFRRixJQUFLLENBQ3ZDb0UsRUFBUzBJLEVBQVE5TSxHQVNqQixJQVJBLElBQUlpTixFQUFVbE4sT0FBT3FFLEVBQU8sSUFDeEI4SSxFQUFXM0QsR0FBSUUsR0FBTXBLLEVBQVcrRSxFQUFPNUQsT0FBUUQsRUFBRUwsUUFBUyxHQUMxRGlOLEVBQVcsR0FNTkMsRUFBSSxFQUFHQSxFQUFJaEosRUFBT2xFLE9BQVFrTixJQUFLRCxFQUFTM0ssVUFuRHpDekQsS0FEY0osRUFvRDhDeUYsRUFBT2dKLElBbkR2RHpPLEVBQUtvQixPQUFPcEIsSUFvRGhDLElBQUkwTyxFQUFnQmpKLEVBQU9rRixPQUMzQixHQUFJc0QsRUFBbUIsQ0FDckIsSUFBSVUsRUFBZSxDQUFDTCxHQUFTbEssT0FBT29LLEVBQVVELEVBQVUzTSxRQUNsQ3hCLElBQWxCc08sR0FBNkJDLEVBQWE5SyxLQUFLNkssR0FDbkQsSUFBSUUsRUFBY3hOLE9BQU93TSxFQUFhdkUsV0FBTWpKLEVBQVd1TyxHQUN6RCxNQUNFQyxFQUFjQyxFQUFnQlAsRUFBUzFNLEVBQUcyTSxFQUFVQyxFQUFVRSxFQUFlZCxHQUUzRVcsR0FBWUYsSUFDZEQsR0FBcUJ4TSxFQUFFRixNQUFNMk0sRUFBb0JFLEdBQVlLLEVBQzdEUCxFQUFxQkUsRUFBV0QsRUFBUS9NLE9BRTVDLENBQ0EsT0FBTzZNLEVBQW9CeE0sRUFBRUYsTUFBTTJNLEVBQ3JDLEdBSUYsU0FBU1EsRUFBZ0JQLEVBQVNoSSxFQUFLaUksRUFBVUMsRUFBVUUsRUFBZUUsR0FDeEUsSUFBSUUsRUFBVVAsRUFBV0QsRUFBUS9NLE9BQzdCd04sRUFBSVAsRUFBU2pOLE9BQ2J5TixFQUFVL0QsR0FLZCxZQUpzQjdLLElBQWxCc08sSUFDRkEsRUFBZ0JyTyxFQUFVcU8sR0FDMUJNLEVBQVVoRSxJQUVMeUMsRUFBU3hMLEtBQUsyTSxFQUFhSSxHQUFTLFNBQVV2SSxFQUFPd0ksR0FDMUQsSUFBSUMsRUFDSixPQUFRRCxFQUFHeE4sT0FBTyxJQUNoQixJQUFLLElBQUssTUFBTyxJQUNqQixJQUFLLElBQUssT0FBTzZNLEVBQ2pCLElBQUssSUFBSyxPQUFPaEksRUFBSTVFLE1BQU0sRUFBRzZNLEdBQzlCLElBQUssSUFBSyxPQUFPakksRUFBSTVFLE1BQU1vTixHQUMzQixJQUFLLElBQ0hJLEVBQVVSLEVBQWNPLEVBQUd2TixNQUFNLEdBQUksSUFDckMsTUFDRixRQUNFLElBQUl5TixHQUFLRixFQUNULEdBQVUsSUFBTkUsRUFBUyxPQUFPMUksRUFDcEIsR0FBSTBJLEVBQUlKLEVBQUcsQ0FDVCxJQUFJbkgsRUFBSW1ELEdBQVFvRSxFQUFJLElBQ3BCLE9BQVUsSUFBTnZILEVBQWdCbkIsRUFDaEJtQixHQUFLbUgsT0FBOEIzTyxJQUFwQm9PLEVBQVM1RyxFQUFJLEdBQW1CcUgsRUFBR3hOLE9BQU8sR0FBSytNLEVBQVM1RyxFQUFJLEdBQUtxSCxFQUFHeE4sT0FBTyxHQUN2RmdGLENBQ1QsQ0FDQXlJLEVBQVVWLEVBQVNXLEVBQUksR0FFM0IsWUFBbUIvTyxJQUFaOE8sRUFBd0IsR0FBS0EsQ0FDdEMsR0FDRixDQUNGLENBN0ljNUosQ0FDUm5GLEVBQ0E4TSxFQUNBLEdBQUdELElBQ0gsU0FBeUJvQyxFQUFjdkIsRUFBUXZILEVBQUsrSSxFQUFNQyxHQUN4RCxPQUFJekIsRUFBT3ZJLE9BQVNzQixFQUNkc0csSUFBd0JvQyxFQUluQixDQUFFdkIsTUFBTSxFQUFNbkssTUFBT3lKLEVBQW1CcEwsS0FBSzRMLEVBQVF2SCxFQUFLK0ksSUFFNUQsQ0FBRXRCLE1BQU0sRUFBTW5LLE1BQU93TCxFQUFhbk4sS0FBS3FFLEVBQUt1SCxFQUFRd0IsSUFFdEQsQ0FBRXRCLE1BQU0sRUFDakIsSUFFRXdCLEVBQVFqQyxFQUFJLEdBQ1prQyxFQUFPbEMsRUFBSSxHQUVmN0UsRUFBVXJILE9BQU9pRSxVQUFXMkgsRUFBS3VDLEdBQ2pDbkgsRUFBTWhELE9BQU9DLFVBQVc0SCxHQUdwQixTQUFVd0MsRUFBUUMsR0FBTyxPQUFPRixFQUFLdk4sS0FBS3dOLEVBQVE5SixLQUFNK0osRUFBTSxHQUtwRSxDQUNGLENBYUFDLENBQVUsV0FvR016TixHQUFxQixTQUFVRyxHQVEvQyxJQUFJdU4sRUFBVyxTQUFVck4sR0FFdkIsSUFFSXNOLEVBRkFDLEVBQUt4UCxPQUFPK0UsVUFDWjBLLEVBQVNELEVBQUd4SCxlQUVaMEgsRUFBNEIsbUJBQVgxTCxPQUF3QkEsT0FBUyxDQUFDLEVBQ25EMkwsRUFBaUJELEVBQVFFLFVBQVksYUFDckNDLEVBQXNCSCxFQUFRSSxlQUFpQixrQkFDL0NDLEVBQW9CTCxFQUFRTSxhQUFlLGdCQUUvQyxTQUFTQyxFQUFPcEYsRUFBS3hILEVBQUtDLEdBT3hCLE9BTkF0RCxPQUFPeUcsZUFBZW9FLEVBQUt4SCxFQUFLLENBQzlCQyxNQUFPQSxFQUNQcUUsWUFBWSxFQUNaQyxjQUFjLEVBQ2RDLFVBQVUsSUFFTGdELEVBQUl4SCxFQUNiLENBQ0EsSUFFRTRNLEVBQU8sQ0FBQyxFQUFHLEdBQ2IsQ0FBRSxNQUFPQyxHQUNQRCxFQUFTLFNBQVNwRixFQUFLeEgsRUFBS0MsR0FDMUIsT0FBT3VILEVBQUl4SCxHQUFPQyxDQUNwQixDQUNGLENBRUEsU0FBUzZNLEVBQUtDLEVBQVNDLEVBQVN0TixFQUFNdU4sR0FFcEMsSUFBSUMsRUFBaUJGLEdBQVdBLEVBQVF0TCxxQkFBcUJ5TCxFQUFZSCxFQUFVRyxFQUMvRUMsRUFBWXpRLE9BQU95TSxPQUFPOEQsRUFBZXhMLFdBQ3pDMkwsRUFBVSxJQUFJQyxFQUFRTCxHQUFlLElBTXpDLE9BRkFHLEVBQVVHLFFBc01aLFNBQTBCUixFQUFTck4sRUFBTTJOLEdBQ3ZDLElBQUlHLEVBQVFDLEVBRVosT0FBTyxTQUFnQkMsRUFBUTNCLEdBQzdCLEdBQUl5QixJQUFVRyxFQUNaLE1BQU0sSUFBSTVPLE1BQU0sZ0NBR2xCLEdBQUl5TyxJQUFVSSxFQUFtQixDQUMvQixHQUFlLFVBQVhGLEVBQ0YsTUFBTTNCLEVBS1IsT0FBTzhCLEdBQ1QsQ0FLQSxJQUhBUixFQUFRSyxPQUFTQSxFQUNqQkwsRUFBUXRCLElBQU1BLElBRUQsQ0FDWCxJQUFJK0IsRUFBV1QsRUFBUVMsU0FDdkIsR0FBSUEsRUFBVSxDQUNaLElBQUlDLEVBQWlCQyxFQUFvQkYsRUFBVVQsR0FDbkQsR0FBSVUsRUFBZ0IsQ0FDbEIsR0FBSUEsSUFBbUJFLEVBQWtCLFNBQ3pDLE9BQU9GLENBQ1QsQ0FDRixDQUVBLEdBQXVCLFNBQW5CVixFQUFRSyxPQUdWTCxFQUFRYSxLQUFPYixFQUFRYyxNQUFRZCxFQUFRdEIsU0FFbEMsR0FBdUIsVUFBbkJzQixFQUFRSyxPQUFvQixDQUNyQyxHQUFJRixJQUFVQyxFQUVaLE1BREFELEVBQVFJLEVBQ0ZQLEVBQVF0QixJQUdoQnNCLEVBQVFlLGtCQUFrQmYsRUFBUXRCLElBRXBDLEtBQThCLFdBQW5Cc0IsRUFBUUssUUFDakJMLEVBQVFnQixPQUFPLFNBQVVoQixFQUFRdEIsS0FHbkN5QixFQUFRRyxFQUVSLElBQUlXLEVBQVNDLEVBQVN4QixFQUFTck4sRUFBTTJOLEdBQ3JDLEdBQW9CLFdBQWhCaUIsRUFBT3pJLEtBQW1CLENBTzVCLEdBSkEySCxFQUFRSCxFQUFRakQsS0FDWndELEVBQ0FZLEVBRUFGLEVBQU92QyxNQUFRa0MsRUFDakIsU0FHRixNQUFPLENBQ0xoTyxNQUFPcU8sRUFBT3ZDLElBQ2QzQixLQUFNaUQsRUFBUWpELEtBR2xCLENBQTJCLFVBQWhCa0UsRUFBT3pJLE9BQ2hCMkgsRUFBUUksRUFHUlAsRUFBUUssT0FBUyxRQUNqQkwsRUFBUXRCLElBQU11QyxFQUFPdkMsSUFFekIsQ0FDRixDQUNGLENBbFJzQjBDLENBQWlCMUIsRUFBU3JOLEVBQU0yTixHQUU3Q0QsQ0FDVCxDQWFBLFNBQVNtQixFQUFTL1AsRUFBSWdKLEVBQUt1RSxHQUN6QixJQUNFLE1BQU8sQ0FBRWxHLEtBQU0sU0FBVWtHLElBQUt2TixFQUFHRixLQUFLa0osRUFBS3VFLEdBQzdDLENBQUUsTUFBT2MsR0FDUCxNQUFPLENBQUVoSCxLQUFNLFFBQVNrRyxJQUFLYyxFQUMvQixDQUNGLENBbEJBak8sRUFBUWtPLEtBQU9BLEVBb0JmLElBQUlXLEVBQXlCLGlCQUN6QmUsRUFBeUIsaUJBQ3pCYixFQUFvQixZQUNwQkMsRUFBb0IsWUFJcEJLLEVBQW1CLENBQUMsRUFNeEIsU0FBU2QsSUFBYSxDQUN0QixTQUFTdUIsSUFBcUIsQ0FDOUIsU0FBU0MsSUFBOEIsQ0FJdkMsSUFBSUMsRUFBb0IsQ0FBQyxFQUN6QkEsRUFBa0J0QyxHQUFrQixXQUNsQyxPQUFPdEssSUFDVCxFQUVBLElBQUk2TSxFQUFXbFMsT0FBT2lMLGVBQ2xCa0gsRUFBMEJELEdBQVlBLEVBQVNBLEVBQVNFLEVBQU8sTUFDL0RELEdBQ0FBLElBQTRCM0MsR0FDNUJDLEVBQU85TixLQUFLd1EsRUFBeUJ4QyxLQUd2Q3NDLEVBQW9CRSxHQUd0QixJQUFJRSxFQUFLTCxFQUEyQmpOLFVBQ2xDeUwsRUFBVXpMLFVBQVkvRSxPQUFPeU0sT0FBT3dGLEdBV3RDLFNBQVNLLEVBQXNCdk4sR0FDN0IsQ0FBQyxPQUFRLFFBQVMsVUFBVXdOLFNBQVEsU0FBU3hCLEdBQzNDZCxFQUFPbEwsRUFBV2dNLEdBQVEsU0FBUzNCLEdBQ2pDLE9BQU8vSixLQUFLdUwsUUFBUUcsRUFBUTNCLEVBQzlCLEdBQ0YsR0FDRixDQStCQSxTQUFTb0QsRUFBYy9CLEVBQVdnQyxHQUNoQyxTQUFTQyxFQUFPM0IsRUFBUTNCLEVBQUt1RCxFQUFTQyxHQUNwQyxJQUFJakIsRUFBU0MsRUFBU25CLEVBQVVNLEdBQVNOLEVBQVdyQixHQUNwRCxHQUFvQixVQUFoQnVDLEVBQU96SSxLQUVKLENBQ0wsSUFBSS9ELEVBQVN3TSxFQUFPdkMsSUFDaEI5TCxFQUFRNkIsRUFBTzdCLE1BQ25CLE9BQUlBLEdBQ2lCLGlCQUFWQSxHQUNQbU0sRUFBTzlOLEtBQUsyQixFQUFPLFdBQ2RtUCxFQUFZRSxRQUFRclAsRUFBTXVQLFNBQVNDLE1BQUssU0FBU3hQLEdBQ3REb1AsRUFBTyxPQUFRcFAsRUFBT3FQLEVBQVNDLEVBQ2pDLElBQUcsU0FBUzFDLEdBQ1Z3QyxFQUFPLFFBQVN4QyxFQUFLeUMsRUFBU0MsRUFDaEMsSUFHS0gsRUFBWUUsUUFBUXJQLEdBQU93UCxNQUFLLFNBQVNDLEdBSTlDNU4sRUFBTzdCLE1BQVF5UCxFQUNmSixFQUFReE4sRUFDVixJQUFHLFNBQVM2TixHQUdWLE9BQU9OLEVBQU8sUUFBU00sRUFBT0wsRUFBU0MsRUFDekMsR0FDRixDQXpCRUEsRUFBT2pCLEVBQU92QyxJQTBCbEIsQ0FFQSxJQUFJNkQsRUFnQ0o1TixLQUFLdUwsUUE5QkwsU0FBaUJHLEVBQVEzQixHQUN2QixTQUFTOEQsSUFDUCxPQUFPLElBQUlULEdBQVksU0FBU0UsRUFBU0MsR0FDdkNGLEVBQU8zQixFQUFRM0IsRUFBS3VELEVBQVNDLEVBQy9CLEdBQ0YsQ0FFQSxPQUFPSyxFQWFMQSxFQUFrQkEsRUFBZ0JILEtBQ2hDSSxFQUdBQSxHQUNFQSxHQUNSLENBS0YsQ0E0R0EsU0FBUzdCLEVBQW9CRixFQUFVVCxHQUNyQyxJQUFJSyxFQUFTSSxFQUFTdkIsU0FBU2MsRUFBUUssUUFDdkMsR0FBSUEsSUFBV3hCLEVBQWEsQ0FLMUIsR0FGQW1CLEVBQVFTLFNBQVcsS0FFSSxVQUFuQlQsRUFBUUssT0FBb0IsQ0FFOUIsR0FBSUksRUFBU3ZCLFNBQWlCLFNBRzVCYyxFQUFRSyxPQUFTLFNBQ2pCTCxFQUFRdEIsSUFBTUcsRUFDZDhCLEVBQW9CRixFQUFVVCxHQUVQLFVBQW5CQSxFQUFRSyxRQUdWLE9BQU9PLEVBSVhaLEVBQVFLLE9BQVMsUUFDakJMLEVBQVF0QixJQUFNLElBQUl4UCxVQUNoQixpREFDSixDQUVBLE9BQU8wUixDQUNULENBRUEsSUFBSUssRUFBU0MsRUFBU2IsRUFBUUksRUFBU3ZCLFNBQVVjLEVBQVF0QixLQUV6RCxHQUFvQixVQUFoQnVDLEVBQU96SSxLQUlULE9BSEF3SCxFQUFRSyxPQUFTLFFBQ2pCTCxFQUFRdEIsSUFBTXVDLEVBQU92QyxJQUNyQnNCLEVBQVFTLFNBQVcsS0FDWkcsRUFHVCxJQUFJNkIsRUFBT3hCLEVBQU92QyxJQUVsQixPQUFNK0QsRUFPRkEsRUFBSzFGLE1BR1BpRCxFQUFRUyxFQUFTaUMsWUFBY0QsRUFBSzdQLE1BR3BDb04sRUFBUTJDLEtBQU9sQyxFQUFTbUMsUUFRRCxXQUFuQjVDLEVBQVFLLFNBQ1ZMLEVBQVFLLE9BQVMsT0FDakJMLEVBQVF0QixJQUFNRyxHQVVsQm1CLEVBQVFTLFNBQVcsS0FDWkcsR0FORTZCLEdBM0JQekMsRUFBUUssT0FBUyxRQUNqQkwsRUFBUXRCLElBQU0sSUFBSXhQLFVBQVUsb0NBQzVCOFEsRUFBUVMsU0FBVyxLQUNaRyxFQStCWCxDQXFCQSxTQUFTaUMsRUFBYUMsR0FDcEIsSUFBSUMsRUFBUSxDQUFFQyxPQUFRRixFQUFLLElBRXZCLEtBQUtBLElBQ1BDLEVBQU1FLFNBQVdILEVBQUssSUFHcEIsS0FBS0EsSUFDUEMsRUFBTUcsV0FBYUosRUFBSyxHQUN4QkMsRUFBTUksU0FBV0wsRUFBSyxJQUd4Qm5PLEtBQUt5TyxXQUFXdlEsS0FBS2tRLEVBQ3ZCLENBRUEsU0FBU00sRUFBY04sR0FDckIsSUFBSTlCLEVBQVM4QixFQUFNTyxZQUFjLENBQUMsRUFDbENyQyxFQUFPekksS0FBTyxnQkFDUHlJLEVBQU92QyxJQUNkcUUsRUFBTU8sV0FBYXJDLENBQ3JCLENBRUEsU0FBU2hCLEVBQVFMLEdBSWZqTCxLQUFLeU8sV0FBYSxDQUFDLENBQUVKLE9BQVEsU0FDN0JwRCxFQUFZaUMsUUFBUWdCLEVBQWNsTyxNQUNsQ0EsS0FBSzRPLE9BQU0sRUFDYixDQTZCQSxTQUFTN0IsRUFBTzhCLEdBQ2QsR0FBSUEsRUFBVSxDQUNaLElBQUlDLEVBQWlCRCxFQUFTdkUsR0FDOUIsR0FBSXdFLEVBQ0YsT0FBT0EsRUFBZXhTLEtBQUt1UyxHQUc3QixHQUE2QixtQkFBbEJBLEVBQVNiLEtBQ2xCLE9BQU9hLEVBR1QsSUFBSzdULE1BQU02VCxFQUFTalQsUUFBUyxDQUMzQixJQUFJRixHQUFLLEVBQUdzUyxFQUFPLFNBQVNBLElBQzFCLE9BQVN0UyxFQUFJbVQsRUFBU2pULFFBQ3BCLEdBQUl3TyxFQUFPOU4sS0FBS3VTLEVBQVVuVCxHQUd4QixPQUZBc1MsRUFBSy9QLE1BQVE0USxFQUFTblQsR0FDdEJzUyxFQUFLNUYsTUFBTyxFQUNMNEYsRUFPWCxPQUhBQSxFQUFLL1AsTUFBUWlNLEVBQ2I4RCxFQUFLNUYsTUFBTyxFQUVMNEYsQ0FDVCxFQUVBLE9BQU9BLEVBQUtBLEtBQU9BLENBQ3JCLENBQ0YsQ0FHQSxNQUFPLENBQUVBLEtBQU1uQyxFQUNqQixDQUdBLFNBQVNBLElBQ1AsTUFBTyxDQUFFNU4sTUFBT2lNLEVBQWE5QixNQUFNLEVBQ3JDLENBOE1BLE9BNW1CQXNFLEVBQWtCaE4sVUFBWXNOLEVBQUc3RixZQUFjd0YsRUFDL0NBLEVBQTJCeEYsWUFBY3VGLEVBQ3pDQSxFQUFrQnFDLFlBQWNuRSxFQUM5QitCLEVBQ0FqQyxFQUNBLHFCQWFGOU4sRUFBUW9TLG9CQUFzQixTQUFTQyxHQUNyQyxJQUFJQyxFQUF5QixtQkFBWEQsR0FBeUJBLEVBQU85SCxZQUNsRCxRQUFPK0gsSUFDSEEsSUFBU3hDLEdBRzJCLHVCQUFuQ3dDLEVBQUtILGFBQWVHLEVBQUtyUSxNQUVoQyxFQUVBakMsRUFBUXVTLEtBQU8sU0FBU0YsR0FRdEIsT0FQSXRVLE9BQU9nTCxlQUNUaEwsT0FBT2dMLGVBQWVzSixFQUFRdEMsSUFFOUJzQyxFQUFPcEosVUFBWThHLEVBQ25CL0IsRUFBT3FFLEVBQVF2RSxFQUFtQixzQkFFcEN1RSxFQUFPdlAsVUFBWS9FLE9BQU95TSxPQUFPNEYsR0FDMUJpQyxDQUNULEVBTUFyUyxFQUFRd1MsTUFBUSxTQUFTckYsR0FDdkIsTUFBTyxDQUFFeUQsUUFBU3pELEVBQ3BCLEVBcUVBa0QsRUFBc0JFLEVBQWN6TixXQUNwQ3lOLEVBQWN6TixVQUFVOEssR0FBdUIsV0FDN0MsT0FBT3hLLElBQ1QsRUFDQXBELEVBQVF1USxjQUFnQkEsRUFLeEJ2USxFQUFReVMsTUFBUSxTQUFTdEUsRUFBU0MsRUFBU3ROLEVBQU11TixFQUFhbUMsUUFDeEMsSUFBaEJBLElBQXdCQSxFQUFja0MsU0FFMUMsSUFBSUMsRUFBTyxJQUFJcEMsRUFDYnJDLEVBQUtDLEVBQVNDLEVBQVN0TixFQUFNdU4sR0FDN0JtQyxHQUdGLE9BQU94USxFQUFRb1Msb0JBQW9CaEUsR0FDL0J1RSxFQUNBQSxFQUFLdkIsT0FBT1AsTUFBSyxTQUFTM04sR0FDeEIsT0FBT0EsRUFBT3NJLEtBQU90SSxFQUFPN0IsTUFBUXNSLEVBQUt2QixNQUMzQyxHQUNOLEVBcUtBZixFQUFzQkQsR0FFdEJwQyxFQUFPb0MsRUFBSXRDLEVBQW1CLGFBTzlCc0MsRUFBRzFDLEdBQWtCLFdBQ25CLE9BQU90SyxJQUNULEVBRUFnTixFQUFHNVEsU0FBVyxXQUNaLE1BQU8sb0JBQ1QsRUFpQ0FRLEVBQVE0UyxLQUFPLFNBQVM5TSxHQUN0QixJQUFJOE0sRUFBTyxHQUNYLElBQUssSUFBSXhSLEtBQU8wRSxFQUNkOE0sRUFBS3RSLEtBQUtGLEdBTVosT0FKQXdSLEVBQUtDLFVBSUUsU0FBU3pCLElBQ2QsS0FBT3dCLEVBQUs1VCxRQUFRLENBQ2xCLElBQUlvQyxFQUFNd1IsRUFBS0UsTUFDZixHQUFJMVIsS0FBTzBFLEVBR1QsT0FGQXNMLEVBQUsvUCxNQUFRRCxFQUNiZ1EsRUFBSzVGLE1BQU8sRUFDTDRGLENBRVgsQ0FNQSxPQURBQSxFQUFLNUYsTUFBTyxFQUNMNEYsQ0FDVCxDQUNGLEVBb0NBcFIsRUFBUW1RLE9BQVNBLEVBTWpCekIsRUFBUTVMLFVBQVksQ0FDbEJ5SCxZQUFhbUUsRUFFYnNELE1BQU8sU0FBU2UsR0FjZCxHQWJBM1AsS0FBSzRQLEtBQU8sRUFDWjVQLEtBQUtnTyxLQUFPLEVBR1poTyxLQUFLa00sS0FBT2xNLEtBQUttTSxNQUFRakMsRUFDekJsSyxLQUFLb0ksTUFBTyxFQUNacEksS0FBSzhMLFNBQVcsS0FFaEI5TCxLQUFLMEwsT0FBUyxPQUNkMUwsS0FBSytKLElBQU1HLEVBRVhsSyxLQUFLeU8sV0FBV3ZCLFFBQVF3QixJQUVuQmlCLEVBQ0gsSUFBSyxJQUFJOVEsS0FBUW1CLEtBRVEsTUFBbkJuQixFQUFLL0MsT0FBTyxJQUNac08sRUFBTzlOLEtBQUswRCxLQUFNbkIsS0FDakI3RCxPQUFPNkQsRUFBSzlDLE1BQU0sTUFDckJpRSxLQUFLbkIsR0FBUXFMLEVBSXJCLEVBRUEyRixLQUFNLFdBQ0o3UCxLQUFLb0ksTUFBTyxFQUVaLElBQ0kwSCxFQURZOVAsS0FBS3lPLFdBQVcsR0FDTEUsV0FDM0IsR0FBd0IsVUFBcEJtQixFQUFXak0sS0FDYixNQUFNaU0sRUFBVy9GLElBR25CLE9BQU8vSixLQUFLK1AsSUFDZCxFQUVBM0Qsa0JBQW1CLFNBQVM0RCxHQUMxQixHQUFJaFEsS0FBS29JLEtBQ1AsTUFBTTRILEVBR1IsSUFBSTNFLEVBQVVyTCxLQUNkLFNBQVNpUSxFQUFPQyxFQUFLQyxHQVluQixPQVhBN0QsRUFBT3pJLEtBQU8sUUFDZHlJLEVBQU92QyxJQUFNaUcsRUFDYjNFLEVBQVEyQyxLQUFPa0MsRUFFWEMsSUFHRjlFLEVBQVFLLE9BQVMsT0FDakJMLEVBQVF0QixJQUFNRyxLQUdOaUcsQ0FDWixDQUVBLElBQUssSUFBSXpVLEVBQUlzRSxLQUFLeU8sV0FBVzdTLE9BQVMsRUFBR0YsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUkwUyxFQUFRcE8sS0FBS3lPLFdBQVcvUyxHQUN4QjRRLEVBQVM4QixFQUFNTyxXQUVuQixHQUFxQixTQUFqQlAsRUFBTUMsT0FJUixPQUFPNEIsRUFBTyxPQUdoQixHQUFJN0IsRUFBTUMsUUFBVXJPLEtBQUs0UCxLQUFNLENBQzdCLElBQUlRLEVBQVdoRyxFQUFPOU4sS0FBSzhSLEVBQU8sWUFDOUJpQyxFQUFhakcsRUFBTzlOLEtBQUs4UixFQUFPLGNBRXBDLEdBQUlnQyxHQUFZQyxFQUFZLENBQzFCLEdBQUlyUSxLQUFLNFAsS0FBT3hCLEVBQU1FLFNBQ3BCLE9BQU8yQixFQUFPN0IsRUFBTUUsVUFBVSxHQUN6QixHQUFJdE8sS0FBSzRQLEtBQU94QixFQUFNRyxXQUMzQixPQUFPMEIsRUFBTzdCLEVBQU1HLFdBR3hCLE1BQU8sR0FBSTZCLEdBQ1QsR0FBSXBRLEtBQUs0UCxLQUFPeEIsRUFBTUUsU0FDcEIsT0FBTzJCLEVBQU83QixFQUFNRSxVQUFVLE9BRzNCLEtBQUkrQixFQU1ULE1BQU0sSUFBSXRULE1BQU0sMENBTGhCLEdBQUlpRCxLQUFLNFAsS0FBT3hCLEVBQU1HLFdBQ3BCLE9BQU8wQixFQUFPN0IsRUFBTUcsV0FLeEIsQ0FDRixDQUNGLENBQ0YsRUFFQWxDLE9BQVEsU0FBU3hJLEVBQU1rRyxHQUNyQixJQUFLLElBQUlyTyxFQUFJc0UsS0FBS3lPLFdBQVc3UyxPQUFTLEVBQUdGLEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJMFMsRUFBUXBPLEtBQUt5TyxXQUFXL1MsR0FDNUIsR0FBSTBTLEVBQU1DLFFBQVVyTyxLQUFLNFAsTUFDckJ4RixFQUFPOU4sS0FBSzhSLEVBQU8sZUFDbkJwTyxLQUFLNFAsS0FBT3hCLEVBQU1HLFdBQVksQ0FDaEMsSUFBSStCLEVBQWVsQyxFQUNuQixLQUNGLENBQ0YsQ0FFSWtDLElBQ1UsVUFBVHpNLEdBQ1MsYUFBVEEsSUFDRHlNLEVBQWFqQyxRQUFVdEUsR0FDdkJBLEdBQU91RyxFQUFhL0IsYUFHdEIrQixFQUFlLE1BR2pCLElBQUloRSxFQUFTZ0UsRUFBZUEsRUFBYTNCLFdBQWEsQ0FBQyxFQUl2RCxPQUhBckMsRUFBT3pJLEtBQU9BLEVBQ2R5SSxFQUFPdkMsSUFBTUEsRUFFVHVHLEdBQ0Z0USxLQUFLMEwsT0FBUyxPQUNkMUwsS0FBS2dPLEtBQU9zQyxFQUFhL0IsV0FDbEJ0QyxHQUdGak0sS0FBS3VRLFNBQVNqRSxFQUN2QixFQUVBaUUsU0FBVSxTQUFTakUsRUFBUWtDLEdBQ3pCLEdBQW9CLFVBQWhCbEMsRUFBT3pJLEtBQ1QsTUFBTXlJLEVBQU92QyxJQWNmLE1BWG9CLFVBQWhCdUMsRUFBT3pJLE1BQ1MsYUFBaEJ5SSxFQUFPekksS0FDVDdELEtBQUtnTyxLQUFPMUIsRUFBT3ZDLElBQ00sV0FBaEJ1QyxFQUFPekksTUFDaEI3RCxLQUFLK1AsS0FBTy9QLEtBQUsrSixJQUFNdUMsRUFBT3ZDLElBQzlCL0osS0FBSzBMLE9BQVMsU0FDZDFMLEtBQUtnTyxLQUFPLE9BQ2EsV0FBaEIxQixFQUFPekksTUFBcUIySyxJQUNyQ3hPLEtBQUtnTyxLQUFPUSxHQUdQdkMsQ0FDVCxFQUVBdUUsT0FBUSxTQUFTakMsR0FDZixJQUFLLElBQUk3UyxFQUFJc0UsS0FBS3lPLFdBQVc3UyxPQUFTLEVBQUdGLEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJMFMsRUFBUXBPLEtBQUt5TyxXQUFXL1MsR0FDNUIsR0FBSTBTLEVBQU1HLGFBQWVBLEVBR3ZCLE9BRkF2TyxLQUFLdVEsU0FBU25DLEVBQU1PLFdBQVlQLEVBQU1JLFVBQ3RDRSxFQUFjTixHQUNQbkMsQ0FFWCxDQUNGLEVBRUEsTUFBUyxTQUFTb0MsR0FDaEIsSUFBSyxJQUFJM1MsRUFBSXNFLEtBQUt5TyxXQUFXN1MsT0FBUyxFQUFHRixHQUFLLElBQUtBLEVBQUcsQ0FDcEQsSUFBSTBTLEVBQVFwTyxLQUFLeU8sV0FBVy9TLEdBQzVCLEdBQUkwUyxFQUFNQyxTQUFXQSxFQUFRLENBQzNCLElBQUkvQixFQUFTOEIsRUFBTU8sV0FDbkIsR0FBb0IsVUFBaEJyQyxFQUFPekksS0FBa0IsQ0FDM0IsSUFBSTRNLEVBQVNuRSxFQUFPdkMsSUFDcEIyRSxFQUFjTixFQUNoQixDQUNBLE9BQU9xQyxDQUNULENBQ0YsQ0FJQSxNQUFNLElBQUkxVCxNQUFNLHdCQUNsQixFQUVBMlQsY0FBZSxTQUFTN0IsRUFBVWQsRUFBWUUsR0FhNUMsT0FaQWpPLEtBQUs4TCxTQUFXLENBQ2R2QixTQUFVd0MsRUFBTzhCLEdBQ2pCZCxXQUFZQSxFQUNaRSxRQUFTQSxHQUdTLFNBQWhCak8sS0FBSzBMLFNBR1AxTCxLQUFLK0osSUFBTUcsR0FHTitCLENBQ1QsR0FPS3JQLENBRVQsQ0E5c0JjLENBbXRCWEYsRUFBT0UsU0FHVixJQUNFK1QsbUJBQXFCMUcsQ0FDdkIsQ0FBRSxNQUFPMkcsR0FVUGpULFNBQVMsSUFBSyx5QkFBZEEsQ0FBd0NzTSxFQUMxQyxDQUNBLElBNkpBLElBQUk0RyxHQUFPN08sRUFBVUMsRUFDakI2TyxHQUFTblQsU0FBUytCLFVBQ2xCcVIsR0FBUyx3QkFDVEMsR0FBTyxPQTZCWCxTQUFTQyxHQUFVQyxFQUFTQyxFQUFZalAsRUFBR2tKLEdBRXZDLE9BQU8sSUFBS2xKLElBQU1BLEVBQUlvTixXQUFVLFNBQVVoQyxFQUFTQyxHQUMvQyxTQUFTNkQsRUFBVW5ULEdBQVMsSUFBTW9ULEVBQUtqRyxFQUFVNEMsS0FBSy9QLEdBQVMsQ0FBRSxNQUFPb0IsR0FBS2tPLEVBQU9sTyxFQUFJLENBQUUsQ0FDMUYsU0FBU2lTLEVBQVNyVCxHQUFTLElBQU1vVCxFQUFLakcsRUFBaUIsTUFBRW5OLEdBQVMsQ0FBRSxNQUFPb0IsR0FBS2tPLEVBQU9sTyxFQUFJLENBQUUsQ0FDN0YsU0FBU2dTLEVBQUt2UixHQUpsQixJQUFlN0IsRUFJYTZCLEVBQU9zSSxLQUFPa0YsRUFBUXhOLEVBQU83QixRQUoxQ0EsRUFJeUQ2QixFQUFPN0IsTUFKaERBLGFBQWlCaUUsRUFBSWpFLEVBQVEsSUFBSWlFLEdBQUUsU0FBVW9MLEdBQVdBLEVBQVFyUCxFQUFRLEtBSWpCd1AsS0FBSzJELEVBQVdFLEVBQVcsQ0FDN0dELEdBQU1qRyxFQUFZQSxFQUFVMUgsTUFBTXdOLEVBQVNDLEdBQWMsS0FBS25ELE9BQ2xFLEdBQ0osQ0FsQ0FnRCxNQUFRRixJQUFVM1AsR0FBZ0IwUCxHQUFLQyxHQUFRRSxHQUFNLENBQ25Eek8sY0FBYyxFQUNkbEIsSUFBSyxXQUNILElBQ0UsT0FBUSxHQUFLckIsTUFBTWMsTUFBTWlRLElBQVEsRUFDbkMsQ0FBRSxNQUFPMVIsR0FDUCxNQUFPLEVBQ1QsQ0FDRixJQXdDRixJQVpBLElBTUlrUyxHQU5BQyxHQUFRaFQsRUFBSyxlQUNiaVQsR0FBT2pULEVBQUssUUFDWmtULE1BQVNuVSxFQUFRb1UsY0FBZXBVLEVBQVFxVSxVQUN4Q0MsR0FBU0gsR0FDVGhXLEdBQUksRUFJSm9XLEdBQXlCLGlIQUUzQjVPLE1BQU0sS0FFRHhILEdBUEMsSUFRRjZWLEdBQVFoVSxFQUFRdVUsR0FBdUJwVyxTQUN6QytHLEVBQU04TyxHQUFNN1IsVUFBVzhSLElBQU8sR0FDOUIvTyxFQUFNOE8sR0FBTTdSLFVBQVcrUixJQUFNLElBQ3hCSSxJQUFTLEVBR2xCLElBQUlFLEdBQVMsQ0FDWEwsSUFBS0EsR0FDTEcsT0FBUUEsR0FDUkwsTUFBT0EsR0FDUEMsS0FBTUEsSUFHSk8sR0FBZSxTQUFVeE4sRUFBUXlOLEVBQUs3TyxHQUN4QyxJQUFLLElBQUlwRixLQUFPaVUsRUFBS25QLEVBQVUwQixFQUFReEcsRUFBS2lVLEVBQUlqVSxHQUFNb0YsR0FDdEQsT0FBT29CLENBQ1QsRUFFSTBOLEdBQWMsU0FBVTdYLEVBQUk4WCxFQUFhdFQsRUFBTXVULEdBQ2pELEtBQU0vWCxhQUFjOFgsU0FBb0MxWCxJQUFuQjJYLEdBQWdDQSxLQUFrQi9YLEVBQ3JGLE1BQU1FLFVBQVVzRSxFQUFPLDJCQUN2QixPQUFPeEUsQ0FDWCxFQUtJZ1ksR0FBVyxTQUFVaFksR0FDdkIsUUFBV0ksSUFBUEosRUFBa0IsT0FBTyxFQUM3QixJQUFJaVksRUFBU3ZYLEVBQVdWLEdBQ3BCdUIsRUFBU1YsRUFBVW9YLEdBQ3ZCLEdBQUlBLElBQVcxVyxFQUFRLE1BQU0yVyxXQUFXLGlCQUN4QyxPQUFPM1csQ0FDVCxFQUtJNFcsR0FBVzdYLE9BQU8sS0FBSzhYLHFCQUFxQixHQUFLOVgsT0FBUyxTQUFVTixHQUN0RSxNQUFtQixVQUFaZ0MsRUFBS2hDLEdBQWtCQSxFQUFHNkksTUFBTSxJQUFNdkksT0FBT04sRUFDdEQsRUFLSXFZLEdBQWEsU0FBVXJZLEdBQ3pCLE9BQU9tWSxHQUFTaFksRUFBU0gsR0FDM0IsRUFFSXNZLEdBQVE5WCxLQUFLb0ssSUFDYjJOLEdBQVEvWCxLQUFLSSxJQUNiNFgsR0FBbUIsU0FBVTNXLEVBQU9OLEdBRXRDLE9BREFNLEVBQVFuQixFQUFXbUIsSUFDSixFQUFJeVcsR0FBTXpXLEVBQVFOLEVBQVEsR0FBS2dYLEdBQU0xVyxFQUFPTixFQUM3RCxFQU9Ja1gsR0FBaUIsU0FBVUMsR0FDN0IsT0FBTyxTQUFVQyxFQUFPQyxFQUFJQyxHQUMxQixJQUdJalYsRUFIQWlCLEVBQUl3VCxHQUFXTSxHQUNmcFgsRUFBU1YsRUFBVWdFLEVBQUV0RCxRQUNyQk0sRUFBUTJXLEdBQWlCSyxFQUFXdFgsR0FJeEMsR0FBSW1YLEdBQWVFLEdBQU1BLEdBQUksS0FBT3JYLEVBQVNNLEdBRzNDLElBRkErQixFQUFRaUIsRUFBRWhELE9BRUcrQixFQUFPLE9BQU8sT0FFdEIsS0FBTXJDLEVBQVNNLEVBQU9BLElBQVMsSUFBSTZXLEdBQWU3VyxLQUFTZ0QsSUFDNURBLEVBQUVoRCxLQUFXK1csRUFBSSxPQUFPRixHQUFlN1csR0FBUyxFQUNwRCxPQUFRNlcsSUFBZ0IsQ0FDNUIsQ0FDRixFQUVJSSxHQUFTdFYsRUFBUSxRQUVqQnVWLEdBQWEsU0FBVXBWLEdBQ3pCLE9BQU9tVixHQUFPblYsS0FBU21WLEdBQU9uVixHQUFPUSxFQUFLUixHQUM1QyxFQUVJcVYsR0FBZVAsSUFBZSxHQUM5QlEsR0FBV0YsR0FBVyxZQUV0QkcsR0FBc0IsU0FBVTdRLEVBQVE4USxHQUMxQyxJQUdJeFYsRUFIQWtCLEVBQUl3VCxHQUFXaFEsR0FDZmhILEVBQUksRUFDSm9FLEVBQVMsR0FFYixJQUFLOUIsS0FBT2tCLEVBQU9sQixHQUFPc1YsSUFBVTFRLEVBQUsxRCxFQUFHbEIsSUFBUThCLEVBQU81QixLQUFLRixHQUVoRSxLQUFPd1YsRUFBTTVYLE9BQVNGLEdBQU9rSCxFQUFLMUQsRUFBR2xCLEVBQU13VixFQUFNOVgsU0FDOUMyWCxHQUFhdlQsRUFBUTlCLElBQVE4QixFQUFPNUIsS0FBS0YsSUFFNUMsT0FBTzhCLENBQ1QsRUFHSTJULEdBQWUsZ0dBRWpCdlEsTUFBTSxLQUlKd1EsR0FBYUQsR0FBYWhWLE9BQU8sU0FBVSxhQU0zQ2tWLEdBQWMsQ0FDakIxUixFQUxTdEgsT0FBT2laLHFCQUF1QixTQUE2QjFVLEdBQ25FLE9BQU9xVSxHQUFvQnJVLEVBQUd3VSxHQUNoQyxHQU1JRyxHQUFhLFNBQWM1VixHQU83QixJQU5BLElBQUlpQixFQUFJeEUsRUFBVXNGLE1BQ2RwRSxFQUFTVixFQUFVZ0UsRUFBRXRELFFBQ3JCa1ksRUFBTzlVLFVBQVVwRCxPQUNqQk0sRUFBUTJXLEdBQWlCaUIsRUFBTyxFQUFJOVUsVUFBVSxRQUFLdkUsRUFBV21CLEdBQzlEbVksRUFBTUQsRUFBTyxFQUFJOVUsVUFBVSxRQUFLdkUsRUFDaEN1WixPQUFpQnZaLElBQVJzWixFQUFvQm5ZLEVBQVNpWCxHQUFpQmtCLEVBQUtuWSxHQUN6RG9ZLEVBQVM5WCxHQUFPZ0QsRUFBRWhELEtBQVcrQixFQUNwQyxPQUFPaUIsQ0FDVCxFQUVJK1UsR0FBTWpTLEVBQVVDLEVBRWhCaVMsR0FBUXhWLEVBQUssZUFFYnlWLEdBQWtCLFNBQVU5WixFQUFJK1osRUFBS0MsR0FDbkNoYSxJQUFPdUksRUFBS3ZJLEVBQUtnYSxFQUFPaGEsRUFBS0EsRUFBR3FGLFVBQVd3VSxLQUFRRCxHQUFJNVosRUFBSTZaLEdBQU8sQ0FBRTNSLGNBQWMsRUFBTXRFLE1BQU9tVyxHQUNyRyxFQUVJRSxHQUFlL1gsR0FBcUIsU0FBVUcsRUFBUUUsR0FZMUQsSUFBSTJYLEVBQU9aLEdBQVkxUixFQUNuQkYsRUFBS0MsRUFBVUMsRUFHZnVTLEVBQWUsY0FDZkMsRUFBWSxXQUNaOVEsRUFBWSxZQUVaK1EsRUFBYyxlQUNkQyxFQUFlcFgsRUFBUWlYLEdBQ3ZCSSxFQUFZclgsRUFBUWtYLEdBQ3BCNVosRUFBTzBDLEVBQVExQyxLQUNmMFgsRUFBYWhWLEVBQVFnVixXQUVyQnNDLEVBQVd0WCxFQUFRc1gsU0FDbkJDLEVBQWFILEVBQ2JJLEVBQU1sYSxFQUFLa2EsSUFDWEMsRUFBTW5hLEVBQUttYSxJQUNYbGEsRUFBUUQsRUFBS0MsTUFDYm1hLEVBQU1wYSxFQUFLb2EsSUFDWEMsRUFBTXJhLEVBQUtxYSxJQUNYQyxFQUFTLFNBQ1RDLEVBQWMsYUFDZEMsRUFBYyxhQUNkQyxFQUFVblUsRUFBZSxLQUFPZ1UsRUFDaENJLEVBQVVwVSxFQUFlLEtBQU9pVSxFQUNoQ0ksRUFBVXJVLEVBQWUsS0FBT2tVLEVBR3BDLFNBQVNJLEVBQVl4WCxFQUFPeVgsRUFBTUMsR0FDaEMsSUFPSXRXLEVBQUcrSixFQUFHM0YsRUFQTm1TLEVBQVMsSUFBSUMsTUFBTUYsR0FDbkJHLEVBQWdCLEVBQVRILEVBQWFELEVBQU8sRUFDM0JLLEdBQVEsR0FBS0QsR0FBUSxFQUNyQkUsRUFBUUQsR0FBUSxFQUNoQkUsRUFBYyxLQUFUUCxFQUFjVixFQUFJLEdBQUksSUFBTUEsRUFBSSxHQUFJLElBQU0sRUFDL0N0WixFQUFJLEVBQ0pGLEVBQUl5QyxFQUFRLEdBQWUsSUFBVkEsR0FBZSxFQUFJQSxFQUFRLEVBQUksRUFBSSxFQWtDeEQsS0FoQ0FBLEVBQVE4VyxFQUFJOVcsS0FFQ0EsR0FBU0EsSUFBVTRXLEdBRTlCekwsRUFBSW5MLEdBQVNBLEVBQVEsRUFBSSxFQUN6Qm9CLEVBQUkwVyxJQUVKMVcsRUFBSXZFLEVBQU1tYSxFQUFJaFgsR0FBU2lYLEdBQ25CalgsR0FBU3dGLEVBQUl1UixFQUFJLEdBQUkzVixJQUFNLElBQzdCQSxJQUNBb0UsR0FBSyxJQUdMeEYsR0FERW9CLEVBQUkyVyxHQUFTLEVBQ05DLEVBQUt4UyxFQUVMd1MsRUFBS2pCLEVBQUksRUFBRyxFQUFJZ0IsSUFFZnZTLEdBQUssSUFDZnBFLElBQ0FvRSxHQUFLLEdBRUhwRSxFQUFJMlcsR0FBU0QsR0FDZjNNLEVBQUksRUFDSi9KLEVBQUkwVyxHQUNLMVcsRUFBSTJXLEdBQVMsR0FDdEI1TSxHQUFLbkwsRUFBUXdGLEVBQUksR0FBS3VSLEVBQUksRUFBR1UsR0FDN0JyVyxHQUFRMlcsSUFFUjVNLEVBQUluTCxFQUFRK1csRUFBSSxFQUFHZ0IsRUFBUSxHQUFLaEIsRUFBSSxFQUFHVSxHQUN2Q3JXLEVBQUksSUFHRHFXLEdBQVEsRUFBR0UsRUFBT2xhLEtBQVcsSUFBSjBOLEVBQVNBLEdBQUssSUFBS3NNLEdBQVEsR0FHM0QsSUFGQXJXLEVBQUlBLEdBQUtxVyxFQUFPdE0sRUFDaEIwTSxHQUFRSixFQUNESSxFQUFPLEVBQUdGLEVBQU9sYSxLQUFXLElBQUoyRCxFQUFTQSxHQUFLLElBQUt5VyxHQUFRLEdBRTFELE9BREFGLElBQVNsYSxJQUFVLElBQUpGLEVBQ1JvYSxDQUNULENBQ0EsU0FBU00sRUFBY04sRUFBUUYsRUFBTUMsR0FDbkMsSUFPSXZNLEVBUEEwTSxFQUFnQixFQUFUSCxFQUFhRCxFQUFPLEVBQzNCSyxHQUFRLEdBQUtELEdBQVEsRUFDckJFLEVBQVFELEdBQVEsRUFDaEJJLEVBQVFMLEVBQU8sRUFDZnBhLEVBQUlpYSxFQUFTLEVBQ2JuYSxFQUFJb2EsRUFBT2xhLEtBQ1gyRCxFQUFRLElBQUo3RCxFQUdSLElBREFBLElBQU0sRUFDQzJhLEVBQVEsRUFBRzlXLEVBQVEsSUFBSkEsRUFBVXVXLEVBQU9sYSxHQUFJQSxJQUFLeWEsR0FBUyxHQUl6RCxJQUhBL00sRUFBSS9KLEdBQUssSUFBTThXLEdBQVMsRUFDeEI5VyxLQUFPOFcsRUFDUEEsR0FBU1QsRUFDRlMsRUFBUSxFQUFHL00sRUFBUSxJQUFKQSxFQUFVd00sRUFBT2xhLEdBQUlBLElBQUt5YSxHQUFTLEdBQ3pELEdBQVUsSUFBTjlXLEVBQ0ZBLEVBQUksRUFBSTJXLE1BQ0gsSUFBSTNXLElBQU0wVyxFQUNmLE9BQU8zTSxFQUFJZ04sSUFBTTVhLEdBQUtxWixFQUFXQSxFQUVqQ3pMLEdBQVE0TCxFQUFJLEVBQUdVLEdBQ2ZyVyxHQUFRMlcsQ0FDVixDQUFFLE9BQVF4YSxHQUFLLEVBQUksR0FBSzROLEVBQUk0TCxFQUFJLEVBQUczVixFQUFJcVcsRUFDekMsQ0FFQSxTQUFTVyxFQUFVQyxHQUNqQixPQUFPQSxFQUFNLElBQU0sR0FBS0EsRUFBTSxJQUFNLEdBQUtBLEVBQU0sSUFBTSxFQUFJQSxFQUFNLEVBQ2pFLENBQ0EsU0FBU0MsRUFBT2xjLEdBQ2QsTUFBTyxDQUFNLElBQUxBLEVBQ1YsQ0FDQSxTQUFTbWMsRUFBUW5jLEdBQ2YsTUFBTyxDQUFNLElBQUxBLEVBQVdBLEdBQU0sRUFBSSxJQUMvQixDQUNBLFNBQVNvYyxFQUFRcGMsR0FDZixNQUFPLENBQU0sSUFBTEEsRUFBV0EsR0FBTSxFQUFJLElBQU1BLEdBQU0sR0FBSyxJQUFNQSxHQUFNLEdBQUssSUFDakUsQ0FDQSxTQUFTcWMsRUFBUXJjLEdBQ2YsT0FBT29iLEVBQVlwYixFQUFJLEdBQUksRUFDN0IsQ0FDQSxTQUFTc2MsRUFBUXRjLEdBQ2YsT0FBT29iLEVBQVlwYixFQUFJLEdBQUksRUFDN0IsQ0FFQSxTQUFTdWMsRUFBVUMsRUFBRzdZLEVBQUs4WSxHQUN6Qi9VLEVBQUc4VSxFQUFFbFQsR0FBWTNGLEVBQUssQ0FBRXFELElBQUssV0FBYyxPQUFPckIsS0FBSzhXLEVBQVcsR0FDcEUsQ0FFQSxTQUFTelYsRUFBSTBWLEVBQU1ULEVBQU9wYSxFQUFPOGEsR0FDL0IsSUFDSUMsRUFBVzVFLElBRENuVyxHQUVoQixHQUFJK2EsRUFBV1gsRUFBUVMsRUFBS3hCLEdBQVUsTUFBTWhELEVBQVdtQyxHQUN2RCxJQUFJM1csRUFBUWdaLEVBQUt6QixHQUFTNEIsR0FDdEJDLEVBQVFGLEVBQVdGLEVBQUt2QixHQUN4QjRCLEVBQU9yWixFQUFNaEMsTUFBTW9iLEVBQU9BLEVBQVFiLEdBQ3RDLE9BQU9VLEVBQWlCSSxFQUFPQSxFQUFLM0gsU0FDdEMsQ0FDQSxTQUFTeEksRUFBSThQLEVBQU1ULEVBQU9wYSxFQUFPbWIsRUFBWXBaLEVBQU8rWSxHQUNsRCxJQUNJQyxFQUFXNUUsSUFEQ25XLEdBRWhCLEdBQUkrYSxFQUFXWCxFQUFRUyxFQUFLeEIsR0FBVSxNQUFNaEQsRUFBV21DLEdBSXZELElBSEEsSUFBSTNXLEVBQVFnWixFQUFLekIsR0FBUzRCLEdBQ3RCQyxFQUFRRixFQUFXRixFQUFLdkIsR0FDeEI0QixFQUFPQyxHQUFZcFosR0FDZHZDLEVBQUksRUFBR0EsRUFBSTRhLEVBQU81YSxJQUFLcUMsRUFBTW9aLEVBQVF6YixHQUFLMGIsRUFBS0osRUFBaUJ0YixFQUFJNGEsRUFBUTVhLEVBQUksRUFDM0YsQ0FFQSxHQUFLcVcsR0FBT0wsSUFnRkwsQ0FDTCxJQUFLeFEsR0FBTyxXQUNWeVQsRUFBYSxFQUNmLE1BQU96VCxHQUFPLFdBQ1osSUFBSXlULEdBQWMsRUFDcEIsS0FBTXpULEdBQU8sV0FJWCxPQUhBLElBQUl5VCxFQUNKLElBQUlBLEVBQWEsS0FDakIsSUFBSUEsRUFBYXlCLEtBQ1Z6QixFQUFhOVYsTUFBUTJWLENBQzlCLElBQUksQ0FNRixJQURBLElBQ3lDeFcsRUFEckNzWixHQUpKM0MsRUFBZSxTQUFxQi9ZLEdBRWxDLE9BREFzVyxHQUFZbFMsS0FBTTJVLEdBQ1gsSUFBSUcsRUFBV3pDLEdBQVN6VyxHQUNqQyxHQUNvQytILEdBQWFtUixFQUFXblIsR0FDbkQ2TCxFQUFPK0UsRUFBS08sR0FBYWhNLEVBQUksRUFBUTBHLEVBQUs1VCxPQUFTa04sSUFDbkQ5SyxFQUFNd1IsRUFBSzFHLFFBQVM2TCxHQUFlbFMsRUFBTWtTLEVBQWMzVyxFQUFLOFcsRUFBVzlXLElBRWhGc1osRUFBaUJuUSxZQUFjd04sQ0FDakMsQ0FFQSxJQUFJb0MsRUFBTyxJQUFJbkMsRUFBVSxJQUFJRCxFQUFhLElBQ3RDNEMsRUFBVzNDLEVBQVVqUixHQUFXNlQsUUFDcENULEVBQUtTLFFBQVEsRUFBRyxZQUNoQlQsRUFBS1MsUUFBUSxFQUFHLGFBQ1pULEVBQUtVLFFBQVEsSUFBT1YsRUFBS1UsUUFBUSxJQUFJekYsR0FBYTRDLEVBQVVqUixHQUFZLENBQzFFNlQsUUFBUyxTQUFpQkUsRUFBWXpaLEdBQ3BDc1osRUFBU2piLEtBQUswRCxLQUFNMFgsRUFBWXpaLEdBQVMsSUFBTSxHQUNqRCxFQUNBMFosU0FBVSxTQUFrQkQsRUFBWXpaLEdBQ3RDc1osRUFBU2piLEtBQUswRCxLQUFNMFgsRUFBWXpaLEdBQVMsSUFBTSxHQUNqRCxJQUNDLEVBQ0wsTUFqSEUwVyxFQUFlLFNBQXFCL1ksR0FDbENzVyxHQUFZbFMsS0FBTTJVLEVBQWNILEdBQ2hDLElBQUlvRCxFQUFhdkYsR0FBU3pXLEdBQzFCb0UsS0FBS2tYLEdBQUtyRCxHQUFXdlgsS0FBSyxJQUFJdVosTUFBTStCLEdBQWEsR0FDakQ1WCxLQUFLdVYsR0FBV3FDLENBQ2xCLEVBRUFoRCxFQUFZLFNBQWtCZ0IsRUFBUThCLEVBQVlFLEdBQ2hEMUYsR0FBWWxTLEtBQU00VSxFQUFXSCxHQUM3QnZDLEdBQVkwRCxFQUFRakIsRUFBY0YsR0FDbEMsSUFBSW9ELEVBQWVqQyxFQUFPTCxHQUN0QnVDLEVBQVMvYyxFQUFXMmMsR0FDeEIsR0FBSUksRUFBUyxHQUFLQSxFQUFTRCxFQUFjLE1BQU10RixFQUFXLGlCQUUxRCxHQUFJdUYsR0FESkYsT0FBNEJuZCxJQUFmbWQsRUFBMkJDLEVBQWVDLEVBQVM1YyxFQUFVMGMsSUFDaERDLEVBQWMsTUFBTXRGLEVBeEovQixpQkF5SmZ2UyxLQUFLc1YsR0FBV00sRUFDaEI1VixLQUFLd1YsR0FBV3NDLEVBQ2hCOVgsS0FBS3VWLEdBQVdxQyxDQUNsQixFQUVJelcsSUFDRnlWLEVBQVVqQyxFQUFjUyxFQUFhLE1BQ3JDd0IsRUFBVWhDLEVBQVdPLEVBQVEsTUFDN0J5QixFQUFVaEMsRUFBV1EsRUFBYSxNQUNsQ3dCLEVBQVVoQyxFQUFXUyxFQUFhLE9BR3BDckQsR0FBYTRDLEVBQVVqUixHQUFZLENBQ2pDOFQsUUFBUyxTQUFpQkMsR0FDeEIsT0FBT3JXLEVBQUlyQixLQUFNLEVBQUcwWCxHQUFZLElBQU0sSUFBTSxFQUM5QyxFQUNBSyxTQUFVLFNBQWtCTCxHQUMxQixPQUFPclcsRUFBSXJCLEtBQU0sRUFBRzBYLEdBQVksRUFDbEMsRUFDQU0sU0FBVSxTQUFrQk4sR0FDMUIsSUFBSXBCLEVBQVFqVixFQUFJckIsS0FBTSxFQUFHMFgsRUFBWTFZLFVBQVUsSUFDL0MsT0FBUXNYLEVBQU0sSUFBTSxFQUFJQSxFQUFNLEtBQU8sSUFBTSxFQUM3QyxFQUNBMkIsVUFBVyxTQUFtQlAsR0FDNUIsSUFBSXBCLEVBQVFqVixFQUFJckIsS0FBTSxFQUFHMFgsRUFBWTFZLFVBQVUsSUFDL0MsT0FBT3NYLEVBQU0sSUFBTSxFQUFJQSxFQUFNLEVBQy9CLEVBQ0E0QixTQUFVLFNBQWtCUixHQUMxQixPQUFPckIsRUFBVWhWLEVBQUlyQixLQUFNLEVBQUcwWCxFQUFZMVksVUFBVSxJQUN0RCxFQUNBbVosVUFBVyxTQUFtQlQsR0FDNUIsT0FBT3JCLEVBQVVoVixFQUFJckIsS0FBTSxFQUFHMFgsRUFBWTFZLFVBQVUsT0FBUyxDQUMvRCxFQUNBb1osV0FBWSxTQUFvQlYsR0FDOUIsT0FBT3hCLEVBQWM3VSxFQUFJckIsS0FBTSxFQUFHMFgsRUFBWTFZLFVBQVUsSUFBSyxHQUFJLEVBQ25FLEVBQ0FxWixXQUFZLFNBQW9CWCxHQUM5QixPQUFPeEIsRUFBYzdVLEVBQUlyQixLQUFNLEVBQUcwWCxFQUFZMVksVUFBVSxJQUFLLEdBQUksRUFDbkUsRUFDQXdZLFFBQVMsU0FBaUJFLEVBQVl6WixHQUNwQ2dKLEVBQUlqSCxLQUFNLEVBQUcwWCxFQUFZbkIsRUFBUXRZLEVBQ25DLEVBQ0EwWixTQUFVLFNBQWtCRCxFQUFZelosR0FDdENnSixFQUFJakgsS0FBTSxFQUFHMFgsRUFBWW5CLEVBQVF0WSxFQUNuQyxFQUNBcWEsU0FBVSxTQUFrQlosRUFBWXpaLEdBQ3RDZ0osRUFBSWpILEtBQU0sRUFBRzBYLEVBQVlsQixFQUFTdlksRUFBT2UsVUFBVSxHQUNyRCxFQUNBdVosVUFBVyxTQUFtQmIsRUFBWXpaLEdBQ3hDZ0osRUFBSWpILEtBQU0sRUFBRzBYLEVBQVlsQixFQUFTdlksRUFBT2UsVUFBVSxHQUNyRCxFQUNBd1osU0FBVSxTQUFrQmQsRUFBWXpaLEdBQ3RDZ0osRUFBSWpILEtBQU0sRUFBRzBYLEVBQVlqQixFQUFTeFksRUFBT2UsVUFBVSxHQUNyRCxFQUNBeVosVUFBVyxTQUFtQmYsRUFBWXpaLEdBQ3hDZ0osRUFBSWpILEtBQU0sRUFBRzBYLEVBQVlqQixFQUFTeFksRUFBT2UsVUFBVSxHQUNyRCxFQUNBMFosV0FBWSxTQUFvQmhCLEVBQVl6WixHQUMxQ2dKLEVBQUlqSCxLQUFNLEVBQUcwWCxFQUFZZixFQUFTMVksRUFBT2UsVUFBVSxHQUNyRCxFQUNBMlosV0FBWSxTQUFvQmpCLEVBQVl6WixHQUMxQ2dKLEVBQUlqSCxLQUFNLEVBQUcwWCxFQUFZaEIsRUFBU3pZLEVBQU9lLFVBQVUsR0FDckQsSUFxQ0ptVixHQUFnQlEsRUFBY0gsR0FDOUJMLEdBQWdCUyxFQUFXSCxHQUMzQmhTLEVBQU1tUyxFQUFValIsR0FBWW9PLEdBQU9OLE1BQU0sR0FDekM3VSxFQUFRNFgsR0FBZ0JHLEVBQ3hCL1gsRUFBUTZYLEdBQWFHLENBQ3JCLElBRUlnRSxHQUFhLENBQUMsRUFJZEMsR0FBV25hLEVBQUssWUFDaEJvYSxHQUFhakQsTUFBTW5XLFVBRW5CcVosR0FBZSxTQUFVMWUsR0FDM0IsWUFBY0ksSUFBUEosSUFBcUJ1ZSxHQUFXL0MsUUFBVXhiLEdBQU15ZSxHQUFXRCxNQUFjeGUsRUFDbEYsRUFNSTJlLEdBQWNyZSxPQUFPNlUsTUFBUSxTQUFjdFEsR0FDN0MsT0FBT3FVLEdBQW9CclUsRUFBR3VVLEdBQ2hDLEVBRUl3RixHQUFhOVgsRUFBZXhHLE9BQU91ZSxpQkFBbUIsU0FBMEJoYSxFQUFHaWEsR0FDckY3ZSxFQUFVNEUsR0FLVixJQUpBLElBR0lnRCxFQUhBc04sRUFBT3dKLEdBQVlHLEdBQ25CdmQsRUFBUzRULEVBQUs1VCxPQUNkRixFQUFJLEVBRURFLEVBQVNGLEdBQUdzRyxFQUFVQyxFQUFFL0MsRUFBR2dELEVBQUlzTixFQUFLOVQsS0FBTXlkLEVBQVdqWCxJQUM1RCxPQUFPaEQsQ0FDVCxFQUVJa2EsR0FBYTdiLEVBQVFnRSxTQUNyQjhYLEdBQVFELElBQWNBLEdBQVdFLGdCQU1qQ0MsR0FBYW5HLEdBQVcsWUFDeEJvRyxHQUFRLFdBQTBCLEVBQ2xDQyxHQUFjLFlBR2RDLEdBQWEsV0FFZixJQUlJQyxFQUpBQyxFQUFTbFksRUFBVyxVQUNwQmhHLEVBQUkrWCxHQUFhN1gsT0FjckIsSUFWQWdlLEVBQU9DLE1BQU1DLFFBQVUsT0FDdkJULEdBQU1VLFlBQVlILEdBQ2xCQSxFQUFPM0gsSUFBTSxlQUdiMEgsRUFBaUJDLEVBQU9JLGNBQWN6WSxVQUN2QjBZLE9BQ2ZOLEVBQWVPLE1BQU1DLHVDQUNyQlIsRUFBZVMsUUFDZlYsR0FBYUMsRUFBZXpWLEVBQ3JCeEksWUFBWWdlLEdBQVdELElBQWFoRyxHQUFhL1gsSUFDeEQsT0FBT2dlLElBQ1QsRUFFSVcsR0FBZ0IxZixPQUFPeU0sUUFBVSxTQUFnQmxJLEVBQUdpYSxHQUN0RCxJQUFJclosRUFRSixPQVBVLE9BQU5aLEdBQ0ZzYSxHQUFNQyxJQUFlbmYsRUFBVTRFLEdBQy9CWSxFQUFTLElBQUkwWixHQUNiQSxHQUFNQyxJQUFlLEtBRXJCM1osRUFBT3laLElBQWNyYSxHQUNoQlksRUFBUzRaLFVBQ01qZixJQUFmMGUsRUFBMkJyWixFQUFTbVosR0FBV25aLEVBQVFxWixFQUNoRSxFQUtJbUIsR0FBYWxILEdBQVcsWUFDeEJtSCxHQUFjNWYsT0FBTytFLFVBRXJCOGEsR0FBYTdmLE9BQU9pTCxnQkFBa0IsU0FBVTFHLEdBRWxELE9BREFBLEVBQUl4RSxFQUFVd0UsR0FDVjBELEVBQUsxRCxFQUFHb2IsSUFBb0JwYixFQUFFb2IsSUFDTixtQkFBakJwYixFQUFFaUksYUFBNkJqSSxhQUFhQSxFQUFFaUksWUFDaERqSSxFQUFFaUksWUFBWXpILFVBQ2RSLGFBQWF2RSxPQUFTNGYsR0FBYyxJQUMvQyxFQUVJRSxHQUFhL2IsRUFBSyxZQUVsQmdjLEdBQXlCdmQsRUFBTXdkLGtCQUFvQixTQUFVdGdCLEdBQy9ELEdBQVVJLE1BQU5KLEVBQWlCLE9BQU9BLEVBQUdvZ0IsS0FDMUJwZ0IsRUFBRyxlQUNIdWUsR0FBVzNaLEVBQVM1RSxHQUMzQixFQUlJdWdCLEdBQVcvRSxNQUFNZ0YsU0FBVyxTQUFpQjlRLEdBQy9DLE1BQW9CLFNBQWIxTixFQUFLME4sRUFDZCxFQUVJK1EsR0FBWXBjLEVBQUssV0FrQmpCcWMsR0FBc0IsU0FBVUMsRUFBVXBmLEdBQzVDLE9BQU8sSUFqQnNCLFNBQVVvZixHQUN2QyxJQUFJbkUsRUFTRixPQVJFK0QsR0FBU0ksS0FHSyxtQkFGaEJuRSxFQUFJbUUsRUFBUzdULGNBRWtCMFAsSUFBTWhCLFFBQVMrRSxHQUFTL0QsRUFBRW5YLGFBQWFtWCxPQUFJcGMsR0FDdEVMLEVBQVV5YyxJQUVGLFFBRFZBLEVBQUlBLEVBQUVpRSxPQUNVakUsT0FBSXBjLFNBRVRBLElBQU5vYyxFQUFrQmhCLE1BQVFnQixDQUNyQyxDQU1hLENBQTBCbUUsR0FBOUIsQ0FBeUNwZixFQUNsRCxFQWNJcWYsR0FBZ0IsU0FBVUMsRUFBTUMsR0FDbEMsSUFBSUMsRUFBaUIsR0FBUkYsRUFDVEcsRUFBb0IsR0FBUkgsRUFDWkksRUFBa0IsR0FBUkosRUFDVkssRUFBbUIsR0FBUkwsRUFDWE0sRUFBd0IsR0FBUk4sRUFDaEJPLEVBQW1CLEdBQVJQLEdBQWFNLEVBQ3hCcFUsRUFBUytULEdBQVdKLEdBQ3hCLE9BQU8sU0FBVS9ILEVBQU8wSSxFQUFZdGdCLEdBUWxDLElBUEEsSUFNSXlHLEVBQUtzRyxFQU5MakosRUFBSXhFLEVBQVVzWSxHQUNkdFYsRUFBTzhVLEdBQVN0VCxHQUNoQitDLEVBQUl1QixHQUFLa1ksRUFBWXRnQixFQUFNLEdBQzNCUSxFQUFTVixFQUFVd0MsRUFBSzlCLFFBQ3hCTSxFQUFRLEVBQ1I0RCxFQUFTc2IsRUFBU2hVLEVBQU80TCxFQUFPcFgsR0FBVXlmLEVBQVlqVSxFQUFPNEwsRUFBTyxRQUFLdlksRUFFdkVtQixFQUFTTSxFQUFPQSxJQUFTLElBQUl1ZixHQUFZdmYsS0FBU3dCLEtBRXREeUssRUFBTWxHLEVBRE5KLEVBQU1uRSxFQUFLeEIsR0FDRUEsRUFBT2dELEdBQ2hCZ2MsR0FDRixHQUFJRSxFQUFRdGIsRUFBTzVELEdBQVNpTSxPQUN2QixHQUFJQSxFQUFLLE9BQVErUyxHQUNwQixLQUFLLEVBQUcsT0FBTyxFQUNmLEtBQUssRUFBRyxPQUFPclosRUFDZixLQUFLLEVBQUcsT0FBTzNGLEVBQ2YsS0FBSyxFQUFHNEQsRUFBTzVCLEtBQUsyRCxRQUNmLEdBQUkwWixFQUFVLE9BQU8sRUFHaEMsT0FBT0MsR0FBaUIsRUFBSUYsR0FBV0MsRUFBV0EsRUFBV3piLENBQy9ELENBQ0YsRUFLSTZiLEdBQVlqZCxFQUFLLFdBQ2pCa2QsR0FBc0IsU0FBVTFjLEVBQUcyYyxHQUNyQyxJQUNJNWYsRUFEQTRhLEVBQUl2YyxFQUFVNEUsR0FBR2lJLFlBRXJCLFlBQWExTSxJQUFOb2MsR0FBb0RwYyxPQUFoQ3dCLEVBQUkzQixFQUFVdWMsR0FBRzhFLEtBQTJCRSxFQUFJdFksR0FBV3RILEVBQ3hGLEVBR0k2ZixHQUFjcGQsRUFBSyxlQUNuQnFkLEdBQWVsRyxNQUFNblcsVUFDUWpGLE1BQTdCc2hCLEdBQWFELEtBQTJCclosRUFBTXNaLEdBQWNELEdBQWEsQ0FBQyxHQUM5RSxJQUFJRSxHQUFvQixTQUFVaGUsR0FDaEMrZCxHQUFhRCxJQUFhOWQsSUFBTyxDQUNuQyxFQUVJaWUsR0FBWSxTQUFVN1QsRUFBTW5LLEdBQzlCLE1BQU8sQ0FBRUEsTUFBT0EsRUFBT21LLE9BQVFBLEVBQ2pDLEVBRUl3RSxHQUFvQixDQUFDLEVBR3pCbkssRUFBTW1LLEdBQW1CbE8sRUFBSyxhQUFhLFdBQWMsT0FBT3NCLElBQU0sSUFFdEUsSUFBSWtjLEdBQWMsU0FBVS9KLEVBQWFuQixFQUFNaEQsR0FDN0NtRSxFQUFZelMsVUFBWTJhLEdBQWN6TixHQUFtQixDQUFFb0IsS0FBTTVMLEVBQWMsRUFBRzRMLEtBQ2xGbUcsR0FBZ0JoQyxFQUFhbkIsRUFBTyxZQUN0QyxFQUVJbUwsR0FBYXpkLEVBQUssWUFDbEIwZCxLQUFVLEdBQUc1TSxNQUFRLFFBQVUsR0FBR0EsUUFFbEM2TSxHQUFPLE9BQ1BDLEdBQVMsU0FFVEMsR0FBYSxXQUFjLE9BQU92YyxJQUFNLEVBMkR4Q3djLEdBekRjLFNBQVVDLEVBQU16TCxFQUFNbUIsRUFBYW5FLEVBQU0wTyxHQUN6RFIsR0FBWS9KLEVBQWFuQixHQTZEeEIsV0FDRCxJQUFJOVIsRUFBSWMsS0FBSzJjLEdBQ1RDLEVBQU81YyxLQUFLNmMsR0FDWjNnQixFQUFROEQsS0FBSzhjLEtBQ2pCLE9BQUs1ZCxHQUFLaEQsR0FBU2dELEVBQUV0RCxRQUNuQm9FLEtBQUsyYyxRQUFLbGlCLEVBQ0h3aEIsR0FBVSxJQUVRQSxHQUFVLEVBQXpCLFFBQVJXLEVBQW9DMWdCLEVBQzVCLFVBQVIwZ0IsRUFBc0MxZCxFQUFFaEQsR0FDeEIsQ0FBQ0EsRUFBT2dELEVBQUVoRCxJQUNoQyxJQXZFRSxJQWVJNmdCLEVBQVMvZSxFQUFLNE8sRUFmZG9RLEVBQVksU0FBVUosR0FDeEIsSUFBS1IsSUFBU1EsS0FBUS9YLEVBQU8sT0FBT0EsRUFBTStYLEdBQzFDLE9BQVFBLEdBQ04sS0FBS1AsR0FDTCxLQUFLQyxHQUFRLE9BQU8sV0FBb0IsT0FBTyxJQUFJbkssRUFBWW5TLEtBQU00YyxFQUFPLEVBQzVFLE9BQU8sV0FBcUIsT0FBTyxJQUFJekssRUFBWW5TLEtBQU00YyxFQUFPLENBQ3BFLEVBQ0k5ZCxFQUFNa1MsRUFBTyxZQUViaU0sR0FBYSxFQUNicFksRUFBUTRYLEVBQUsvYyxVQUNid2QsRUFBVXJZLEVBQU1zWCxLQUFldFgsRUFuQm5CLGVBbUJ5QzZYLEdBQVc3WCxFQUFNNlgsR0FDdEVTLEVBQVdELEdBQVdGLEVBQVVOLEdBQ2hDVSxFQUFXVixFQUFtQ00sRUFBVSxnQkFBYXZpQixFQUNyRTRpQixFQUErQnhZLEVBQU15WSxTQUFxQkosRUF3QjlELEdBckJJRyxJQUNGelEsRUFBb0I0TixHQUFXNkMsRUFBVy9nQixLQUFLLElBQUltZ0IsT0FDekI5aEIsT0FBTytFLFdBQWFrTixFQUFrQm9CLE9BRTlEbUcsR0FBZ0J2SCxFQUFtQjlOLEdBQUssR0FFSyxtQkFBakM4TixFQUFrQnVQLEtBQTJCMVosRUFBTW1LLEVBQW1CdVAsR0FBWUksS0FJaEZXLEdBQVdBLEVBQVFyZSxPQUFTeWQsS0FDNUNXLEdBQWEsRUFDYkUsRUFBVyxXQUFvQixPQUFPRCxFQUFRNWdCLEtBQUswRCxLQUFPLElBR3REb2MsSUFBU2EsSUFBZXBZLEVBQU1zWCxNQUNsQzFaLEVBQU1vQyxFQUFPc1gsR0FBWWdCLEdBRzNCdkUsR0FBVzVILEdBQVFtTSxFQUNuQnZFLEdBQVc5WixHQUFPeWQsR0FDZEcsRUFNRixRQUxBSyxFQUFVLENBQ1JoUSxPQUFxQm9RLEVBQ3JCM04sS0FBMEJ3TixFQUFVWCxJQUNwQ2lCLFFBQVNGLElBRUMsSUFBS3BmLEtBQU8rZSxFQUNoQi9lLEtBQU82RyxHQUFRL0IsRUFBVStCLEVBQU83RyxFQUFLK2UsRUFBUS9lLFNBQzlDNEcsR0FBUUEsR0FBUTFDLEVBQUkwQyxHQUFRVixHQUFLa1ksSUFBU2EsR0FBYWpNLEVBQU0rTCxHQUV0RSxPQUFPQSxDQUNULENBTXlCUSxDQUFZMUgsTUFBTyxTQUFTLFNBQVUySCxFQUFVWixHQUN2RTVjLEtBQUsyYyxHQUFLakssR0FBVzhLLEdBQ3JCeGQsS0FBSzhjLEdBQUssRUFDVjljLEtBQUs2YyxHQUFLRCxDQUVaLEdBQUcsRUFXQSxVQUdIaEUsR0FBVzZFLFVBQVk3RSxHQUFXL0MsTUFFbENtRyxHQUFrQixRQUNsQkEsR0FBa0IsVUFDbEJBLEdBQWtCLFdBRWxCLElBQUkwQixHQUFhaGYsRUFBSyxZQUNsQmlmLElBQWUsRUFFbkIsSUFDRSxJQUFJQyxHQUFRLENBQUMsR0FBR0YsTUFDaEJFLEdBQWMsT0FBSSxXQUFjRCxJQUFlLENBQU0sRUFFckQ5SCxNQUFNZ0ksS0FBS0QsSUFBTyxXQUFjLE1BQU0sQ0FBRyxHQUMzQyxDQUFFLE1BQU92ZSxHQUFpQixDQUUxQixJQUFJeWUsR0FBYyxTQUFVbmUsRUFBTW9lLEdBQ2hDLElBQUtBLElBQWdCSixHQUFjLE9BQU8sRUFDMUMsSUFBSXZhLEdBQU8sRUFDWCxJQUNFLElBQUk0YSxFQUFNLENBQUMsR0FDUHpPLEVBQU95TyxFQUFJTixNQUNmbk8sRUFBS3ZCLEtBQU8sV0FBYyxNQUFPLENBQUU1RixLQUFNaEYsR0FBTyxFQUFRLEVBQ3hENGEsRUFBSU4sSUFBYyxXQUFjLE9BQU9uTyxDQUFNLEVBQzdDNVAsRUFBS3FlLEVBQ1AsQ0FBRSxNQUFPM2UsR0FBaUIsQ0FDMUIsT0FBTytELENBQ1QsRUFFSTZhLEdBQVl2ZixFQUFLLFdBRWpCd2YsR0FBYyxTQUFVN1csR0FDMUIsSUFBSXdQLEVBQUl0WixFQUFROEosR0FDWmxHLEdBQWdCMFYsSUFBTUEsRUFBRW9ILEtBQVlqYyxFQUFVQyxFQUFFNFUsRUFBR29ILEdBQVcsQ0FDaEUxYixjQUFjLEVBQ2RsQixJQUFLLFdBQWMsT0FBT3JCLElBQU0sR0FFcEMsRUFFSW1lLEdBQW1CLEdBQUdDLFlBQWMsU0FBb0I1WixFQUFrQjJTLEdBQzVFLElBQUlqWSxFQUFJeEUsRUFBVXNGLE1BQ2RxZSxFQUFNbmpCLEVBQVVnRSxFQUFFdEQsUUFDbEIwaUIsRUFBS3pMLEdBQWlCck8sRUFBUTZaLEdBQzlCUixFQUFPaEwsR0FBaUJzRSxFQUFPa0gsR0FDL0J0SyxFQUFNL1UsVUFBVXBELE9BQVMsRUFBSW9ELFVBQVUsUUFBS3ZFLEVBQzVDOGpCLEVBQVExakIsS0FBS0ksVUFBYVIsSUFBUnNaLEVBQW9Cc0ssRUFBTXhMLEdBQWlCa0IsRUFBS3NLLElBQVFSLEVBQU1RLEVBQU1DLEdBQ3RGRSxFQUFNLEVBTVYsSUFMSVgsRUFBT1MsR0FBTUEsRUFBS1QsRUFBT1UsSUFDM0JDLEdBQU8sRUFDUFgsR0FBUVUsRUFBUSxFQUNoQkQsR0FBTUMsRUFBUSxHQUVUQSxLQUFVLEdBQ1hWLEtBQVEzZSxFQUFHQSxFQUFFb2YsR0FBTXBmLEVBQUUyZSxVQUNiM2UsRUFBRW9mLEdBQ2RBLEdBQU1FLEVBQ05YLEdBQVFXLEVBQ1IsT0FBT3RmLENBQ1gsRUFJSXVmLEdBQWEsQ0FDaEJ4YyxFQUhTLENBQUMsRUFBRXdRLHNCQU1UaU0sR0FBTy9qQixPQUFPZ2tCLHlCQVdkQyxHQUFjLENBQ2pCM2MsRUFWU2QsRUFBZXVkLEdBQU8sU0FBa0N4ZixFQUFHZ0QsR0FHbkUsR0FGQWhELEVBQUl3VCxHQUFXeFQsR0FDZmdELEVBQUlOLEVBQWFNLEdBQUcsR0FDaEJQLEVBQWUsSUFDakIsT0FBTytjLEdBQUt4ZixFQUFHZ0QsRUFDakIsQ0FBRSxNQUFPN0MsR0FBaUIsQ0FDMUIsR0FBSXVELEVBQUsxRCxFQUFHZ0QsR0FBSSxPQUFPRSxHQUFlcWMsR0FBV3hjLEVBQUUzRixLQUFLNEMsRUFBR2dELEdBQUloRCxFQUFFZ0QsR0FDbkUsR0FNSTJjLEdBQWN0aUIsR0FBcUIsU0FBVUcsR0FDakQsR0FBSXlFLEVBQWMsQ0FDaEIsSUFDSTNELEVBQVNELEVBQ1R1aEIsRUFBUTVkLEVBQ1IwQyxFQUFVZ0IsR0FDVm1hLEVBQVNoTixHQUNUaU4sRUFBVTFLLEdBQ1YySyxFQUFNemIsR0FDTjBiLEVBQWFoTixHQUNiaU4sRUFBZS9jLEVBQ2ZnZCxFQUFPM2MsRUFDUDRjLEVBQWNyTixHQUNkc04sRUFBWXZrQixFQUNad2tCLEVBQVdya0IsRUFDWHNrQixFQUFVbk4sR0FDVm9OLEVBQWtCNU0sR0FDbEI2TSxFQUFjOWQsRUFDZG9GLEVBQU1wRSxFQUNOK2MsRUFBVTFnQixFQUNWMmdCLEVBQVd4bEIsRUFDWHlsQixFQUFXbmxCLEVBQ1hvbEIsRUFBYy9HLEdBQ2QzUixFQUFTaVQsR0FDVHpVLEVBQWlCNFUsR0FDakJqRyxFQUFPWixHQUFZMVIsRUFDbkI4ZCxFQUFZckYsR0FDWnNGLEVBQU14aEIsRUFDTnloQixFQUFNdmhCLEVBQ053aEIsRUFBb0JqRixHQUNwQmtGLEVBQXNCck4sR0FDdEJzTixFQUFxQnhFLEdBQ3JCeUUsRUFBaUI3RCxHQUNqQjhELEVBQVkxSCxHQUNaMkgsRUFBY3pDLEdBQ2QwQyxFQUFhdEMsR0FDYnVDLEVBQVk1TSxHQUNaNk0sRUFBa0J2QyxHQUNsQndDLEVBQU0zZSxFQUNONGUsRUFBUWhDLEdBQ1I3YyxFQUFLNGUsRUFBSTFlLEVBQ1R5YyxHQUFPa0MsRUFBTTNlLEVBQ2JzUSxHQUFhL1UsRUFBTytVLFdBQ3BCaFksR0FBWWlELEVBQU9qRCxVQUNuQnNtQixHQUFhcmpCLEVBQU9xakIsV0FDcEJyTSxHQUFlLGNBQ2ZzTSxHQUFnQixTQUFXdE0sR0FDM0J1TSxHQUFvQixvQkFDcEJwZCxHQUFZLFlBQ1ptVixHQUFhakQsTUFBTWxTLElBQ25CZ1IsR0FBZXFLLEVBQVFyTixZQUN2QmlELEdBQVlvSyxFQUFRcE4sU0FDcEJvUCxHQUFlZCxFQUFrQixHQUNqQ2UsR0FBY2YsRUFBa0IsR0FDaENnQixHQUFZaEIsRUFBa0IsR0FDOUJpQixHQUFhakIsRUFBa0IsR0FDL0JrQixHQUFZbEIsRUFBa0IsR0FDOUJtQixHQUFpQm5CLEVBQWtCLEdBQ25Db0IsR0FBZ0JuQixHQUFvQixHQUNwQzlNLEdBQWU4TSxHQUFvQixHQUNuQ29CLEdBQWNsQixFQUFldFQsT0FDN0J5VSxHQUFZbkIsRUFBZTdRLEtBQzNCaVMsR0FBZXBCLEVBQWUvQyxRQUM5Qm9FLEdBQW1CNUksR0FBVzZJLFlBQzlCQyxHQUFjOUksR0FBVytJLE9BQ3pCQyxHQUFtQmhKLEdBQVdpSixZQUM5QkMsR0FBWWxKLEdBQVd4VixLQUN2QjJlLEdBQVluSixHQUFXb0osS0FDdkJDLEdBQWFySixHQUFXL2MsTUFDeEJxbUIsR0FBZ0J0SixHQUFXMWMsU0FDM0JpbUIsR0FBc0J2SixHQUFXd0osZUFDakN6SixHQUFXb0gsRUFBSSxZQUNmbmhCLEdBQU1taEIsRUFBSSxlQUNWc0MsR0FBb0J2QyxFQUFJLHFCQUN4QndDLEdBQWtCeEMsRUFBSSxtQkFDdEJ5QyxHQUFtQjFELEVBQU9sTixPQUMxQjZRLEdBQWMzRCxFQUFPdk4sTUFDckJDLEdBQU9zTixFQUFPdE4sS0FDZGtSLEdBQWUsZ0JBRWZDLEdBQU8xQyxFQUFrQixHQUFHLFNBQVVoaEIsRUFBR3RELEdBQzNDLE9BQU9pbkIsR0FBU3pDLEVBQW1CbGhCLEVBQUdBLEVBQUVzakIsS0FBbUI1bUIsRUFDN0QsSUFFSWtuQixHQUFnQmhFLEdBQU0sV0FFeEIsT0FBMEQsSUFBbkQsSUFBSStCLEdBQVcsSUFBSWtDLFlBQVksQ0FBQyxJQUFJbk4sUUFBUSxFQUNyRCxJQUVJb04sS0FBZW5DLE1BQWdCQSxHQUFXbGQsSUFBV3NELEtBQU82WCxHQUFNLFdBQ3BFLElBQUkrQixHQUFXLEdBQUc1WixJQUFJLENBQUMsRUFDekIsSUFFSWdjLEdBQVcsU0FBVTVvQixFQUFJNm9CLEdBQzNCLElBQUlwTCxFQUFTd0gsRUFBVWpsQixHQUN2QixHQUFJeWQsRUFBUyxHQUFLQSxFQUFTb0wsRUFBTyxNQUFNM1EsR0FBVyxpQkFDbkQsT0FBT3VGLENBQ1QsRUFFSXFMLEdBQVcsU0FBVTlvQixHQUN2QixHQUFJdWxCLEVBQVN2bEIsSUFBT3FvQixNQUFlcm9CLEVBQUksT0FBT0EsRUFDOUMsTUFBTUUsR0FBVUYsRUFBSyx5QkFDdkIsRUFFSXdvQixHQUFXLFNBQVVoTSxFQUFHamIsR0FDMUIsSUFBTWdrQixFQUFTL0ksTUFBTTBMLE1BQXFCMUwsR0FDeEMsTUFBTXRjLEdBQVUsd0NBQ2hCLE9BQU8sSUFBSXNjLEVBQUVqYixFQUNqQixFQUVJd25CLEdBQWtCLFNBQVVsa0IsRUFBR21rQixHQUNqQyxPQUFPQyxHQUFTbEQsRUFBbUJsaEIsRUFBR0EsRUFBRXNqQixLQUFtQmEsRUFDN0QsRUFFSUMsR0FBVyxTQUFVek0sRUFBR3dNLEdBSTFCLElBSEEsSUFBSW5uQixFQUFRLEVBQ1JOLEVBQVN5bkIsRUFBS3puQixPQUNka0UsRUFBUytpQixHQUFTaE0sRUFBR2piLEdBQ2xCQSxFQUFTTSxHQUFPNEQsRUFBTzVELEdBQVNtbkIsRUFBS25uQixLQUM1QyxPQUFPNEQsQ0FDVCxFQUVJOFcsR0FBWSxTQUFVdmMsRUFBSTJELEVBQUs4WSxHQUNqQy9VLEVBQUcxSCxFQUFJMkQsRUFBSyxDQUFFcUQsSUFBSyxXQUFjLE9BQU9yQixLQUFLdWpCLEdBQUd6TSxFQUFXLEdBQzdELEVBRUkwTSxHQUFRLFNBQWN4aUIsR0FDeEIsSUFLSXRGLEVBQUdFLEVBQVFtUixFQUFRak4sRUFBUXVSLEVBQU05RyxFQUxqQ3JMLEVBQUkyZ0IsRUFBUzdlLEdBQ2I4UyxFQUFPOVUsVUFBVXBELE9BQ2pCNm5CLEVBQVEzUCxFQUFPLEVBQUk5VSxVQUFVLFFBQUt2RSxFQUNsQ2lwQixPQUFvQmpwQixJQUFWZ3BCLEVBQ1ZFLEVBQVM1RCxFQUFVN2dCLEdBRXZCLEdBQWN6RSxNQUFWa3BCLElBQXdCN0QsRUFBWTZELEdBQVMsQ0FDL0MsSUFBS3BaLEVBQVdvWixFQUFPcm5CLEtBQUs0QyxHQUFJNk4sRUFBUyxHQUFJclIsRUFBSSxJQUFLMlYsRUFBTzlHLEVBQVN5RCxRQUFRNUYsS0FBTTFNLElBQ2xGcVIsRUFBTzdPLEtBQUttVCxFQUFLcFQsT0FDakJpQixFQUFJNk4sQ0FDUixDQUVBLElBREkyVyxHQUFXNVAsRUFBTyxJQUFHMlAsRUFBUXhFLEVBQUl3RSxFQUFPemtCLFVBQVUsR0FBSSxJQUNyRHRELEVBQUksRUFBR0UsRUFBUzJqQixFQUFTcmdCLEVBQUV0RCxRQUFTa0UsRUFBUytpQixHQUFTN2lCLEtBQU1wRSxHQUFTQSxFQUFTRixFQUFHQSxJQUNwRm9FLEVBQU9wRSxHQUFLZ29CLEVBQVVELEVBQU12a0IsRUFBRXhELEdBQUlBLEdBQUt3RCxFQUFFeEQsR0FFM0MsT0FBT29FLENBQ1QsRUFFSThqQixHQUFNLFdBSVIsSUFIQSxJQUFJMW5CLEVBQVEsRUFDUk4sRUFBU29ELFVBQVVwRCxPQUNuQmtFLEVBQVMraUIsR0FBUzdpQixLQUFNcEUsR0FDckJBLEVBQVNNLEdBQU80RCxFQUFPNUQsR0FBUzhDLFVBQVU5QyxLQUNqRCxPQUFPNEQsQ0FDVCxFQUdJK2pCLEtBQWtCaEQsSUFBYy9CLEdBQU0sV0FBY3VELEdBQW9CL2xCLEtBQUssSUFBSXVrQixHQUFXLEdBQUssSUFFakdpRCxHQUFrQixXQUNwQixPQUFPekIsR0FBb0IzZSxNQUFNbWdCLEdBQWdCMUIsR0FBVzdsQixLQUFLNm1CLEdBQVNuakIsT0FBU21qQixHQUFTbmpCLE1BQU9oQixVQUNyRyxFQUVJNkYsR0FBUSxDQUNWdVosV0FBWSxTQUFvQjVaLEVBQVEyUyxHQUN0QyxPQUFPdUosRUFBZ0Jwa0IsS0FBSzZtQixHQUFTbmpCLE1BQU93RSxFQUFRMlMsRUFBT25ZLFVBQVVwRCxPQUFTLEVBQUlvRCxVQUFVLFFBQUt2RSxFQUNuRyxFQUNBc3BCLE1BQU8sU0FBZXJJLEdBQ3BCLE9BQU95RixHQUFXZ0MsR0FBU25qQixNQUFPMGIsRUFBWTFjLFVBQVVwRCxPQUFTLEVBQUlvRCxVQUFVLFFBQUt2RSxFQUN0RixFQUNBdXBCLEtBQU0sU0FBYy9sQixHQUNsQixPQUFPd2lCLEVBQVUvYyxNQUFNeWYsR0FBU25qQixNQUFPaEIsVUFDekMsRUFDQWlsQixPQUFRLFNBQWdCdkksR0FDdEIsT0FBTzBILEdBQWdCcGpCLEtBQU1paEIsR0FBWWtDLEdBQVNuakIsTUFBTzBiLEVBQ3ZEMWMsVUFBVXBELE9BQVMsRUFBSW9ELFVBQVUsUUFBS3ZFLEdBQzFDLEVBQ0F5cEIsS0FBTSxTQUFjQyxHQUNsQixPQUFPL0MsR0FBVStCLEdBQVNuakIsTUFBT21rQixFQUFXbmxCLFVBQVVwRCxPQUFTLEVBQUlvRCxVQUFVLFFBQUt2RSxFQUNwRixFQUNBMnBCLFVBQVcsU0FBbUJELEdBQzVCLE9BQU85QyxHQUFlOEIsR0FBU25qQixNQUFPbWtCLEVBQVdubEIsVUFBVXBELE9BQVMsRUFBSW9ELFVBQVUsUUFBS3ZFLEVBQ3pGLEVBQ0F5UyxRQUFTLFNBQWlCd08sR0FDeEJzRixHQUFhbUMsR0FBU25qQixNQUFPMGIsRUFBWTFjLFVBQVVwRCxPQUFTLEVBQUlvRCxVQUFVLFFBQUt2RSxFQUNqRixFQUNBc00sUUFBUyxTQUFpQnNkLEdBQ3hCLE9BQU9oUixHQUFhOFAsR0FBU25qQixNQUFPcWtCLEVBQWVybEIsVUFBVXBELE9BQVMsRUFBSW9ELFVBQVUsUUFBS3ZFLEVBQzNGLEVBQ0E2cEIsU0FBVSxTQUFrQkQsR0FDMUIsT0FBTy9DLEdBQWM2QixHQUFTbmpCLE1BQU9xa0IsRUFBZXJsQixVQUFVcEQsT0FBUyxFQUFJb0QsVUFBVSxRQUFLdkUsRUFDNUYsRUFDQTZJLEtBQU0sU0FBY2loQixHQUNsQixPQUFPdkMsR0FBVXRlLE1BQU15ZixHQUFTbmpCLE1BQU9oQixVQUN6QyxFQUNBMmlCLFlBQWEsU0FBcUIwQyxHQUNoQyxPQUFPM0MsR0FBaUJoZSxNQUFNeWYsR0FBU25qQixNQUFPaEIsVUFDaEQsRUFDQXdsQixJQUFLLFNBQWFmLEdBQ2hCLE9BQU9iLEdBQUtPLEdBQVNuakIsTUFBT3lqQixFQUFPemtCLFVBQVVwRCxPQUFTLEVBQUlvRCxVQUFVLFFBQUt2RSxFQUMzRSxFQUNBb25CLE9BQVEsU0FBZ0JuRyxHQUN0QixPQUFPa0csR0FBWWxlLE1BQU15ZixHQUFTbmpCLE1BQU9oQixVQUMzQyxFQUNBK2lCLFlBQWEsU0FBcUJyRyxHQUNoQyxPQUFPb0csR0FBaUJwZSxNQUFNeWYsR0FBU25qQixNQUFPaEIsVUFDaEQsRUFDQXlRLFFBQVMsV0FNUCxJQUxBLElBSUl4UixFQUpBN0MsRUFBTzRFLEtBQ1BwRSxFQUFTdW5CLEdBQVMvbkIsR0FBTVEsT0FDeEI2b0IsRUFBUzVwQixLQUFLQyxNQUFNYyxFQUFTLEdBQzdCTSxFQUFRLEVBRUxBLEVBQVF1b0IsR0FDYnhtQixFQUFRN0MsRUFBS2MsR0FDYmQsRUFBS2MsS0FBV2QsSUFBT1EsR0FDdkJSLEVBQUtRLEdBQVVxQyxFQUNmLE9BQU83QyxDQUNYLEVBQ0FzcEIsS0FBTSxTQUFjaEosR0FDbEIsT0FBT3dGLEdBQVVpQyxHQUFTbmpCLE1BQU8wYixFQUFZMWMsVUFBVXBELE9BQVMsRUFBSW9ELFVBQVUsUUFBS3ZFLEVBQ3JGLEVBQ0F5bkIsS0FBTSxTQUFjeUMsR0FDbEIsT0FBTzFDLEdBQVUzbEIsS0FBSzZtQixHQUFTbmpCLE1BQU8ya0IsRUFDeEMsRUFDQUMsU0FBVSxTQUFrQkMsRUFBTzlRLEdBQ2pDLElBQUk3VSxFQUFJaWtCLEdBQVNuakIsTUFDYnBFLEVBQVNzRCxFQUFFdEQsT0FDWGtwQixFQUFTckYsRUFBZ0JvRixFQUFPanBCLEdBQ3BDLE9BQU8sSUFBS3drQixFQUFtQmxoQixFQUFHQSxFQUFFc2pCLEtBQTdCLENBQ0x0akIsRUFBRTBXLE9BQ0YxVyxFQUFFd1ksV0FBYW9OLEVBQVM1bEIsRUFBRTZoQixrQkFDMUJ4QixRQUFrQjlrQixJQUFSc1osRUFBb0JuWSxFQUFTNmpCLEVBQWdCMUwsRUFBS25ZLElBQVdrcEIsR0FFM0UsR0FHRUMsR0FBUyxTQUFlNU4sRUFBT3BELEdBQ2pDLE9BQU9xUCxHQUFnQnBqQixLQUFNbWlCLEdBQVc3bEIsS0FBSzZtQixHQUFTbmpCLE1BQU9tWCxFQUFPcEQsR0FDdEUsRUFFSWlSLEdBQU8sU0FBYUMsR0FDdEI5QixHQUFTbmpCLE1BQ1QsSUFBSThYLEVBQVNtTCxHQUFTamtCLFVBQVUsR0FBSSxHQUNoQ3BELEVBQVNvRSxLQUFLcEUsT0FDZHFXLEVBQU00TixFQUFTb0YsR0FDZjVHLEVBQU1rQixFQUFTdE4sRUFBSXJXLFFBQ25CTSxFQUFRLEVBQ1osR0FBSW1pQixFQUFNdkcsRUFBU2xjLEVBQVEsTUFBTTJXLEdBQVdvUSxJQUM1QyxLQUFPem1CLEVBQVFtaUIsR0FBS3JlLEtBQUs4WCxFQUFTNWIsR0FBUytWLEVBQUkvVixJQUNqRCxFQUVJZ3BCLEdBQWEsQ0FDZjVILFFBQVMsV0FDUCxPQUFPbUUsR0FBYW5sQixLQUFLNm1CLEdBQVNuakIsTUFDcEMsRUFDQXdQLEtBQU0sV0FDSixPQUFPZ1MsR0FBVWxsQixLQUFLNm1CLEdBQVNuakIsTUFDakMsRUFDQStNLE9BQVEsV0FDTixPQUFPd1UsR0FBWWpsQixLQUFLNm1CLEdBQVNuakIsTUFDbkMsR0FHRW1sQixHQUFZLFNBQVUzZ0IsRUFBUXhHLEdBQ2hDLE9BQU80aEIsRUFBU3BiLElBQ1hBLEVBQU9rZSxLQUNPLGlCQUFQMWtCLEdBQ1BBLEtBQU93RyxHQUNQL0ksUUFBUXVDLElBQVF2QyxPQUFPdUMsRUFDOUIsRUFDSW9uQixHQUFXLFNBQWtDNWdCLEVBQVF4RyxHQUN2RCxPQUFPbW5CLEdBQVUzZ0IsRUFBUXhHLEVBQU0waEIsRUFBWTFoQixHQUFLLElBQzVDbWhCLEVBQWEsRUFBRzNhLEVBQU94RyxJQUN2QjBnQixHQUFLbGEsRUFBUXhHLEVBQ25CLEVBQ0lxbkIsR0FBVyxTQUF3QjdnQixFQUFReEcsRUFBS3NuQixHQUNsRCxRQUFJSCxHQUFVM2dCLEVBQVF4RyxFQUFNMGhCLEVBQVkxaEIsR0FBSyxLQUN4QzRoQixFQUFTMEYsSUFDVHRlLEVBQUlzZSxFQUFNLFdBQ1R0ZSxFQUFJc2UsRUFBTSxRQUNWdGUsRUFBSXNlLEVBQU0sUUFFVkEsRUFBSy9pQixjQUNKeUUsRUFBSXNlLEVBQU0sY0FBZUEsRUFBSzlpQixVQUM5QndFLEVBQUlzZSxFQUFNLGdCQUFpQkEsRUFBS2hqQixXQUk5QlAsRUFBR3lDLEVBQVF4RyxFQUFLc25CLElBRnZCOWdCLEVBQU94RyxHQUFPc25CLEVBQUtybkIsTUFDWnVHLEVBRVgsRUFFS2llLEtBQ0g3QixFQUFNM2UsRUFBSW1qQixHQUNWekUsRUFBSTFlLEVBQUlvakIsSUFHVnpoQixFQUFRQSxFQUFRM0gsRUFBSTJILEVBQVFNLEdBQUt1ZSxHQUFrQixTQUFVLENBQzNEOUQseUJBQTBCeUcsR0FDMUJoa0IsZUFBZ0Jpa0IsS0FHZHZHLEdBQU0sV0FBY3NELEdBQWM5bEIsS0FBSyxDQUFDLEVBQUksTUFDOUM4bEIsR0FBZ0JDLEdBQXNCLFdBQ3BDLE9BQU9MLEdBQVUxbEIsS0FBSzBELEtBQ3hCLEdBR0YsSUFBSXVsQixHQUF3QmxHLEVBQVksQ0FBQyxFQUFHeGEsSUFDNUN3YSxFQUFZa0csR0FBdUJMLElBQ25DOUYsRUFBS21HLEdBQXVCMU0sR0FBVXFNLEdBQVduWSxRQUNqRHNTLEVBQVlrRyxHQUF1QixDQUNqQ3hwQixNQUFPZ3BCLEdBQ1A5ZCxJQUFLK2QsR0FDTDdkLFlBQWEsV0FBeUIsRUFDdEMvSyxTQUFVZ21CLEdBQ1ZFLGVBQWdCd0IsS0FFbEJsTixHQUFVMk8sR0FBdUIsU0FBVSxLQUMzQzNPLEdBQVUyTyxHQUF1QixhQUFjLEtBQy9DM08sR0FBVTJPLEdBQXVCLGFBQWMsS0FDL0MzTyxHQUFVMk8sR0FBdUIsU0FBVSxLQUMzQ3hqQixFQUFHd2pCLEdBQXVCem1CLEdBQUssQ0FDN0J1QyxJQUFLLFdBQWMsT0FBT3JCLEtBQUswaUIsR0FBYyxJQUkvQ2htQixFQUFPRSxRQUFVLFNBQVV5SyxFQUFLNmIsRUFBT3NDLEVBQVNDLEdBRTlDLElBQUl6VSxFQUFPM0osSUFEWG9lLElBQVlBLEdBQ2dCLFVBQVksSUFBTSxRQUMxQ0MsRUFBUyxNQUFRcmUsRUFDakJzZSxFQUFTLE1BQVF0ZSxFQUNqQnVlLEVBQWFwb0IsRUFBT3dULEdBQ3BCeUwsRUFBT21KLEdBQWMsQ0FBQyxFQUN0QkMsRUFBTUQsR0FBY2hnQixFQUFlZ2dCLEdBQ25DRSxHQUFVRixJQUFlN0csRUFBT3JOLElBQ2hDeFMsRUFBSSxDQUFDLEVBQ0w2bUIsRUFBc0JILEdBQWNBLEVBQVdqaUIsSUFVL0NxaUIsRUFBYSxTQUFVNXFCLEVBQU1jLEdBQy9CNkYsRUFBRzNHLEVBQU1jLEVBQU8sQ0FDZG1GLElBQUssV0FDSCxPQVpPLFNBQVVqRyxFQUFNYyxHQUMzQixJQUFJK3BCLEVBQU83cUIsRUFBS21vQixHQUNoQixPQUFPMEMsRUFBS0MsRUFBRVIsR0FBUXhwQixFQUFRZ25CLEVBQVErQyxFQUFLdmdCLEVBQUdvZCxHQUNoRCxDQVNhcUQsQ0FBT25tQixLQUFNOUQsRUFDdEIsRUFDQStLLElBQUssU0FBVWhKLEdBQ2IsT0FYTyxTQUFVN0MsRUFBTWMsRUFBTytCLEdBQ2xDLElBQUlnb0IsRUFBTzdxQixFQUFLbW9CLEdBQ1prQyxJQUFTeG5CLEdBQVNBLEVBQVFwRCxLQUFLdXJCLE1BQU1ub0IsSUFBVSxFQUFJLEVBQUlBLEVBQVEsSUFBTyxJQUFlLElBQVJBLEdBQ2pGZ29CLEVBQUtDLEVBQUVQLEdBQVF6cEIsRUFBUWduQixFQUFRK0MsRUFBS3ZnQixFQUFHekgsRUFBTzZrQixHQUNoRCxDQU9hdUQsQ0FBT3JtQixLQUFNOUQsRUFBTytCLEVBQzdCLEVBQ0FxRSxZQUFZLEdBRWhCLEVBQ0l3akIsR0FDRkYsRUFBYUosR0FBUSxTQUFVcHFCLEVBQU02cUIsRUFBTUssRUFBU0MsR0FDbERySCxFQUFXOWpCLEVBQU13cUIsRUFBWTVVLEVBQU0sTUFDbkMsSUFFSTRFLEVBQVFnQyxFQUFZaGMsRUFBUTRxQixFQUY1QnRxQixFQUFRLEVBQ1I0YixFQUFTLEVBRWIsR0FBSzhILEVBQVNxRyxHQUlQLE1BQUlBLGFBQWdCdFIsS0FBaUI2UixFQUFRN0csRUFBUXNHLEtBQVV6UixJQUFnQmdTLEdBQVMxRixJQWF4RixPQUFJNEIsTUFBZXVELEVBQ2pCM0MsR0FBU3NDLEVBQVlLLEdBRXJCekMsR0FBTWxuQixLQUFLc3BCLEVBQVlLLEdBZjlCclEsRUFBU3FRLEVBQ1RuTyxFQUFTbUwsR0FBU3FELEVBQVNwRCxHQUMzQixJQUFJdUQsRUFBT1IsRUFBS3JPLFdBQ2hCLFFBQWdCbmQsSUFBWjhyQixFQUF1QixDQUN6QixHQUFJRSxFQUFPdkQsRUFBTyxNQUFNM1EsR0FBV29RLElBRW5DLElBREEvSyxFQUFhNk8sRUFBTzNPLEdBQ0gsRUFBRyxNQUFNdkYsR0FBV29RLEdBQ3ZDLE1BRUUsSUFEQS9LLEVBQWEySCxFQUFTZ0gsR0FBV3JELEdBQ2hCcEwsRUFBUzJPLEVBQU0sTUFBTWxVLEdBQVdvUSxJQUVuRC9tQixFQUFTZ2MsRUFBYXNMLENBS3hCLE1BcEJFdG5CLEVBQVM0akIsRUFBUXlHLEdBRWpCclEsRUFBUyxJQUFJakIsR0FEYmlELEVBQWFoYyxFQUFTc25CLEdBMkJ4QixJQVBBOUQsRUFBS2hrQixFQUFNLEtBQU0sQ0FDZkcsRUFBR3FhLEVBQ0hsUSxFQUFHb1MsRUFDSG5jLEVBQUdpYyxFQUNIdlksRUFBR3pELEVBQ0hzcUIsRUFBRyxJQUFJdFIsR0FBVWdCLEtBRVoxWixFQUFRTixHQUFRb3FCLEVBQVc1cUIsRUFBTWMsSUFDMUMsSUFDQTZwQixFQUFzQkgsRUFBV2ppQixJQUFheUQsRUFBT21lLElBQ3JEbkcsRUFBSzJHLEVBQXFCLGNBQWVILElBQy9COUcsR0FBTSxXQUNoQjhHLEVBQVcsRUFDYixLQUFPOUcsR0FBTSxXQUNYLElBQUk4RyxHQUFZLEVBQ2xCLEtBQU9yRixHQUFZLFNBQVVoUixHQUMzQixJQUFJcVcsRUFDSixJQUFJQSxFQUFXLE1BQ2YsSUFBSUEsRUFBVyxLQUNmLElBQUlBLEVBQVdyVyxFQUNqQixJQUFHLEtBQ0RxVyxFQUFhSixHQUFRLFNBQVVwcUIsRUFBTTZxQixFQUFNSyxFQUFTQyxHQUVsRCxJQUFJQyxFQUdKLE9BSkF0SCxFQUFXOWpCLEVBQU13cUIsRUFBWTVVLEdBSXhCNE8sRUFBU3FHLEdBQ1ZBLGFBQWdCdFIsS0FBaUI2UixFQUFRN0csRUFBUXNHLEtBQVV6UixJQUFnQmdTLEdBQVMxRixRQUNuRXJtQixJQUFaOHJCLEVBQ0gsSUFBSTlKLEVBQUt3SixFQUFNaEQsR0FBU3FELEVBQVNwRCxHQUFRcUQsUUFDN0I5ckIsSUFBWjZyQixFQUNFLElBQUk3SixFQUFLd0osRUFBTWhELEdBQVNxRCxFQUFTcEQsSUFDakMsSUFBSXpHLEVBQUt3SixHQUVidkQsTUFBZXVELEVBQWEzQyxHQUFTc0MsRUFBWUssR0FDOUN6QyxHQUFNbG5CLEtBQUtzcEIsRUFBWUssR0FURixJQUFJeEosRUFBSytDLEVBQVF5RyxHQVUvQyxJQUNBakYsR0FBYTZFLElBQVFsb0IsU0FBUytCLFVBQVk2VSxFQUFLa0ksR0FBTWhlLE9BQU84VixFQUFLc1IsSUFBUXRSLEVBQUtrSSxJQUFPLFNBQVV6ZSxHQUN2RkEsS0FBTzRuQixHQUFheEcsRUFBS3dHLEVBQVk1bkIsRUFBS3llLEVBQUt6ZSxHQUN2RCxJQUNBNG5CLEVBQVdqaUIsSUFBYW9pQixFQUNWQSxFQUFvQjVlLFlBQWN5ZSxHQUVsRCxJQUFJYyxFQUFrQlgsRUFBb0JsTixJQUN0QzhOLElBQXNCRCxJQUNJLFVBQXhCQSxFQUFnQjduQixNQUE0Q3BFLE1BQXhCaXNCLEVBQWdCN25CLE1BQ3REK25CLEVBQVkxQixHQUFXblksT0FDM0JxUyxFQUFLd0csRUFBWXJELElBQW1CLEdBQ3BDbkQsRUFBSzJHLEVBQXFCckQsR0FBYTFSLEdBQ3ZDb08sRUFBSzJHLEVBQXFCdFUsSUFBTSxHQUNoQzJOLEVBQUsyRyxFQUFxQnZELEdBQWlCb0QsSUFFdkNILEVBQVUsSUFBSUcsRUFBVyxHQUFHOW1CLEtBQVFrUyxFQUFTbFMsTUFBT2luQixJQUN0RGhrQixFQUFHZ2tCLEVBQXFCam5CLEdBQUssQ0FDM0J1QyxJQUFLLFdBQWMsT0FBTzJQLENBQU0sSUFJcEM5UixFQUFFOFIsR0FBUTRVLEVBRVZoaUIsRUFBUUEsRUFBUVEsRUFBSVIsRUFBUWUsRUFBSWYsRUFBUU0sR0FBSzBoQixHQUFjbkosR0FBT3ZkLEdBRWxFMEUsRUFBUUEsRUFBUTNILEVBQUcrVSxFQUFNLENBQ3ZCK1Asa0JBQW1CbUMsSUFHckJ0ZixFQUFRQSxFQUFRM0gsRUFBSTJILEVBQVFNLEVBQUk0YSxHQUFNLFdBQWNyQyxFQUFLb0ssR0FBR3ZxQixLQUFLc3BCLEVBQVksRUFBSSxJQUFJNVUsRUFBTSxDQUN6RjZNLEtBQU0yRixHQUNOcUQsR0FBSWpELEtBR0E3QyxNQUFxQmdGLEdBQXNCM0csRUFBSzJHLEVBQXFCaEYsR0FBbUJtQyxHQUU5RnRmLEVBQVFBLEVBQVExQixFQUFHOE8sRUFBTW5NLElBRXpCMmIsRUFBV3hQLEdBRVhwTixFQUFRQSxFQUFRMUIsRUFBSTBCLEVBQVFNLEVBQUk4ZSxHQUFZaFMsRUFBTSxDQUFFL0osSUFBSytkLEtBRXpEcGhCLEVBQVFBLEVBQVExQixFQUFJMEIsRUFBUU0sR0FBS3lpQixFQUFtQjNWLEVBQU1rVSxJQUUxQ2EsRUFBb0IzcEIsVUFBWWdtQixLQUFlMkQsRUFBb0IzcEIsU0FBV2dtQixJQUU5RnhlLEVBQVFBLEVBQVExQixFQUFJMEIsRUFBUU0sRUFBSTRhLEdBQU0sV0FDcEMsSUFBSThHLEVBQVcsR0FBRzdwQixPQUNwQixJQUFJaVYsRUFBTSxDQUFFalYsTUFBT2dwQixLQUVuQm5oQixFQUFRQSxFQUFRMUIsRUFBSTBCLEVBQVFNLEdBQUs0YSxHQUFNLFdBQ3JDLE1BQU8sQ0FBQyxFQUFHLEdBQUd3RCxrQkFBb0IsSUFBSXNELEVBQVcsQ0FBQyxFQUFHLElBQUl0RCxnQkFDM0QsTUFBT3hELEdBQU0sV0FDWGlILEVBQW9CekQsZUFBZWhtQixLQUFLLENBQUMsRUFBRyxHQUM5QyxLQUFLMFUsRUFBTSxDQUFFc1IsZUFBZ0J3QixLQUU3QnhELEVBQVV0UCxHQUFRMlYsRUFBb0JELEVBQWtCRSxFQUN2Q0QsR0FBbUJ2SCxFQUFLMkcsRUFBcUJsTixHQUFVK04sRUFDMUUsQ0FDRixNQUFPbHFCLEVBQU9FLFFBQVUsV0FBMEIsQ0FDbEQsSUFFQWlpQixHQUFZLFFBQVMsR0FBRyxTQUFVaUksR0FDaEMsT0FBTyxTQUFvQmIsRUFBTXZPLEVBQVk5YixHQUMzQyxPQUFPa3JCLEVBQUs5bUIsS0FBTWltQixFQUFNdk8sRUFBWTliLEVBQ3RDLENBQ0YsSUFJQSxJQTBESW1yQixHQUFPQyxHQUFTQyxHQTFEaEJDLEdBQVksU0FBVTNjLEVBQVUvTixFQUFJeUIsRUFBT3FmLEdBQzdDLElBQ0UsT0FBT0EsRUFBVTlnQixFQUFHbEMsRUFBVTJELEdBQU8sR0FBSUEsRUFBTSxJQUFNekIsRUFBR3lCLEVBRTFELENBQUUsTUFBT29CLEdBQ1AsSUFBSThuQixFQUFNNWMsRUFBaUIsT0FFM0IsV0FEWTlQLElBQVIwc0IsR0FBbUI3c0IsRUFBVTZzQixFQUFJN3FCLEtBQUtpTyxJQUNwQ2xMLENBQ1IsQ0FDRixFQUVJK25CLEdBQVM3cUIsR0FBcUIsU0FBVUcsR0FDNUMsSUFBSTJxQixFQUFRLENBQUMsRUFDVEMsRUFBUyxDQUFDLEVBQ1YxcUIsRUFBVUYsRUFBT0UsUUFBVSxTQUFVaVMsRUFBVXlPLEVBQVM5Z0IsRUFBSXBCLEVBQU15ZCxHQUNwRSxJQUdJamQsRUFBUXlWLEVBQU05RyxFQUFVekssRUFIeEI2akIsRUFBUzlLLEVBQVcsV0FBYyxPQUFPaEssQ0FBVSxFQUFJNkwsR0FBdUI3TCxHQUM5RTVNLEVBQUl1QixHQUFLaEgsRUFBSXBCLEVBQU1raUIsRUFBVSxFQUFJLEdBQ2pDcGhCLEVBQVEsRUFFWixHQUFxQixtQkFBVnluQixFQUFzQixNQUFNcHBCLFVBQVVzVSxFQUFXLHFCQUU1RCxHQUFJa0ssR0FBYTRLLElBQVMsSUFBSy9uQixFQUFTVixFQUFVMlQsRUFBU2pULFFBQVNBLEVBQVNNLEVBQU9BLElBRWxGLElBREE0RCxFQUFTd2QsRUFBVXJiLEVBQUUzSCxFQUFVK1csRUFBT3hDLEVBQVMzUyxJQUFRLEdBQUltVixFQUFLLElBQU1wUCxFQUFFNE0sRUFBUzNTLE9BQ2xFbXJCLEdBQVN2bkIsSUFBV3duQixFQUFRLE9BQU94bkIsT0FDN0MsSUFBS3lLLEVBQVdvWixFQUFPcm5CLEtBQUt1UyxLQUFhd0MsRUFBTzlHLEVBQVN5RCxRQUFRNUYsTUFFdEUsSUFEQXRJLEVBQVNvbkIsR0FBVTNjLEVBQVV0SSxFQUFHb1AsRUFBS3BULE1BQU9xZixNQUM3QitKLEdBQVN2bkIsSUFBV3duQixFQUFRLE9BQU94bkIsQ0FFdEQsRUFDQWxELEVBQVF5cUIsTUFBUUEsRUFDaEJ6cUIsRUFBUTBxQixPQUFTQSxDQUNqQixJQW1CSUMsR0FBVWhxQixFQUFRZ3FCLFFBQ2xCQyxHQUFVanFCLEVBQVFrcUIsYUFDbEJDLEdBQVlucUIsRUFBUW9xQixlQUNwQkMsR0FBaUJycUIsRUFBUXFxQixlQUN6QkMsR0FBV3RxQixFQUFRc3FCLFNBQ25CQyxHQUFVLEVBQ1ZDLEdBQVEsQ0FBQyxFQUNUQyxHQUFxQixxQkFFckJDLEdBQU0sV0FDUixJQUFJNXBCLEdBQU0yQixLQUVWLEdBQUkrbkIsR0FBTXBsQixlQUFldEUsR0FBSyxDQUM1QixJQUFJN0IsRUFBS3VyQixHQUFNMXBCLFVBQ1IwcEIsR0FBTTFwQixHQUNiN0IsR0FDRixDQUNGLEVBQ0kwckIsR0FBVyxTQUFVQyxHQUN2QkYsR0FBSTNyQixLQUFLNnJCLEVBQU1sQyxLQUNqQixFQUVLdUIsSUFBWUUsS0FDZkYsR0FBVSxTQUFzQmhyQixHQUc5QixJQUZBLElBQUlnSyxFQUFPLEdBQ1A5SyxFQUFJLEVBQ0RzRCxVQUFVcEQsT0FBU0YsR0FBRzhLLEVBQUt0SSxLQUFLYyxVQUFVdEQsTUFNakQsT0FMQXFzQixLQUFRRCxJQUFXLFlBM0NULFNBQVV0ckIsRUFBSWdLLEVBQU1wTCxHQUVoQyxPQUFRb0wsRUFBSzVLLFFBQ1gsS0FBSyxFQUFHLE9BQVlZLElBRXBCLEtBQUssRUFBRyxPQUFZQSxFQUFHZ0ssRUFBSyxJQUU1QixLQUFLLEVBQUcsT0FBWWhLLEVBQUdnSyxFQUFLLEdBQUlBLEVBQUssSUFFckMsS0FBSyxFQUFHLE9BQVloSyxFQUFHZ0ssRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssSUFFOUMsS0FBSyxFQUFHLE9BQVloSyxFQUFHZ0ssRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxJQUVoRGhLLEVBQUdrSCxNQUFNdEksRUFBTW9MLEVBQzFCLENBK0JNK0UsQ0FBcUIsbUJBQU4vTyxFQUFtQkEsRUFBS21CLFNBQVNuQixHQUFLZ0ssRUFDdkQsRUFDQXVnQixHQUFNZSxJQUNDQSxFQUNULEVBQ0FKLEdBQVksU0FBd0JycEIsVUFDM0IwcEIsR0FBTTFwQixFQUNmLEVBRXFCLFdBQWpCaEMsRUFBS2tyQixJQUNQUixHQUFRLFNBQVUxb0IsR0FDaEJrcEIsR0FBUWEsU0FBUzVrQixHQUFLeWtCLEdBQUs1cEIsRUFBSSxHQUNqQyxFQUVTd3BCLElBQVlBLEdBQVNRLElBQzlCdEIsR0FBUSxTQUFVMW9CLEdBQ2hCd3BCLEdBQVNRLElBQUk3a0IsR0FBS3lrQixHQUFLNXBCLEVBQUksR0FDN0IsRUFFU3VwQixJQUVUWCxJQURBRCxHQUFVLElBQUlZLElBQ0NVLE1BQ2Z0QixHQUFRdUIsTUFBTUMsVUFBWU4sR0FDMUJuQixHQUFRdmpCLEdBQUt5akIsR0FBS3dCLFlBQWF4QixHQUFNLElBRzVCMXBCLEVBQVFtckIsa0JBQTBDLG1CQUFmRCxjQUE4QmxyQixFQUFRb3JCLGVBQ2xGNUIsR0FBUSxTQUFVMW9CLEdBQ2hCZCxFQUFRa3JCLFlBQVlwcUIsRUFBSyxHQUFJLElBQy9CLEVBQ0FkLEVBQVFtckIsaUJBQWlCLFVBQVdSLElBQVUsSUFHOUNuQixHQURTaUIsTUFBc0J0bUIsRUFBVyxVQUNsQyxTQUFVckQsR0FDaEJnYixHQUFNVSxZQUFZclksRUFBVyxXQUFXc21CLElBQXNCLFdBQzVEM08sR0FBTXVQLFlBQVk1b0IsTUFDbEJpb0IsR0FBSTNyQixLQUFLK0IsRUFDWCxDQUNGLEVBR1EsU0FBVUEsR0FDaEJ3cUIsV0FBV3JsQixHQUFLeWtCLEdBQUs1cEIsRUFBSSxHQUFJLEVBQy9CLEdBR0osSUFBSXlxQixHQUFRLENBQ1Y3aEIsSUFBS3VnQixHQUNMdUIsTUFBT3JCLElBR0xzQixHQUFZRixHQUFNN2hCLElBQ2xCZ2lCLEdBQVcxckIsRUFBUTJyQixrQkFBb0IzckIsRUFBUTRyQix1QkFDL0NDLEdBQVk3ckIsRUFBUWdxQixRQUNwQjhCLEdBQVk5ckIsRUFBUStSLFFBQ3BCZ2EsR0FBNEIsV0FBbkJqdEIsRUFBSytzQixJQW9FbEIsU0FBU0csR0FBa0IxUyxHQUN6QixJQUFJdkosRUFBU0MsRUFDYnZOLEtBQUt3cEIsUUFBVSxJQUFJM1MsR0FBRSxTQUFVNFMsRUFBV0MsR0FDeEMsUUFBZ0JqdkIsSUFBWjZTLFFBQW9DN1MsSUFBWDhTLEVBQXNCLE1BQU1oVCxVQUFVLDJCQUNuRStTLEVBQVVtYyxFQUNWbGMsRUFBU21jLENBQ1gsSUFDQTFwQixLQUFLc04sUUFBVS9KLEdBQVcrSixHQUMxQnROLEtBQUt1TixPQUFTaEssR0FBV2dLLEVBQzNCLENBRUEsSUEyQ0lvYyxHQUFVQyxHQUE2QkMsR0FBc0IzaUIsR0F2QzdENGlCLEdBQXdCLENBQzNCN25CLEVBTFMsU0FBVTRVLEdBQ2xCLE9BQU8sSUFBSTBTLEdBQWtCMVMsRUFDL0IsR0FNSWtULEdBQVcsU0FBVXBxQixHQUN2QixJQUNFLE1BQU8sQ0FBRU4sR0FBRyxFQUFPNm1CLEVBQUd2bUIsSUFDeEIsQ0FBRSxNQUFPTixHQUNQLE1BQU8sQ0FBRUEsR0FBRyxFQUFNNm1CLEVBQUc3bUIsRUFDdkIsQ0FDRixFQUVJMnFCLEdBQVl6c0IsRUFBUXlzQixVQUVwQkMsR0FBYUQsSUFBYUEsR0FBVUUsV0FBYSxHQVdqREMsR0FBT3JCLEdBQU03aEIsSUFDYm1qQixHQTNHYSxXQUNmLElBQUlDLEVBQU1DLEVBQU1DLEVBRVpDLEVBQVEsV0FDVixJQUFJQyxFQUFRanVCLEVBRVosSUFESThzQixLQUFXbUIsRUFBU3JCLEdBQVVzQixTQUFTRCxFQUFPRSxPQUMzQ04sR0FBTSxDQUNYN3RCLEVBQUs2dEIsRUFBSzd0QixHQUNWNnRCLEVBQU9BLEVBQUtyYyxLQUNaLElBQ0V4UixHQUNGLENBQUUsTUFBTzZDLEdBR1AsTUFGSWdyQixFQUFNRSxJQUNMRCxPQUFPN3ZCLEVBQ040RSxDQUNSLENBQ0YsQ0FBRWlyQixPQUFPN3ZCLEVBQ0xnd0IsR0FBUUEsRUFBT0csT0FDckIsRUFHQSxHQUFJdEIsR0FDRmlCLEVBQVMsV0FDUG5CLEdBQVVoQixTQUFTb0MsRUFDckIsT0FFSyxJQUFJdkIsSUFBYzFyQixFQUFReXNCLFdBQWF6c0IsRUFBUXlzQixVQUFVYSxXQVF6RCxHQUFJeEIsSUFBYUEsR0FBVS9iLFFBQVMsQ0FFekMsSUFBSWtjLEVBQVVILEdBQVUvYixhQUFRN1MsR0FDaEM4dkIsRUFBUyxXQUNQZixFQUFRL2IsS0FBSytjLEVBQ2YsQ0FPRixNQUNFRCxFQUFTLFdBRVB2QixHQUFVMXNCLEtBQUtpQixFQUFTaXRCLEVBQzFCLE1BeEIyRSxDQUMzRSxJQUFJTSxHQUFTLEVBQ1RDLEVBQU94cEIsU0FBU3lwQixlQUFlLElBQ25DLElBQUkvQixHQUFTdUIsR0FBT1MsUUFBUUYsRUFBTSxDQUFFRyxlQUFlLElBQ25EWCxFQUFTLFdBQ1BRLEVBQUs5RSxLQUFPNkUsR0FBVUEsQ0FDeEIsQ0FFRixDQW1CQSxPQUFPLFNBQVV0dUIsR0FDZixJQUFJMnRCLEVBQU8sQ0FBRTN0QixHQUFJQSxFQUFJd1IsVUFBTXZULEdBQ3ZCNnZCLElBQU1BLEVBQUt0YyxLQUFPbWMsR0FDakJFLElBQ0hBLEVBQU9GLEVBQ1BJLEtBQ0FELEVBQU9ILENBQ1gsQ0FDRixDQThDZ0JnQixHQUtaQyxHQUFVLFVBQ1ZDLEdBQWM5dEIsRUFBUWhELFVBQ3RCK3dCLEdBQVkvdEIsRUFBUWdxQixRQUNwQmdFLEdBQVdELElBQWFBLEdBQVVDLFNBQ2xDQyxHQUFLRCxJQUFZQSxHQUFTQyxJQUFNLEdBQ2hDQyxHQUFXbHVCLEVBQVE2dEIsSUFDbkJNLEdBQWtDLFdBQXZCenNCLEVBQVNxc0IsSUFDcEJLLEdBQVEsV0FBMEIsRUFFbENDLEdBQXVCaEMsR0FBOEJFLEdBQXNCN25CLEVBRTNFNHBCLEtBQWUsV0FDakIsSUFFRSxJQUFJckMsRUFBVWlDLEdBQVNuZSxRQUFRLEdBQzNCd2UsR0FBZXRDLEVBQVFyaUIsWUFBYyxDQUFDLEdBQUd6SSxFQUFLLFlBQWMsU0FBVWlCLEdBQ3hFQSxFQUFLZ3NCLEdBQU9BLEdBQ2QsRUFFQSxPQUFRRCxJQUE0QyxtQkFBekJLLHdCQUN0QnZDLEVBQVEvYixLQUFLa2UsY0FBa0JHLEdBSVQsSUFBdEJOLEdBQUd6a0IsUUFBUSxTQUMwQixJQUFyQ2tqQixHQUFXbGpCLFFBQVEsWUFDMUIsQ0FBRSxNQUFPMUgsR0FBaUIsQ0FDNUIsQ0FoQm1CLEdBbUJmMnNCLEdBQWEsU0FBVTN4QixHQUN6QixJQUFJb1QsRUFDSixTQUFPclQsRUFBVUMsSUFBa0MsbUJBQW5Cb1QsRUFBT3BULEVBQUdvVCxRQUFzQkEsQ0FDbEUsRUFDSThjLEdBQVMsU0FBVWYsRUFBU3lDLEdBQzlCLElBQUl6QyxFQUFRMEMsR0FBWixDQUNBMUMsRUFBUTBDLElBQUssRUFDYixJQUFJQyxFQUFRM0MsRUFBUTRDLEdBQ3BCaEMsSUFBVSxXQW9DUixJQW5DQSxJQUFJbnNCLEVBQVF1ckIsRUFBUTZDLEdBQ2hCQyxFQUFtQixHQUFkOUMsRUFBUStDLEdBQ2I3d0IsRUFBSSxFQUNKdXNCLEVBQU0sU0FBVXVFLEdBQ2xCLElBSUkxc0IsRUFBUTJOLEVBQU1nZixFQUpkQyxFQUFVSixFQUFLRSxFQUFTRixHQUFLRSxFQUFTRyxLQUN0Q3JmLEVBQVVrZixFQUFTbGYsUUFDbkJDLEVBQVNpZixFQUFTamYsT0FDbEJtZCxFQUFTOEIsRUFBUzlCLE9BRXRCLElBQ01nQyxHQUNHSixJQUNlLEdBQWQ5QyxFQUFRb0QsSUFBU0MsR0FBa0JyRCxHQUN2Q0EsRUFBUW9ELEdBQUssSUFFQyxJQUFaRixFQUFrQjVzQixFQUFTN0IsR0FFekJ5c0IsR0FBUUEsRUFBT0UsUUFDbkI5cUIsRUFBUzRzQixFQUFRenVCLEdBQ2J5c0IsSUFDRkEsRUFBT0MsT0FDUDhCLEdBQVMsSUFHVDNzQixJQUFXMHNCLEVBQVNoRCxRQUN0QmpjLEVBQU84ZCxHQUFZLHlCQUNWNWQsRUFBT3VlLEdBQVdsc0IsSUFDM0IyTixFQUFLblIsS0FBS3dELEVBQVF3TixFQUFTQyxHQUN0QkQsRUFBUXhOLElBQ1Z5TixFQUFPdFAsRUFDaEIsQ0FBRSxNQUFPb0IsR0FDSHFyQixJQUFXK0IsR0FBUS9CLEVBQU9DLE9BQzlCcGQsRUFBT2xPLEVBQ1QsQ0FDRixFQUNPOHNCLEVBQU12d0IsT0FBU0YsR0FBR3VzQixFQUFJa0UsRUFBTXp3QixNQUNuQzh0QixFQUFRNEMsR0FBSyxHQUNiNUMsRUFBUTBDLElBQUssRUFDVEQsSUFBYXpDLEVBQVFvRCxJQUFJRSxHQUFZdEQsRUFDM0MsR0EzQ3NCLENBNEN4QixFQUNJc0QsR0FBYyxTQUFVdEQsR0FDMUJXLEdBQUs3dEIsS0FBS2lCLEdBQVMsV0FDakIsSUFFSXVDLEVBQVE0c0IsRUFBU0ssRUFGakI5dUIsRUFBUXVyQixFQUFRNkMsR0FDaEJXLEVBQVlDLEdBQVl6RCxHQWU1QixHQWJJd0QsSUFDRmx0QixFQUFTaXFCLElBQVMsV0FDWjJCLEdBQ0ZKLEdBQVU0QixLQUFLLHFCQUFzQmp2QixFQUFPdXJCLElBQ25Da0QsRUFBVW52QixFQUFRNHZCLHNCQUMzQlQsRUFBUSxDQUFFbEQsUUFBU0EsRUFBUzRELE9BQVFudkIsS0FDMUI4dUIsRUFBVXh2QixFQUFRd3ZCLFVBQVlBLEVBQVFwZixPQUNoRG9mLEVBQVFwZixNQUFNLDhCQUErQjFQLEVBRWpELElBRUF1ckIsRUFBUW9ELEdBQUtsQixJQUFZdUIsR0FBWXpELEdBQVcsRUFBSSxHQUNwREEsRUFBUTZELFFBQUs1eUIsRUFDWHV5QixHQUFhbHRCLEVBQU9ULEVBQUcsTUFBTVMsRUFBT29tQixDQUMxQyxHQUNGLEVBQ0krRyxHQUFjLFNBQVV6RCxHQUMxQixPQUFzQixJQUFmQSxFQUFRb0QsSUFBa0QsS0FBckNwRCxFQUFRNkQsSUFBTTdELEVBQVE0QyxJQUFJeHdCLE1BQ3hELEVBQ0lpeEIsR0FBb0IsU0FBVXJELEdBQ2hDVyxHQUFLN3RCLEtBQUtpQixHQUFTLFdBQ2pCLElBQUltdkIsRUFDQWhCLEdBQ0ZKLEdBQVU0QixLQUFLLG1CQUFvQjFELElBQzFCa0QsRUFBVW52QixFQUFRK3ZCLHFCQUMzQlosRUFBUSxDQUFFbEQsUUFBU0EsRUFBUzRELE9BQVE1RCxFQUFRNkMsSUFFaEQsR0FDRixFQUNJa0IsR0FBVSxTQUFVdHZCLEdBQ3RCLElBQUl1ckIsRUFBVXhwQixLQUNWd3BCLEVBQVFqRyxLQUNaaUcsRUFBUWpHLElBQUssR0FDYmlHLEVBQVVBLEVBQVFnRSxJQUFNaEUsR0FDaEI2QyxHQUFLcHVCLEVBQ2J1ckIsRUFBUStDLEdBQUssRUFDUi9DLEVBQVE2RCxLQUFJN0QsRUFBUTZELEdBQUs3RCxFQUFRNEMsR0FBR3J3QixTQUN6Q3d1QixHQUFPZixHQUFTLEdBQ2xCLEVBQ0lpRSxHQUFXLFNBQVV4dkIsR0FDdkIsSUFDSXdQLEVBREErYixFQUFVeHBCLEtBRWQsSUFBSXdwQixFQUFRakcsR0FBWixDQUNBaUcsRUFBUWpHLElBQUssRUFDYmlHLEVBQVVBLEVBQVFnRSxJQUFNaEUsRUFDeEIsSUFDRSxHQUFJQSxJQUFZdnJCLEVBQU8sTUFBTW90QixHQUFZLHFDQUNyQzVkLEVBQU91ZSxHQUFXL3RCLElBQ3BCbXNCLElBQVUsV0FDUixJQUFJNUUsRUFBVSxDQUFFZ0ksR0FBSWhFLEVBQVNqRyxJQUFJLEdBQ2pDLElBQ0U5VixFQUFLblIsS0FBSzJCLEVBQU91RixHQUFLaXFCLEdBQVVqSSxFQUFTLEdBQUloaUIsR0FBSytwQixHQUFTL0gsRUFBUyxHQUN0RSxDQUFFLE1BQU9ubUIsR0FDUGt1QixHQUFRanhCLEtBQUtrcEIsRUFBU25tQixFQUN4QixDQUNGLEtBRUFtcUIsRUFBUTZDLEdBQUtwdUIsRUFDYnVyQixFQUFRK0MsR0FBSyxFQUNiaEMsR0FBT2YsR0FBUyxHQUVwQixDQUFFLE1BQU9ucUIsR0FDUGt1QixHQUFRanhCLEtBQUssQ0FBRWt4QixHQUFJaEUsRUFBU2pHLElBQUksR0FBU2xrQixFQUMzQyxDQXJCc0IsQ0FzQnhCLEVBR0t3c0IsS0FFSEosR0FBVyxTQUFpQmlDLEdBQzFCeGIsR0FBWWxTLEtBQU15ckIsR0FBVUwsR0FBUyxNQUNyQzduQixHQUFXbXFCLEdBQ1gvRCxHQUFTcnRCLEtBQUswRCxNQUNkLElBQ0UwdEIsRUFBU2xxQixHQUFLaXFCLEdBQVV6dEIsS0FBTSxHQUFJd0QsR0FBSytwQixHQUFTdnRCLEtBQU0sR0FDeEQsQ0FBRSxNQUFPNkssR0FDUDBpQixHQUFRanhCLEtBQUswRCxLQUFNNkssRUFDckIsQ0FDRixHQUVBOGUsR0FBVyxTQUFpQitELEdBQzFCMXRCLEtBQUtvc0IsR0FBSyxHQUNWcHNCLEtBQUtxdEIsUUFBSzV5QixFQUNWdUYsS0FBS3VzQixHQUFLLEVBQ1Z2c0IsS0FBS3VqQixJQUFLLEVBQ1Z2akIsS0FBS3FzQixRQUFLNXhCLEVBQ1Z1RixLQUFLNHNCLEdBQUssRUFDVjVzQixLQUFLa3NCLElBQUssQ0FDWixHQUNTeHNCLFVBQVlzUyxHQUFheVosR0FBUy9yQixVQUFXLENBRXBEK04sS0FBTSxTQUFja2dCLEVBQWFDLEdBQy9CLElBQUlwQixFQUFXWixHQUFxQmhRLEdBQW9CNWIsS0FBTXlyQixLQU85RCxPQU5BZSxFQUFTRixHQUEyQixtQkFBZnFCLEdBQTRCQSxFQUNqRG5CLEVBQVNHLEtBQTRCLG1CQUFkaUIsR0FBNEJBLEVBQ25EcEIsRUFBUzlCLE9BQVNnQixHQUFXSixHQUFVWixZQUFTandCLEVBQ2hEdUYsS0FBS29zQixHQUFHbHVCLEtBQUtzdUIsR0FDVHhzQixLQUFLcXRCLElBQUlydEIsS0FBS3F0QixHQUFHbnZCLEtBQUtzdUIsR0FDdEJ4c0IsS0FBS3VzQixJQUFJaEMsR0FBT3ZxQixNQUFNLEdBQ25Cd3NCLEVBQVNoRCxPQUNsQixFQUVBLE1BQVMsU0FBVW9FLEdBQ2pCLE9BQU81dEIsS0FBS3lOLFVBQUtoVCxFQUFXbXpCLEVBQzlCLElBRUYvRCxHQUF1QixXQUNyQixJQUFJTCxFQUFVLElBQUlHLEdBQ2xCM3BCLEtBQUt3cEIsUUFBVUEsRUFDZnhwQixLQUFLc04sUUFBVTlKLEdBQUtpcUIsR0FBVWpFLEVBQVMsR0FDdkN4cEIsS0FBS3VOLE9BQVMvSixHQUFLK3BCLEdBQVMvRCxFQUFTLEVBQ3ZDLEVBQ0FNLEdBQXNCN25CLEVBQUkycEIsR0FBdUIsU0FBVS9VLEdBQ3pELE9BQU9BLElBQU00VSxJQUFZNVUsSUFBTTNQLEdBQzNCLElBQUkyaUIsR0FBcUJoVCxHQUN6QitTLEdBQTRCL1MsRUFDbEMsR0FHRmpTLEdBQVFBLEdBQVFSLEVBQUlRLEdBQVFELEVBQUlDLEdBQVFWLEdBQUsybkIsR0FBWSxDQUFFdmMsUUFBU21jLEtBQ3BFdFgsR0FBZ0JzWCxHQUFVTCxJQUMxQmxOLEdBQVlrTixJQUNabGtCLEdBQVUvSixFQUFNaXVCLElBR2hCeG1CLEdBQVFBLEdBQVEzSSxFQUFJMkksR0FBUVYsR0FBSzJuQixHQUFZVCxHQUFTLENBRXBEN2QsT0FBUSxTQUFnQnNnQixHQUN0QixJQUFJQyxFQUFhbEMsR0FBcUI1ckIsTUFHdEMsT0FEQTBwQixFQURlb0UsRUFBV3ZnQixRQUNqQnNnQixHQUNGQyxFQUFXdEUsT0FDcEIsSUFFRjVrQixHQUFRQSxHQUFRM0ksRUFBSTJJLEdBQVFWLEdBQU8ybkIsR0FBYVQsR0FBUyxDQUV2RDlkLFFBQVMsU0FBaUJ5Z0IsR0FDeEIsT0E3T2tCLFNBQVVsWCxFQUFHa1gsR0FFakMsR0FEQXp6QixFQUFVdWMsR0FDTnpjLEVBQVUyekIsSUFBTUEsRUFBRTVtQixjQUFnQjBQLEVBQUcsT0FBT2tYLEVBQ2hELElBQUlDLEVBQW9CbEUsR0FBc0I3bkIsRUFBRTRVLEdBR2hELE9BREF2SixFQURjMGdCLEVBQWtCMWdCLFNBQ3hCeWdCLEdBQ0RDLEVBQWtCeEUsT0FDM0IsQ0FzT1d5RSxDQUFpQmp1QixLQUFNK3RCLEVBQ2hDLElBRUZucEIsR0FBUUEsR0FBUTNJLEVBQUkySSxHQUFRVixJQUFNMm5CLElBQWMvTixJQUFZLFNBQVV2TyxHQUNwRWtjLEdBQVN5QyxJQUFJM2UsR0FBYSxNQUFFb2MsR0FDOUIsS0FBS1AsR0FBUyxDQUVaOEMsSUFBSyxTQUFhcmYsR0FDaEIsSUFBSWdJLEVBQUk3VyxLQUNKOHRCLEVBQWFsQyxHQUFxQi9VLEdBQ2xDdkosRUFBVXdnQixFQUFXeGdCLFFBQ3JCQyxFQUFTdWdCLEVBQVd2Z0IsT0FDcEJ6TixFQUFTaXFCLElBQVMsV0FDcEIsSUFBSWhkLEVBQVMsR0FDVDdRLEVBQVEsRUFDUml5QixFQUFZLEVBQ2hCL0csR0FBT3ZZLEdBQVUsR0FBTyxTQUFVMmEsR0FDaEMsSUFBSTRFLEVBQVNseUIsSUFDVG15QixHQUFnQixFQUNwQnRoQixFQUFPN08sVUFBS3pELEdBQ1owekIsSUFDQXRYLEVBQUV2SixRQUFRa2MsR0FBUy9iLE1BQUssU0FBVXhQLEdBQzVCb3dCLElBQ0pBLEdBQWdCLEVBQ2hCdGhCLEVBQU9xaEIsR0FBVW53QixJQUNma3dCLEdBQWE3Z0IsRUFBUVAsR0FDekIsR0FBR1EsRUFDTCxNQUNFNGdCLEdBQWE3Z0IsRUFBUVAsRUFDekIsSUFFQSxPQURJak4sRUFBT1QsR0FBR2tPLEVBQU96TixFQUFPb21CLEdBQ3JCNEgsRUFBV3RFLE9BQ3BCLEVBRUE4RSxLQUFNLFNBQWN6ZixHQUNsQixJQUFJZ0ksRUFBSTdXLEtBQ0o4dEIsRUFBYWxDLEdBQXFCL1UsR0FDbEN0SixFQUFTdWdCLEVBQVd2Z0IsT0FDcEJ6TixFQUFTaXFCLElBQVMsV0FDcEIzQyxHQUFPdlksR0FBVSxHQUFPLFNBQVUyYSxHQUNoQzNTLEVBQUV2SixRQUFRa2MsR0FBUy9iLEtBQUtxZ0IsRUFBV3hnQixRQUFTQyxFQUM5QyxHQUNGLElBRUEsT0FESXpOLEVBQU9ULEdBQUdrTyxFQUFPek4sRUFBT29tQixHQUNyQjRILEVBQVd0RSxPQUNwQixJQUtGLElBQUkrRSxHQUFPLENBQUMsRUFRWixTQUFTQyxHQUFhQyxHQUNwQixPQUFPeGQsR0FBVWpSLFVBQU0sT0FBUSxFQUFxQjJRLG1CQUFtQnhCLE1BQUssU0FBU3VmLElBQ25GLElBQUlDLEVBQ0osT0FBT2hlLG1CQUFtQjdGLE1BQUssU0FBa0I4akIsR0FDL0MsT0FDRSxPQUFRQSxFQUFTaGYsS0FBT2dmLEVBQVM1Z0IsTUFDL0IsS0FBSyxFQUNILEtBQU0sc0JBQXVCdlEsUUFBUyxDQUNwQ214QixFQUFTNWdCLEtBQU8sRUFDaEIsS0FDRixDQUdBLE9BREE0Z0IsRUFBUzVnQixLQUFPLEVBQ1Q2Z0Isa0JBQWtCSixHQUUzQixLQUFLLEVBQ0hHLEVBQVNFLEdBQUtGLEVBQVMxaUIsS0FDdkIwaUIsRUFBUzVnQixLQUFPLEVBQ2hCLE1BRUYsS0FBSyxFQUVILE9BREE0Z0IsRUFBUzVnQixLQUFPLEVBQ1QrZ0IsR0FBVU4sR0FFbkIsS0FBSyxFQUNIRyxFQUFTRSxHQUFLRixFQUFTMWlCLEtBRXpCLEtBQUssRUFFSCxPQURBeWlCLEVBQVdDLEVBQVNFLEdBQ2JGLEVBQVN2aUIsT0FBTyxTQUFVMmlCLEdBQW9CTCxJQUV2RCxLQUFLLEdBQ0wsSUFBSyxNQUNILE9BQU9DLEVBQVMvZSxPQUd4QixHQUFHNmUsRUFDTCxJQUNGLENBQ0EsU0FBU0ssR0FBVU4sR0FDakIsT0FBT3hkLEdBQVVqUixVQUFNLE9BQVEsRUFBcUIyUSxtQkFBbUJ4QixNQUFLLFNBQVM4ZixJQUNuRixJQUFJQyxFQUNKLE9BQU92ZSxtQkFBbUI3RixNQUFLLFNBQW1CcWtCLEdBQ2hELE9BQ0UsT0FBUUEsRUFBVXZmLEtBQU91ZixFQUFVbmhCLE1BQ2pDLEtBQUssRUFJSCxPQUhBa2hCLEVBQU1FLElBQUlDLGdCQUFnQlosR0FDMUJVLEVBQVV2ZixLQUFPLEVBQ2pCdWYsRUFBVW5oQixLQUFPLEVBQ1ZzaEIsR0FBWUosR0FFckIsS0FBSyxFQUNILE9BQU9DLEVBQVU5aUIsT0FBTyxTQUFVOGlCLEVBQVVqakIsTUFFOUMsS0FBSyxFQUdILE9BRkFpakIsRUFBVXZmLEtBQU8sRUFDakJ3ZixJQUFJRyxnQkFBZ0JMLEdBQ2JDLEVBQVUzZSxPQUFPLEdBRTFCLEtBQUssRUFDTCxJQUFLLE1BQ0gsT0FBTzJlLEVBQVV0ZixPQUd6QixHQUFHb2YsRUFBVSxLQUFNLENBQUMsQ0FBQyxFQUFFLENBQUUsRUFBRyxJQUM5QixJQUNGLENBRUEsU0FBU0ssR0FBWUosR0FDbkIsT0FBT2plLEdBQVVqUixVQUFNLE9BQVEsRUFBcUIyUSxtQkFBbUJ4QixNQUFLLFNBQVNxZ0IsSUFDbkYsSUFBSUMsRUFBS0MsRUFDVCxPQUFPL2UsbUJBQW1CN0YsTUFBSyxTQUFtQjZrQixHQUNoRCxPQUNFLE9BQVFBLEVBQVUvZixLQUFPK2YsRUFBVTNoQixNQUNqQyxLQUFLLEVBY0gsSUFiQXloQixFQUFNLElBQUlHLE9BQ05DLFNBQVcsUUFDZkosRUFBSXhkLElBQU1pZCxFQUNWUSxFQUFTLElBQUlwZ0IsU0FBUSxTQUFVaEMsRUFBU0MsR0FDdENraUIsRUFBSUssT0FBUyxXQUNYLE9BQU94aUIsR0FDVCxFQUVBbWlCLEVBQUlNLFFBQVUsV0FDWixPQUFPeGlCLEVBQU94USxNQUFNLHVCQUN0QixDQUNGLEtBRUsweUIsRUFBSU8sT0FBUSxDQUNmTCxFQUFVM2hCLEtBQU8sRUFDakIsS0FDRixDQUdBLE9BREEyaEIsRUFBVTNoQixLQUFPLEVBQ1Z5aEIsRUFBSU8sU0FBU0MsT0FBTSxXQUN4QixPQUFPLElBQ1QsSUFFRixLQUFLLEVBRUgsT0FEQU4sRUFBVTNoQixLQUFPLEVBQ1YwaEIsRUFFVCxLQUFLLEVBQ0gsT0FBT0MsRUFBVXRqQixPQUFPLFNBQVVvakIsR0FFcEMsS0FBSyxHQUNMLElBQUssTUFDSCxPQUFPRSxFQUFVOWYsT0FHekIsR0FBRzJmLEVBQ0wsSUFDRixDQUVBLFNBQVNSLEdBQW9CTCxHQUMzQixJQUFJdUIsRUFBT2x4QixVQUFVcEQsT0FBUyxRQUFzQm5CLElBQWpCdUUsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLENBQUMsRUFDNUVteEIsRUFBY0QsRUFBS0UsTUFDbkJBLE9BQXdCLElBQWhCRCxFQUF5QnhCLEVBQVN5QixNQUFRRCxFQUNsREUsRUFBZUgsRUFBS0ksT0FDcEJBLE9BQTBCLElBQWpCRCxFQUEwQjFCLEVBQVMyQixPQUFTRCxFQUNyREUsRUFBV0wsRUFBS00sR0FDaEJBLE9BQWtCLElBQWJELEVBQXNCLEVBQUlBLEVBQy9CRSxFQUFXUCxFQUFLUSxHQUNoQkEsT0FBa0IsSUFBYkQsRUFBc0IsRUFBSUEsRUFDL0JFLEVBQVdULEVBQUtVLEdBQ2hCQSxPQUFrQixJQUFiRCxFQUFzQmhDLEVBQVN5QixNQUFRTyxFQUM1Q0UsRUFBV1gsRUFBS1ksR0FDaEJBLE9BQWtCLElBQWJELEVBQXNCbEMsRUFBUzJCLE9BQVNPLEVBRTdDRSxFQUFTeHZCLFNBQVNFLGNBQWMsVUFDcENzdkIsRUFBT1gsTUFBUUEsRUFDZlcsRUFBT1QsT0FBU0EsRUFFaEIsSUFBSXJSLEVBQU04UixFQUFPQyxXQUFXLE1BQzVCLElBQUsvUixFQUFLLE1BQU0sSUFBSWxpQixNQUFNLG1DQUUxQixPQURBa2lCLEVBQUlnUyxVQUFVdEMsRUFBVTZCLEVBQUlFLEVBQUlFLEVBQUlFLEVBQUksRUFBRyxFQUFHVixFQUFPRSxHQUM5Q3JSLEVBQUlpUyxhQUFhLEVBQUcsRUFBR2QsRUFBT0UsRUFDdkMsQ0FTQSxTQUFTYSxHQUFhbEwsRUFBTXBpQixFQUFNdXRCLEdBQ2hDLE9BQU9uZ0IsR0FBVWpSLFVBQU0sT0FBUSxFQUFxQjJRLG1CQUFtQnhCLE1BQUssU0FBU2tpQixJQUNuRixJQUFJTixFQUFROVIsRUFBS3dQLEVBQU02QyxFQUFTeHhCLEVBQVF5eEIsRUFBWUMsRUFBV0MsRUFBTy8xQixFQUV0RSxPQUFPaVYsbUJBQW1CN0YsTUFBSyxTQUFtQjRtQixHQUNoRCxPQUNFLE9BQVFBLEVBQVU5aEIsS0FBTzhoQixFQUFVMWpCLE1BQ2pDLEtBQUssRUFNSCxJQUxBK2lCLEVBQVN4dkIsU0FBU0UsY0FBYyxXQUN6QjJ1QixNQUFRbkssRUFBS21LLE1BQ3BCVyxFQUFPVCxPQUFTckssRUFBS3FLLE9BQ3JCclIsRUFBTThSLEVBQU9DLFdBQVcsTUFFZixDQUNQVSxFQUFVMWpCLEtBQU8sRUFDakIsS0FDRixDQUVBLE1BQU1qUixNQUFNLDBCQUVkLEtBQUssRUFHSCxHQUZBa2lCLEVBQUkwUyxhQUFhMUwsRUFBTSxFQUFHLEtBRXBCLFdBQVk4SyxHQUFTLENBQ3pCVyxFQUFVMWpCLEtBQU8sR0FDakIsS0FDRixDQUdBLE9BREEwakIsRUFBVTFqQixLQUFPLEdBQ1YsSUFBSXNCLFNBQVEsU0FBVXVlLEdBQzNCLE9BQU9rRCxFQUFPYSxPQUFPL0QsRUFBR2hxQixFQUFNdXRCLEVBQ2hDLElBRUYsS0FBSyxHQUNIM0MsRUFBT2lELEVBQVV4bEIsS0FDakJ3bEIsRUFBVTFqQixLQUFPLEdBQ2pCLE1BRUYsS0FBSyxHQU1ILEdBSEFzakIsRUFBVVAsRUFBT2MsVUFBVWh1QixFQUFNdXRCLEdBQ2pDdHhCLEVBQVMsNEJBQTRCSCxLQUFLMnhCLEdBRTlCLENBQ1ZJLEVBQVUxakIsS0FBTyxHQUNqQixLQUNGLENBRUEsTUFBTWpSLE1BQU0sMkJBRWQsS0FBSyxHQUtILElBSkF3MEIsRUFBYXp4QixFQUFPLEdBQ3BCMHhCLEVBQVlNLEtBQUtoeUIsRUFBTyxJQUN4QjJ4QixFQUFRLElBQUk1USxXQUFXMlEsRUFBVTUxQixRQUU1QkYsRUFBSSxFQUFHQSxFQUFJKzFCLEVBQU03MUIsT0FBUUYsR0FBSyxFQUNqQysxQixFQUFNLzFCLEdBQUs4MUIsRUFBVTMxQixXQUFXSCxHQUdsQyt5QixFQUFPLElBQUlzRCxLQUFLLENBQUNOLEdBQVEsQ0FDdkI1dEIsS0FBTTB0QixJQUdWLEtBQUssR0FDSCxHQUFJOUMsRUFBTSxDQUNSaUQsRUFBVTFqQixLQUFPLEdBQ2pCLEtBQ0YsQ0FFQSxNQUFNalIsTUFBTSxtQkFFZCxLQUFLLEdBQ0gsT0FBTzIwQixFQUFVcmxCLE9BQU8sU0FBVW9pQixHQUVwQyxLQUFLLEdBQ0wsSUFBSyxNQUNILE9BQU9pRCxFQUFVN2hCLE9BR3pCLEdBQUd3aEIsRUFDTCxJQUNGLENBYUEsU0FBU1csR0FBY3ZELEdBQ3JCLE9BQU94ZCxHQUFValIsVUFBTSxPQUFRLEVBQXFCMlEsbUJBQW1CeEIsTUFBSyxTQUFTdWYsSUFDbkYsT0FBTy9kLG1CQUFtQjdGLE1BQUssU0FBa0I4akIsR0FDL0MsT0FDRSxPQUFRQSxFQUFTaGYsS0FBT2dmLEVBQVM1Z0IsTUFDL0IsS0FBSyxFQUdILE9BRkE0Z0IsRUFBU2hmLEtBQU8sRUFDaEJnZixFQUFTNWdCLEtBQU8sRUFDVHdnQixHQUFhQyxHQUV0QixLQUFLLEVBQ0gsT0FBT0csRUFBU3ZpQixPQUFPLFNBQVV1aUIsRUFBUzFpQixNQUU1QyxLQUFLLEVBSUgsTUFIQTBpQixFQUFTaGYsS0FBTyxFQUNoQmdmLEVBQVNFLEdBQUtGLEVBQWdCLE1BQUUsR0FDaEM3QixRQUFROVgsSUFBSSxrQkFBbUIyWixFQUFTRSxJQUNsQy94QixNQUFNLHlCQUVkLEtBQUssR0FDTCxJQUFLLE1BQ0gsT0FBTzZ4QixFQUFTL2UsT0FHeEIsR0FBRzZlLEVBQVMsS0FBTSxDQUFDLENBQUMsRUFBRyxJQUN6QixJQUNGLENBbFJBSCxHQUFLN3ZCLEVBQUssZ0JBQWtCLElBQ3hCNnZCLEdBQU8sSUFBTSxjQUNmenJCLEVBQVVuSSxPQUFPK0UsVUFBVyxZQUFZLFdBQ3RDLE1BQU8sV0FBYVQsRUFBU2UsTUFBUSxHQUN2QyxJQUFHLEdBZ1JMLElBMkVJaXlCLEdBM0VBcHVCLEdBQU8sY0FFUHF1QixHQUFXLFlBSVhDLEdBQTBCeDNCLE9BQU95M0IsT0FBTyxDQUMxQ3ZzQixVQUFXLEtBQ1hoQyxLQUFNQSxHQUNOd3VCLE1BUlUsY0FTVkgsU0FBVUEsR0FDVkksVUFSYyxNQVNkQyxlQVJtQixDQUFDLElBZWxCQyxHQUFTLGVBRVRDLEdBQWEsYUFNYkMsR0FBMkIvM0IsT0FBT3kzQixPQUFPLENBQzNDdnNCLFVBQVcsS0FDWGhDLEtBQU0ydUIsR0FDTkgsTUFWWSxlQVdaSCxTQUFVTyxHQUNWSCxVQVZnQixNQVdoQkMsZUFWcUIsQ0FDckJuQixRQUFTLE9BaUJQdUIsR0FBUyxlQUVUQyxHQUFhLGFBTWJDLEdBQTJCbDRCLE9BQU95M0IsT0FBTyxDQUMzQ3ZzQixVQUFXLEtBQ1hoQyxLQUFNOHVCLEdBQ05OLE1BVlksZUFXWkgsU0FBVVUsR0FDVk4sVUFWZ0IsT0FXaEJDLGVBVnFCLENBQ3JCbkIsUUFBUyxPQXFCWCxTQUFTMEIsR0FBa0I3TSxFQUFNaUssR0FDL0IsT0FoQ0YsU0FBa0JqSyxFQUFNOE0sR0FDdEIsSUFBSTNCLEVBQVUyQixFQUFLM0IsUUFDbkIsT0FBT0QsR0FBYWxMLEVBQU13TSxHQUFZckIsRUFDeEMsQ0E2QlM0QixDQUFTL00sRUFBTWlLLEVBQ3hCLENBRUEsU0FBUytDLEdBQWtCaE4sRUFBTWlLLEdBQy9CLE9BZEYsU0FBa0JqSyxFQUFNOE0sR0FDdEIsSUFBSTNCLEVBQVUyQixFQUFLM0IsUUFDbkIsT0FBT0QsR0FBYWxMLEVBQU0yTSxHQUFZeEIsRUFDeEMsQ0FXUzhCLENBQVNqTixFQUFNaUssRUFDeEIsQ0FLQSxJQUFJaUQsR0FBdUIsU0FBVUMsSUFoeUVyQyxTQUFtQkMsRUFBVUMsR0FDM0IsR0FBMEIsbUJBQWZBLEdBQTRDLE9BQWZBLEVBQ3RDLE1BQU0sSUFBSS80QixVQUFVLHNEQUd0Qjg0QixFQUFTM3pCLFVBQVkvRSxPQUFPeU0sT0FBT2tzQixHQUFjQSxFQUFXNXpCLFVBQVcsQ0FDckV5SCxZQUFhLENBQ1hsSixNQUFPbzFCLEVBQ1A3d0IsVUFBVSxFQUNWRCxjQUFjLEtBR2Qrd0IsR0FBWXh0QixHQUFnQnV0QixFQUFVQyxFQUM1QyxDQW94RUVDLENBQVVKLEVBQVNDLEdBRW5CLElBaHJFb0JJLEVBQ2hCQyxFQStxRUFDLEdBaHJFZ0JGLEVBZ3JFTUwsRUEvcUV0Qk0sRUFBNEJ6dEIsS0FFekIsV0FDTCxJQUNJbEcsRUFEQTZ6QixFQUFRbHVCLEdBQWdCK3RCLEdBRzVCLEdBQUlDLEVBQTJCLENBQzdCLElBQUlHLEVBQVludUIsR0FBZ0J6RixNQUFNbUgsWUFFdENySCxFQUFTbUcsUUFBUUMsVUFBVXl0QixFQUFPMzBCLFVBQVc0MEIsRUFDL0MsTUFDRTl6QixFQUFTNnpCLEVBQU1qd0IsTUFBTTFELEtBQU1oQixXQUc3QixPQXZCSixTQUFvQ3RCLEVBQU1wQixHQUN4QyxPQUFJQSxHQUF5QixpQkFBVEEsR0FBcUMsbUJBQVRBLEVBVGxELFNBQWdDb0IsR0FDOUIsUUFBYSxJQUFUQSxFQUNGLE1BQU0sSUFBSW0yQixlQUFlLDZEQUczQixPQUFPbjJCLENBQ1QsQ0FPU28yQixDQUF1QnAyQixHQUhyQnBCLENBSVgsQ0FpQld5M0IsQ0FBMkIvekIsS0FBTUYsRUFDMUMsR0FrcUVBLFNBQVNxekIsRUFBUWxOLEVBQU1wbkIsRUFBTXF4QixHQUMzQixJQUFJOEQsRUFNSixPQWowRUosU0FBeUJ0dEIsRUFBVXlMLEdBQ2pDLEtBQU16TCxhQUFvQnlMLEdBQ3hCLE1BQU0sSUFBSTVYLFVBQVUsb0NBRXhCLENBeXpFSTA1QixDQUFnQmowQixLQUFNbXpCLElBRXRCYSxFQUFRTixFQUFPcDNCLEtBQUswRCxLQUFNaW1CLEVBQU1pSyxJQUMxQnJ4QixLQUFPQSxFQUNObTFCLENBQ1QsQ0FFQSxPQUFPYixDQUNULENBaEIyQixDQWdCWHZzQixHQUFpQm1yQixPQUM3Qm1DLElBQWdDM3VCLEdBQWxCMHNCLEdBQWMsQ0FBQyxFQUFnQ3B1QixHQUFNc3VCLElBQWE1c0IsR0FBZ0Iwc0IsR0FBYU8sR0FBUUUsSUFBY250QixHQUFnQjBzQixHQUFhVSxHQUFRRSxJQUFjWixJQUV0TGtDLEdBQVcsU0FBa0JDLEVBQU9DLEVBQVlDLEdBQ2xELE9BQU9yakIsUUFBVSxPQUFRLE9BQVEsRUFBcUJOLG1CQUFtQnhCLE1BQUssU0FBU3VmLElBQ3JGLElBQUk2RixFQUFTQyxFQUFnQkMsRUFDN0IsT0FBTzlqQixtQkFBbUI3RixNQUFLLFNBQWtCOGpCLEdBQy9DLE9BQ0UsT0FBUUEsRUFBU2hmLEtBQU9nZixFQUFTNWdCLE1BQy9CLEtBQUssRUFHSCxPQUZBK2UsUUFBUTlYLElBQUksb0JBQXFCbWYsRUFBT0MsRUFBWUMsR0FDcEQxRixFQUFTNWdCLEtBQU8sRUFDVGdrQixHQUFjb0MsR0FFdkIsS0FBSyxFQUlILE9BSEFHLEVBQVUzRixFQUFTMWlCLEtBQ25CNmdCLFFBQVE5WCxJQUFJLFVBQVdzZixHQUN2QjNGLEVBQVM1Z0IsS0FBTyxFQUNULFdBQ0wsT0FBUXFtQixFQUFXeHdCLE1BQ2pCLEtBQUtBLEdBQ0gsT0FwR2xCLFNBQWdCb2lCLEdBQ2QsT0FBT2tMLEdBQWFsTCxFQUFNaU0sR0FDNUIsQ0ErQ1N3QyxDQW1EaUNILEdBRTFCLEtBQUsvQixHQUNILE9BQU9NLEdBQWtCeUIsRUFBU0YsRUFBV00sU0FFL0MsS0FBS2hDLEdBQ0gsT0FBT00sR0FBa0JzQixFQUFTRixFQUFXTSxTQU8vQyxRQUNFLE1BQU01M0IsTUFBTSxzQkFBc0IwQixPQUFPbTJCLEtBQUtDLFVBQVVSLEtBRTlELENBbkJPLEdBcUJULEtBQUssRUFHSCxPQUZBRyxFQUFpQjVGLEVBQVMxaUIsS0FDMUJ1b0IsRUFBVVAsR0FBV0csRUFBV3h3QixNQUN6QitxQixFQUFTdmlCLE9BQU8sU0FBVSxJQUFJOG1CLEdBQVEsQ0FBQ3FCLEdBQWlCRixFQUFlaDBCLFFBQVEsVUFBVyxJQUFJN0IsT0FBT2cyQixFQUFRbkMsWUFBYSxDQUMvSHp1QixLQUFNNHdCLEVBQVF2QyxZQUdsQixLQUFLLEdBQ0wsSUFBSyxNQUNILE9BQU90RCxFQUFTL2UsT0FHeEIsR0FBRzZlLEVBQ0wsSUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2dpdGh1Yi1wYWdlLy4vbm9kZV9tb2R1bGVzL3NxdW9vc2gtY29tcHJlc3MvZGlzdC9pbmRleC5lc20uanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9pc09iamVjdCA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcblxudmFyIF9hbk9iamVjdCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIV9pc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbnZhciBfZGVmaW5lZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cbi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcblxudmFyIF90b09iamVjdCA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KF9kZWZpbmVkKGl0KSk7XG59O1xuXG4vLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBfdG9JbnRlZ2VyID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcblxuLy8gNy4xLjE1IFRvTGVuZ3RoXG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBfdG9MZW5ndGggPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbihfdG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuXG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxudmFyIF9zdHJpbmdBdCA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhfZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSBfdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxudmFyIGF0ID0gX3N0cmluZ0F0KHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbnZhciBfYWR2YW5jZVN0cmluZ0luZGV4ID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcblxudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciBfY29mID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgYmFzZWRpciwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7XG5cdCAgcGF0aDogYmFzZWRpcixcblx0ICBleHBvcnRzOiB7fSxcblx0ICByZXF1aXJlOiBmdW5jdGlvbiAocGF0aCwgYmFzZSkge1xuICAgICAgcmV0dXJuIGNvbW1vbmpzUmVxdWlyZShwYXRoLCAoYmFzZSA9PT0gdW5kZWZpbmVkIHx8IGJhc2UgPT09IG51bGwpID8gbW9kdWxlLnBhdGggOiBiYXNlKTtcbiAgICB9XG5cdH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcbn1cblxuZnVuY3Rpb24gY29tbW9uanNSZXF1aXJlICgpIHtcblx0dGhyb3cgbmV3IEVycm9yKCdEeW5hbWljIHJlcXVpcmVzIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBieSBAcm9sbHVwL3BsdWdpbi1jb21tb25qcycpO1xufVxuXG52YXIgX2NvcmUgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG52YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjExJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbn0pO1xuXG52YXIgX2dsb2JhbCA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbn0pO1xuXG52YXIgX2xpYnJhcnkgPSBmYWxzZTtcblxudmFyIF9zaGFyZWQgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBfZ2xvYmFsW1NIQVJFRF0gfHwgKF9nbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IF9jb3JlLnZlcnNpb24sXG4gIG1vZGU6ICAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xufSk7XG5cbnZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xudmFyIF91aWQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuXG52YXIgX3drcyA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbnZhciBzdG9yZSA9IF9zaGFyZWQoJ3drcycpO1xuXG52YXIgU3ltYm9sID0gX2dsb2JhbC5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IF91aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG59KTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcblxudmFyIFRBRyA9IF93a3MoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IF9jb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxudmFyIF9jbGFzc29mID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBfY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBfY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG5cbnZhciBidWlsdGluRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcblxuIC8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbnZhciBfcmVnZXhwRXhlY0Fic3RyYWN0ID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmICh0eXBlb2YgZXhlYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciByZXN1bHQgPSBleGVjLmNhbGwoUiwgUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoX2NsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcblxuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcblxudmFyIF9mbGFncyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBfYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLyxcbiAgICAgIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgX2ZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG52YXIgX3JlZ2V4cEV4ZWMgPSBwYXRjaGVkRXhlYztcblxudmFyIF9mYWlscyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbnZhciBfZGVzY3JpcHRvcnMgPSAhX2ZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcblxudmFyIGRvY3VtZW50JDEgPSBfZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBfaXNPYmplY3QoZG9jdW1lbnQkMSkgJiYgX2lzT2JqZWN0KGRvY3VtZW50JDEuY3JlYXRlRWxlbWVudCk7XG52YXIgX2RvbUNyZWF0ZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudCQxLmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuXG52YXIgX2llOERvbURlZmluZSA9ICFfZGVzY3JpcHRvcnMgJiYgIV9mYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2RvbUNyZWF0ZSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cbi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxuXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbnZhciBfdG9QcmltaXRpdmUgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFfaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIV9pc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhX2lzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhX2lzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcblxudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG52YXIgZiA9IF9kZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgX2FuT2JqZWN0KE8pO1xuICBQID0gX3RvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBfYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChfaWU4RG9tRGVmaW5lKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG5cbnZhciBfb2JqZWN0RHAgPSB7XG5cdGY6IGZcbn07XG5cbnZhciBfcHJvcGVydHlEZXNjID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG5cbnZhciBfaGlkZSA9IF9kZXNjcmlwdG9ycyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIF9vYmplY3REcC5mKG9iamVjdCwga2V5LCBfcHJvcGVydHlEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcblxudmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG52YXIgX2hhcyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcblxudmFyIF9mdW5jdGlvblRvU3RyaW5nID0gX3NoYXJlZCgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcblxudmFyIF9yZWRlZmluZSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbnZhciBTUkMgPSBfdWlkKCdzcmMnKTtcblxudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgX2Z1bmN0aW9uVG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbl9jb3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIF9mdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgX2hhcyh2YWwsICduYW1lJykgfHwgX2hpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgX2hhcyh2YWwsIFNSQykgfHwgX2hpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IF9nbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIF9oaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgX2hpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8IF9mdW5jdGlvblRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbn0pO1xuXG52YXIgX2FGdW5jdGlvbiA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xuXG52YXIgX2N0eCA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIF9hRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBfZ2xvYmFsIDogSVNfU1RBVElDID8gX2dsb2JhbFtuYW1lXSB8fCAoX2dsb2JhbFtuYW1lXSA9IHt9KSA6IChfZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IF9jb3JlIDogX2NvcmVbbmFtZV0gfHwgKF9jb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IF9jdHgob3V0LCBfZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IF9jdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgX3JlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBfaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuX2dsb2JhbC5jb3JlID0gX2NvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG52YXIgX2V4cG9ydCA9ICRleHBvcnQ7XG5cbl9leHBvcnQoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiBfcmVnZXhwRXhlYyAhPT0gLy4vLmV4ZWNcbn0sIHtcbiAgZXhlYzogX3JlZ2V4cEV4ZWNcbn0pO1xuXG52YXIgU1BFQ0lFUyA9IF93a3MoJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIV9mYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxudmFyIF9maXhSZVdrcyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gX3drcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIV9mYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MID8gIV9mYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcbiAgICB2YXIgZXhlY0NhbGxlZCA9IGZhbHNlO1xuICAgIHZhciByZSA9IC9hLztcbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgIH1cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pIDogdW5kZWZpbmVkO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIGZucyA9IGV4ZWMoXG4gICAgICBfZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSBfcmVnZXhwRXhlYykge1xuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgIF9yZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBfaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4kMSA9IE1hdGgubWluO1xudmFyIGZsb29yJDEgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCZgJ118XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCZgJ118XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbl9maXhSZVdrcygncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRyZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IF9hbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBfcmVnZXhwRXhlY0Fic3RyYWN0KHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBfYWR2YW5jZVN0cmluZ0luZGV4KFMsIF90b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4kMShfdG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xuXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gX3RvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmbG9vciQxKG4gLyAxMCk7XG4gICAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnZhciBydW50aW1lXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkJDE7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkJDEpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZCQxO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQkMTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkJDE7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkJDEsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkJDE7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQkMTtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZCQxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkJDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkJDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgIG1vZHVsZS5leHBvcnRzIFxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxufSk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7XG4gICAgX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0O1xuICB9IGVsc2Uge1xuICAgIF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICAgIHZhciBhID0gW251bGxdO1xuICAgICAgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpO1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpO1xuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICBpZiAoQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkO1xuXG4gIF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gICAgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzcztcblxuICAgIGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtcblxuICAgICAgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gV3JhcHBlcigpIHtcbiAgICAgIHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IFdyYXBwZXIsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7XG4gIH07XG5cbiAgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7XG4gIHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHtcbiAgICB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksXG4gICAgICAgIHJlc3VsdDtcblxuICAgIGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7XG4gICAgICB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yO1xuXG4gICAgICByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpO1xuICB9O1xufVxuXG52YXIgZFAkMSA9IF9vYmplY3REcC5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgX2Rlc2NyaXB0b3JzICYmIGRQJDEoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoJycgKyB0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxuXG52YXIgVFlQRUQgPSBfdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSBfdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoX2dsb2JhbC5BcnJheUJ1ZmZlciAmJiBfZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBfZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBfaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBfaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbnZhciBfdHlwZWQgPSB7XG4gIEFCVjogQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6IFRZUEVELFxuICBWSUVXOiBWSUVXXG59O1xuXG52YXIgX3JlZGVmaW5lQWxsID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIF9yZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIF9hbkluc3RhbmNlID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG5cblxudmFyIF90b0luZGV4ID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IF90b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gX3RvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIScpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xudmFyIF9pb2JqZWN0ID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIF9jb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG5cbi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xuXG5cbnZhciBfdG9Jb2JqZWN0ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBfaW9iamVjdChfZGVmaW5lZChpdCkpO1xufTtcblxudmFyIG1heCQxID0gTWF0aC5tYXg7XG52YXIgbWluJDIgPSBNYXRoLm1pbjtcbnZhciBfdG9BYnNvbHV0ZUluZGV4ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSBfdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heCQxKGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbiQyKGluZGV4LCBsZW5ndGgpO1xufTtcblxuLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcblxuXG5cbnZhciBfYXJyYXlJbmNsdWRlcyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSBfdG9Jb2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gX3RvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBfdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxudmFyIHNoYXJlZCA9IF9zaGFyZWQoJ2tleXMnKTtcblxudmFyIF9zaGFyZWRLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSBfdWlkKGtleSkpO1xufTtcblxudmFyIGFycmF5SW5kZXhPZiA9IF9hcnJheUluY2x1ZGVzKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IF9zaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBfb2JqZWN0S2V5c0ludGVybmFsID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSBfdG9Jb2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBfaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKF9oYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG52YXIgX2VudW1CdWdLZXlzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuXG4vLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5cbnZhciBoaWRkZW5LZXlzID0gX2VudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG52YXIgZiQxID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBfb2JqZWN0S2V5c0ludGVybmFsKE8sIGhpZGRlbktleXMpO1xufTtcblxudmFyIF9vYmplY3RHb3BuID0ge1xuXHRmOiBmJDFcbn07XG5cbnZhciBfYXJyYXlGaWxsID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IF90b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IF90b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gX3RvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBfdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcblxudmFyIGRlZiA9IF9vYmplY3REcC5mO1xuXG52YXIgVEFHJDEgPSBfd2tzKCd0b1N0cmluZ1RhZycpO1xuXG52YXIgX3NldFRvU3RyaW5nVGFnID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFfaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUckMSkpIGRlZihpdCwgVEFHJDEsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcblxudmFyIF90eXBlZEJ1ZmZlciA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuXG5cblxuXG5cblxuXG5cblxuXG52YXIgZ09QTiA9IF9vYmplY3RHb3BuLmY7XG52YXIgZFAgPSBfb2JqZWN0RHAuZjtcblxuXG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnO1xudmFyICRBcnJheUJ1ZmZlciA9IF9nbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBfZ2xvYmFsW0RBVEFfVklFV107XG52YXIgTWF0aCA9IF9nbG9iYWwuTWF0aDtcbnZhciBSYW5nZUVycm9yID0gX2dsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBfZ2xvYmFsLkluZmluaXR5O1xudmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xudmFyIEJVRkZFUiA9ICdidWZmZXInO1xudmFyIEJZVEVfTEVOR1RIID0gJ2J5dGVMZW5ndGgnO1xudmFyIEJZVEVfT0ZGU0VUID0gJ2J5dGVPZmZzZXQnO1xudmFyICRCVUZGRVIgPSBfZGVzY3JpcHRvcnMgPyAnX2InIDogQlVGRkVSO1xudmFyICRMRU5HVEggPSBfZGVzY3JpcHRvcnMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IF9kZXNjcmlwdG9ycyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbmZ1bmN0aW9uIHBhY2tJRUVFNzU0KHZhbHVlLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IF90b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufVxuZnVuY3Rpb24gc2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gX3RvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoIV90eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgX2FuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gX3RvSW5kZXgobGVuZ3RoKTtcbiAgICB0aGlzLl9iID0gX2FycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgX2FuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIF9hbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF07XG4gICAgdmFyIG9mZnNldCA9IF90b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IF90b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZiAoX2Rlc2NyaXB0b3JzKSB7XG4gICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJVRkZFUiwgJ19iJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTtcbiAgfVxuXG4gIF9yZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFfZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICRBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIV9mYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pIHx8IF9mYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIF9hbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIoX3RvSW5kZXgobGVuZ3RoKSk7XG4gICAgfTtcbiAgICB2YXIgQXJyYXlCdWZmZXJQcm90byA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQmFzZUJ1ZmZlcltQUk9UT1RZUEVdO1xuICAgIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7KSB7XG4gICAgICBpZiAoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKSBfaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSBfcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cbl9zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5fc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuX2hpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sIF90eXBlZC5WSUVXLCB0cnVlKTtcbmV4cG9ydHNbQVJSQVlfQlVGRkVSXSA9ICRBcnJheUJ1ZmZlcjtcbmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldztcbn0pO1xuXG52YXIgX2l0ZXJhdG9ycyA9IHt9O1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5cbnZhciBJVEVSQVRPUiA9IF93a3MoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxudmFyIF9pc0FycmF5SXRlciA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoX2l0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG5cbi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxuXG5cblxudmFyIF9vYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBfb2JqZWN0S2V5c0ludGVybmFsKE8sIF9lbnVtQnVnS2V5cyk7XG59O1xuXG52YXIgX29iamVjdERwcyA9IF9kZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIF9hbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBfb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgX29iamVjdERwLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcblxudmFyIGRvY3VtZW50JDIgPSBfZ2xvYmFsLmRvY3VtZW50O1xudmFyIF9odG1sID0gZG9jdW1lbnQkMiAmJiBkb2N1bWVudCQyLmRvY3VtZW50RWxlbWVudDtcblxuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG5cblxuXG52YXIgSUVfUFJPVE8kMSA9IF9zaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFJDEgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBfZG9tQ3JlYXRlKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBfZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgX2h0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFJDFdW19lbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG52YXIgX29iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEUkMV0gPSBfYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFJDFdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPJDFdID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IF9vYmplY3REcHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG5cbi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG5cblxudmFyIElFX1BST1RPJDIgPSBfc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxudmFyIF9vYmplY3RHcG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IF90b09iamVjdChPKTtcbiAgaWYgKF9oYXMoTywgSUVfUFJPVE8kMikpIHJldHVybiBPW0lFX1BST1RPJDJdO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cbnZhciBJVEVSQVRPUiQxID0gX3drcygnaXRlcmF0b3InKTtcblxudmFyIGNvcmVfZ2V0SXRlcmF0b3JNZXRob2QgPSBfY29yZS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1IkMV1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgX2l0ZXJhdG9yc1tfY2xhc3NvZihpdCldO1xufTtcblxuLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcblxudmFyIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gX2NvZihhcmcpID09ICdBcnJheSc7XG59O1xuXG52YXIgU1BFQ0lFUyQxID0gX3drcygnc3BlY2llcycpO1xuXG52YXIgX2FycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoX2lzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IF9pc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKF9pc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFUyQxXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcblxuLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxuXG5cbnZhciBfYXJyYXlTcGVjaWVzQ3JlYXRlID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoX2FycmF5U3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG5cbi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcblxuXG5cblxuXG52YXIgX2FycmF5TWV0aG9kcyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgX2FycmF5U3BlY2llc0NyZWF0ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gX3RvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IF9pb2JqZWN0KE8pO1xuICAgIHZhciBmID0gX2N0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gX3RvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcblxuLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG5cblxudmFyIFNQRUNJRVMkMiA9IF93a3MoJ3NwZWNpZXMnKTtcbnZhciBfc3BlY2llc0NvbnN0cnVjdG9yID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBfYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gX2FuT2JqZWN0KEMpW1NQRUNJRVMkMl0pID09IHVuZGVmaW5lZCA/IEQgOiBfYUZ1bmN0aW9uKFMpO1xufTtcblxuLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gX3drcygndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvJDEgPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90byQxW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIF9oaWRlKEFycmF5UHJvdG8kMSwgVU5TQ09QQUJMRVMsIHt9KTtcbnZhciBfYWRkVG9VbnNjb3BhYmxlcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90byQxW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG5cbnZhciBfaXRlclN0ZXAgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuX2hpZGUoSXRlcmF0b3JQcm90b3R5cGUsIF93a3MoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG52YXIgX2l0ZXJDcmVhdGUgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gX29iamVjdENyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBfcHJvcGVydHlEZXNjKDEsIG5leHQpIH0pO1xuICBfc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuXG52YXIgSVRFUkFUT1IkMiA9IF93a3MoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbnZhciBfaXRlckRlZmluZSA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgX2l0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUiQyXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IF9vYmplY3RHcG8oJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgX3NldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUiQyXSAhPSAnZnVuY3Rpb24nKSBfaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IkMiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUiQyXSkpIHtcbiAgICBfaGlkZShwcm90bywgSVRFUkFUT1IkMiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgX2l0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBfaXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgX3JlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlIF9leHBvcnQoX2V4cG9ydC5QICsgX2V4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnZhciBlczZfYXJyYXlfaXRlcmF0b3IgPSBfaXRlckRlZmluZShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSBfdG9Jb2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gX2l0ZXJTdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIF9pdGVyU3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gX2l0ZXJTdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIF9pdGVyU3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbl9pdGVyYXRvcnMuQXJndW1lbnRzID0gX2l0ZXJhdG9ycy5BcnJheTtcblxuX2FkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbl9hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbl9hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cbnZhciBJVEVSQVRPUiQzID0gX3drcygnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SJDNdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG52YXIgX2l0ZXJEZXRlY3QgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUiQzXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1IkM10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcblxudmFyIFNQRUNJRVMkMyA9IF93a3MoJ3NwZWNpZXMnKTtcblxudmFyIF9zZXRTcGVjaWVzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IF9nbG9iYWxbS0VZXTtcbiAgaWYgKF9kZXNjcmlwdG9ycyAmJiBDICYmICFDW1NQRUNJRVMkM10pIF9vYmplY3REcC5mKEMsIFNQRUNJRVMkMywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuXG52YXIgX2FycmF5Q29weVdpdGhpbiA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSBfdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSBfdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSBfdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSBfdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IF90b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG5cbnZhciBmJDIgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxudmFyIF9vYmplY3RQaWUgPSB7XG5cdGY6IGYkMlxufTtcblxudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG52YXIgZiQzID0gX2Rlc2NyaXB0b3JzID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSBfdG9Jb2JqZWN0KE8pO1xuICBQID0gX3RvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoX2llOERvbURlZmluZSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChfaGFzKE8sIFApKSByZXR1cm4gX3Byb3BlcnR5RGVzYyghX29iamVjdFBpZS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcblxudmFyIF9vYmplY3RHb3BkID0ge1xuXHRmOiBmJDNcbn07XG5cbnZhciBfdHlwZWRBcnJheSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbmlmIChfZGVzY3JpcHRvcnMpIHtcbiAgdmFyIExJQlJBUlkgPSBfbGlicmFyeTtcbiAgdmFyIGdsb2JhbCA9IF9nbG9iYWw7XG4gIHZhciBmYWlscyA9IF9mYWlscztcbiAgdmFyICRleHBvcnQgPSBfZXhwb3J0O1xuICB2YXIgJHR5cGVkID0gX3R5cGVkO1xuICB2YXIgJGJ1ZmZlciA9IF90eXBlZEJ1ZmZlcjtcbiAgdmFyIGN0eCA9IF9jdHg7XG4gIHZhciBhbkluc3RhbmNlID0gX2FuSW5zdGFuY2U7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSBfcHJvcGVydHlEZXNjO1xuICB2YXIgaGlkZSA9IF9oaWRlO1xuICB2YXIgcmVkZWZpbmVBbGwgPSBfcmVkZWZpbmVBbGw7XG4gIHZhciB0b0ludGVnZXIgPSBfdG9JbnRlZ2VyO1xuICB2YXIgdG9MZW5ndGggPSBfdG9MZW5ndGg7XG4gIHZhciB0b0luZGV4ID0gX3RvSW5kZXg7XG4gIHZhciB0b0Fic29sdXRlSW5kZXggPSBfdG9BYnNvbHV0ZUluZGV4O1xuICB2YXIgdG9QcmltaXRpdmUgPSBfdG9QcmltaXRpdmU7XG4gIHZhciBoYXMgPSBfaGFzO1xuICB2YXIgY2xhc3NvZiA9IF9jbGFzc29mO1xuICB2YXIgaXNPYmplY3QgPSBfaXNPYmplY3Q7XG4gIHZhciB0b09iamVjdCA9IF90b09iamVjdDtcbiAgdmFyIGlzQXJyYXlJdGVyID0gX2lzQXJyYXlJdGVyO1xuICB2YXIgY3JlYXRlID0gX29iamVjdENyZWF0ZTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gX29iamVjdEdwbztcbiAgdmFyIGdPUE4gPSBfb2JqZWN0R29wbi5mO1xuICB2YXIgZ2V0SXRlckZuID0gY29yZV9nZXRJdGVyYXRvck1ldGhvZDtcbiAgdmFyIHVpZCA9IF91aWQ7XG4gIHZhciB3a3MgPSBfd2tzO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSBfYXJyYXlNZXRob2RzO1xuICB2YXIgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IF9hcnJheUluY2x1ZGVzO1xuICB2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gX3NwZWNpZXNDb25zdHJ1Y3RvcjtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gZXM2X2FycmF5X2l0ZXJhdG9yO1xuICB2YXIgSXRlcmF0b3JzID0gX2l0ZXJhdG9ycztcbiAgdmFyICRpdGVyRGV0ZWN0ID0gX2l0ZXJEZXRlY3Q7XG4gIHZhciBzZXRTcGVjaWVzID0gX3NldFNwZWNpZXM7XG4gIHZhciBhcnJheUZpbGwgPSBfYXJyYXlGaWxsO1xuICB2YXIgYXJyYXlDb3B5V2l0aGluID0gX2FycmF5Q29weVdpdGhpbjtcbiAgdmFyICREUCA9IF9vYmplY3REcDtcbiAgdmFyICRHT1BEID0gX29iamVjdEdvcGQ7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xufSk7XG5cbl90eXBlZEFycmF5KCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxuXG52YXIgX2l0ZXJDYWxsID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKF9hbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBfYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuXG52YXIgX2Zvck9mID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBjb3JlX2dldEl0ZXJhdG9yTWV0aG9kKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBfY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChfaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSBfdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihfYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IF9pdGVyQ2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcbn0pO1xuXG4vLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbnZhciBfaW52b2tlID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG5cbnZhciBwcm9jZXNzID0gX2dsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBfZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBfZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gX2dsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IF9nbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgX2ludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAoX2NvZihwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhfY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KF9jdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gX2N0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoX2dsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFfZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgX2dsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgX2dsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBfZG9tQ3JlYXRlKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBfaHRtbC5hcHBlbmRDaGlsZChfZG9tQ3JlYXRlKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX2h0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChfY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG52YXIgX3Rhc2sgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcblxudmFyIG1hY3JvdGFzayA9IF90YXNrLnNldDtcbnZhciBPYnNlcnZlciA9IF9nbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBfZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyQxID0gX2dsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UkMSA9IF9nbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSBfY29mKHByb2Nlc3MkMSkgPT0gJ3Byb2Nlc3MnO1xuXG52YXIgX21pY3JvdGFzayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2VzcyQxLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoX2dsb2JhbC5uYXZpZ2F0b3IgJiYgX2dsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlJDEgJiYgUHJvbWlzZSQxLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZSQxLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChfZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG5cbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG5cblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gX2FGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBfYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbnZhciBmJDQgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcblxudmFyIF9uZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHtcblx0ZjogZiQ0XG59O1xuXG52YXIgX3BlcmZvcm0gPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcblxudmFyIG5hdmlnYXRvciA9IF9nbG9iYWwubmF2aWdhdG9yO1xuXG52YXIgX3VzZXJBZ2VudCA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuXG52YXIgX3Byb21pc2VSZXNvbHZlID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgX2FuT2JqZWN0KEMpO1xuICBpZiAoX2lzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBfbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG5cbnZhciB0YXNrID0gX3Rhc2suc2V0O1xudmFyIG1pY3JvdGFzayA9IF9taWNyb3Rhc2soKTtcblxuXG5cblxudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yJDEgPSBfZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzJDIgPSBfZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzJDIgJiYgcHJvY2VzcyQyLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgJFByb21pc2UgPSBfZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSQxID0gX2NsYXNzb2YocHJvY2VzcyQyKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBfbmV3UHJvbWlzZUNhcGFiaWxpdHkuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbX3drcygnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUkMSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiBfdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gX2lzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IkMSgnUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChfZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBfcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUkMSkge1xuICAgICAgICAgIHByb2Nlc3MkMi5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IF9nbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IF9nbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSQxIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKF9nbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlJDEpIHtcbiAgICAgIHByb2Nlc3MkMi5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gX2dsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvciQxKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgX2N0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIF9jdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBfYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgX2FGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoX2N0eCgkcmVzb2x2ZSwgdGhpcywgMSksIF9jdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gX3JlZGVmaW5lQWxsKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoX3NwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUkMSA/IHByb2Nlc3MkMi5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBfY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IF9jdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIF9uZXdQcm9taXNlQ2FwYWJpbGl0eS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbl9leHBvcnQoX2V4cG9ydC5HICsgX2V4cG9ydC5XICsgX2V4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5fc2V0VG9TdHJpbmdUYWcoJFByb21pc2UsIFBST01JU0UpO1xuX3NldFNwZWNpZXMoUFJPTUlTRSk7XG5XcmFwcGVyID0gX2NvcmVbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3Ncbl9leHBvcnQoX2V4cG9ydC5TICsgX2V4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG5fZXhwb3J0KF9leHBvcnQuUyArIF9leHBvcnQuRiAqICggIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gX3Byb21pc2VSZXNvbHZlKCB0aGlzLCB4KTtcbiAgfVxufSk7XG5fZXhwb3J0KF9leHBvcnQuUyArIF9leHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiBfaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gX3BlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgX2Zvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gX3BlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgX2Zvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcblxudmFyIHRlc3QgPSB7fTtcbnRlc3RbX3drcygndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICBfcmVkZWZpbmUoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBfY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIG5hdGl2ZURlY29kZShibG9iKSB7XG4gIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkge1xuICAgIHZhciBkcmF3YWJsZTtcbiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBpZiAoIShcImNyZWF0ZUltYWdlQml0bWFwXCIgaW4gd2luZG93KSkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUltYWdlQml0bWFwKGJsb2IpO1xuXG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4O1xuICAgICAgICAgICAgcmV0dXJuIGJsb2JUb0ltZyhibG9iKTtcblxuICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHQuc2VudDtcblxuICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGRyYXdhYmxlID0gX2NvbnRleHQudDA7XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGRyYXdhYmxlVG9JbWFnZURhdGEoZHJhd2FibGUpKTtcblxuICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF9jYWxsZWUpO1xuICB9KSk7XG59XG5mdW5jdGlvbiBibG9iVG9JbWcoYmxvYikge1xuICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7XG4gICAgdmFyIHVybDtcbiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0Mikge1xuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTtcbiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDtcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVJbWFnZSh1cmwpO1xuXG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoXCJyZXR1cm5cIiwgX2NvbnRleHQyLnNlbnQpO1xuXG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA1O1xuICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5maW5pc2goNSk7XG5cbiAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfY2FsbGVlMiwgbnVsbCwgW1sxLCwgNSwgOF1dKTtcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVJbWFnZSh1cmwpIHtcbiAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkge1xuICAgIHZhciBpbWcsIGxvYWRlZDtcbiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0Mykge1xuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICBpbWcuZGVjb2RpbmcgPSBcImFzeW5jXCI7XG4gICAgICAgICAgICBpbWcuc3JjID0gdXJsO1xuICAgICAgICAgICAgbG9hZGVkID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgaW1nLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChFcnJvcihcIkltYWdlIGxvYWRpbmcgZXJyb3JcIikpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghaW1nLmRlY29kZSkge1xuICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDc7XG4gICAgICAgICAgICByZXR1cm4gaW1nLmRlY29kZSgpLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gOTtcbiAgICAgICAgICAgIHJldHVybiBsb2FkZWQ7XG5cbiAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdChcInJldHVyblwiLCBpbWcpO1xuXG4gICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF9jYWxsZWUzKTtcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBkcmF3YWJsZVRvSW1hZ2VEYXRhKGRyYXdhYmxlKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIF9vcHRzJHdpZHRoID0gb3B0cy53aWR0aCxcbiAgICAgIHdpZHRoID0gX29wdHMkd2lkdGggPT09IHZvaWQgMCA/IGRyYXdhYmxlLndpZHRoIDogX29wdHMkd2lkdGgsXG4gICAgICBfb3B0cyRoZWlnaHQgPSBvcHRzLmhlaWdodCxcbiAgICAgIGhlaWdodCA9IF9vcHRzJGhlaWdodCA9PT0gdm9pZCAwID8gZHJhd2FibGUuaGVpZ2h0IDogX29wdHMkaGVpZ2h0LFxuICAgICAgX29wdHMkc3ggPSBvcHRzLnN4LFxuICAgICAgc3ggPSBfb3B0cyRzeCA9PT0gdm9pZCAwID8gMCA6IF9vcHRzJHN4LFxuICAgICAgX29wdHMkc3kgPSBvcHRzLnN5LFxuICAgICAgc3kgPSBfb3B0cyRzeSA9PT0gdm9pZCAwID8gMCA6IF9vcHRzJHN5LFxuICAgICAgX29wdHMkc3cgPSBvcHRzLnN3LFxuICAgICAgc3cgPSBfb3B0cyRzdyA9PT0gdm9pZCAwID8gZHJhd2FibGUud2lkdGggOiBfb3B0cyRzdyxcbiAgICAgIF9vcHRzJHNoID0gb3B0cy5zaCxcbiAgICAgIHNoID0gX29wdHMkc2ggPT09IHZvaWQgMCA/IGRyYXdhYmxlLmhlaWdodCA6IF9vcHRzJHNoOyAvLyBNYWtlIGNhbnZhcyBzYW1lIHNpemUgYXMgaW1hZ2VcblxuICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgY2FudmFzLndpZHRoID0gd2lkdGg7XG4gIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7IC8vIERyYXcgaW1hZ2Ugb250byBjYW52YXNcblxuICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgaWYgKCFjdHgpIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBjcmVhdGUgY2FudmFzIGNvbnRleHRcIik7XG4gIGN0eC5kcmF3SW1hZ2UoZHJhd2FibGUsIHN4LCBzeSwgc3csIHNoLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgcmV0dXJuIGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG59XG4vKipcclxuICogRW5jb2RlIHNvbWUgaW1hZ2UgZGF0YSBpbiBhIGdpdmVuIGZvcm1hdCB1c2luZyB0aGUgYnJvd3NlcidzIGVuY29kZXJzXHJcbiAqXHJcbiAqIEBwYXJhbSB7SW1hZ2VEYXRhfSBkYXRhXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIEEgbWltZSB0eXBlLCBlZyBpbWFnZS9qcGVnLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gW3F1YWxpdHldIEJldHdlZW4gMC0xLlxyXG4gKi9cblxuZnVuY3Rpb24gY2FudmFzRW5jb2RlKGRhdGEsIHR5cGUsIHF1YWxpdHkpIHtcbiAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkge1xuICAgIHZhciBjYW52YXMsIGN0eCwgYmxvYiwgZGF0YVVybCwgcmVzdWx0LCBvdXRwdXRUeXBlLCBiaW5hcnlTdHIsIF9kYXRhLCBpO1xuXG4gICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAgICAgICBjYW52YXMud2lkdGggPSBkYXRhLndpZHRoO1xuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGRhdGEuaGVpZ2h0O1xuICAgICAgICAgICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcblxuICAgICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDY7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIkNhbnZhcyBub3QgaW5pdGlhbGl6ZWRcIik7XG5cbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICBjdHgucHV0SW1hZ2VEYXRhKGRhdGEsIDAsIDApO1xuXG4gICAgICAgICAgICBpZiAoIShcInRvQmxvYlwiIGluIGNhbnZhcykpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxMztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTA7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbnZhcy50b0Jsb2IociwgdHlwZSwgcXVhbGl0eSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICBibG9iID0gX2NvbnRleHQ0LnNlbnQ7XG4gICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDIyO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgLy8gV2VsY29tZSB0byBFZGdlLlxuICAgICAgICAgICAgLy8gVHlwZVNjcmlwdCB0aGlua3MgYGNhbnZhc2AgaXMgJ25ldmVyJywgc28gaXQgbmVlZHMgY2FzdGluZy5cbiAgICAgICAgICAgIGRhdGFVcmwgPSBjYW52YXMudG9EYXRhVVJMKHR5cGUsIHF1YWxpdHkpO1xuICAgICAgICAgICAgcmVzdWx0ID0gL2RhdGE6KFteO10rKTtiYXNlNjQsKC4qKSQvLmV4ZWMoZGF0YVVybCk7XG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxNztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiRGF0YSBVUkwgcmVhZGluZyBmYWlsZWRcIik7XG5cbiAgICAgICAgICBjYXNlIDE3OlxuICAgICAgICAgICAgb3V0cHV0VHlwZSA9IHJlc3VsdFsxXTtcbiAgICAgICAgICAgIGJpbmFyeVN0ciA9IGF0b2IocmVzdWx0WzJdKTtcbiAgICAgICAgICAgIF9kYXRhID0gbmV3IFVpbnQ4QXJyYXkoYmluYXJ5U3RyLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBfZGF0YS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICBfZGF0YVtpXSA9IGJpbmFyeVN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBibG9iID0gbmV3IEJsb2IoW19kYXRhXSwge1xuICAgICAgICAgICAgICB0eXBlOiBvdXRwdXRUeXBlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgICBpZiAoYmxvYikge1xuICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJFbmNvZGluZyBmYWlsZWRcIik7XG5cbiAgICAgICAgICBjYXNlIDI0OlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoXCJyZXR1cm5cIiwgYmxvYik7XG5cbiAgICAgICAgICBjYXNlIDI1OlxuICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgX2NhbGxlZTQpO1xuICB9KSk7XG59XG5mdW5jdGlvbiBkb3dubG9hZEltZyhmaWxlLCBuYW1lKSB7XG4gIHZhciB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xuICBjb25zb2xlLmxvZyhcImZtbiB0ZXN0IGRvd25sb2FkSW1nIHVybFwiLCB1cmwsIG5hbWUpO1xuICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICBhLmhyZWYgPSB1cmw7XG4gIGEuZG93bmxvYWQgPSBuYW1lO1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7XG4gIGUuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCB0cnVlLCBmYWxzZSwgd2luZG93LCAwLCAwLCAwLCAwLCAwLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbCk7XG4gIGEuZGlzcGF0Y2hFdmVudChlKTtcbiAgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVJbWFnZSQxKGJsb2IpIHtcbiAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDA7XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMztcbiAgICAgICAgICAgIHJldHVybiBuYXRpdmVEZWNvZGUoYmxvYik7XG5cbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIF9jb250ZXh0LnNlbnQpO1xuXG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDY7XG4gICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0W1wiY2F0Y2hcIl0oMCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImRlY29kZUltYWdlIGVyclwiLCBfY29udGV4dC50MCk7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIkNvdWxkbid0IGRlY29kZSBpbWFnZVwiKTtcblxuICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMCwgNl1dKTtcbiAgfSkpO1xufVxuXG52YXIgdHlwZSA9ICdicm93c2VyLXBuZyc7XG52YXIgbGFiZWwgPSAnQnJvd3NlciBQTkcnO1xudmFyIG1pbWVUeXBlID0gJ2ltYWdlL3BuZyc7XG52YXIgZXh0ZW5zaW9uID0gJ3BuZyc7XG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7fTtcblxudmFyIGJyb3dzZXJQTkcgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgdHlwZTogdHlwZSxcbiAgbGFiZWw6IGxhYmVsLFxuICBtaW1lVHlwZTogbWltZVR5cGUsXG4gIGV4dGVuc2lvbjogZXh0ZW5zaW9uLFxuICBkZWZhdWx0T3B0aW9uczogZGVmYXVsdE9wdGlvbnNcbn0pO1xuXG5mdW5jdGlvbiBlbmNvZGUoZGF0YSkge1xuICByZXR1cm4gY2FudmFzRW5jb2RlKGRhdGEsIG1pbWVUeXBlKTtcbn1cblxudmFyIHR5cGUkMSA9IFwiYnJvd3Nlci1qcGVnXCI7XG52YXIgbGFiZWwkMSA9IFwiQnJvd3NlciBKUEVHXCI7XG52YXIgbWltZVR5cGUkMSA9IFwiaW1hZ2UvanBlZ1wiO1xudmFyIGV4dGVuc2lvbiQxID0gXCJqcGdcIjtcbnZhciBkZWZhdWx0T3B0aW9ucyQxID0ge1xuICBxdWFsaXR5OiAwLjc1XG59O1xuXG52YXIgYnJvd3NlckpQRUcgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgdHlwZTogdHlwZSQxLFxuICBsYWJlbDogbGFiZWwkMSxcbiAgbWltZVR5cGU6IG1pbWVUeXBlJDEsXG4gIGV4dGVuc2lvbjogZXh0ZW5zaW9uJDEsXG4gIGRlZmF1bHRPcHRpb25zOiBkZWZhdWx0T3B0aW9ucyQxXG59KTtcblxuZnVuY3Rpb24gZW5jb2RlJDEoZGF0YSwgX3JlZikge1xuICB2YXIgcXVhbGl0eSA9IF9yZWYucXVhbGl0eTtcbiAgcmV0dXJuIGNhbnZhc0VuY29kZShkYXRhLCBtaW1lVHlwZSQxLCBxdWFsaXR5KTtcbn1cblxudmFyIHR5cGUkMiA9IFwiYnJvd3Nlci13ZWJwXCI7XG52YXIgbGFiZWwkMiA9IFwiQnJvd3NlciBXZWJQXCI7XG52YXIgbWltZVR5cGUkMiA9IFwiaW1hZ2Uvd2VicFwiO1xudmFyIGV4dGVuc2lvbiQyID0gXCJ3ZWJwXCI7XG52YXIgZGVmYXVsdE9wdGlvbnMkMiA9IHtcbiAgcXVhbGl0eTogMC43NVxufTtcblxudmFyIGJyb3dzZXJXZWJQID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIHR5cGU6IHR5cGUkMixcbiAgbGFiZWw6IGxhYmVsJDIsXG4gIG1pbWVUeXBlOiBtaW1lVHlwZSQyLFxuICBleHRlbnNpb246IGV4dGVuc2lvbiQyLFxuICBkZWZhdWx0T3B0aW9uczogZGVmYXVsdE9wdGlvbnMkMlxufSk7XG5cbmZ1bmN0aW9uIGVuY29kZSQyKGRhdGEsIF9yZWYpIHtcbiAgdmFyIHF1YWxpdHkgPSBfcmVmLnF1YWxpdHk7XG4gIHJldHVybiBjYW52YXNFbmNvZGUoZGF0YSwgbWltZVR5cGUkMiwgcXVhbGl0eSk7XG59XG5cbmZ1bmN0aW9uIGJyb3dzZXJQbmdFbmNvZGUoZGF0YSkge1xuICByZXR1cm4gZW5jb2RlKGRhdGEpO1xufVxuXG5mdW5jdGlvbiBicm93c2VySnBlZ0VuY29kZShkYXRhLCBvcHRzKSB7XG4gIHJldHVybiBlbmNvZGUkMShkYXRhLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gYnJvd3NlcldlYnBFbmNvZGUoZGF0YSwgb3B0cykge1xuICByZXR1cm4gZW5jb2RlJDIoZGF0YSwgb3B0cyk7XG59XG5cbnZhciBfZW5jb2Rlck1hcDtcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzk1NTE1NDYvXG5cbnZhciBGaWxlaXNoID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmxvYikge1xuICBfaW5oZXJpdHMoRmlsZWlzaCwgX0Jsb2IpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRmlsZWlzaCk7XG5cbiAgZnVuY3Rpb24gRmlsZWlzaChkYXRhLCBuYW1lLCBvcHRzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpbGVpc2gpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkYXRhLCBvcHRzKTtcbiAgICBfdGhpcy5uYW1lID0gbmFtZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gRmlsZWlzaDtcbn0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEJsb2IpKTtcbnZhciBlbmNvZGVyTWFwID0gKF9lbmNvZGVyTWFwID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfZW5jb2Rlck1hcCwgdHlwZSwgYnJvd3NlclBORyksIF9kZWZpbmVQcm9wZXJ0eShfZW5jb2Rlck1hcCwgdHlwZSQxLCBicm93c2VySlBFRyksIF9kZWZpbmVQcm9wZXJ0eShfZW5jb2Rlck1hcCwgdHlwZSQyLCBicm93c2VyV2ViUCksIF9lbmNvZGVyTWFwKTtcblxudmFyIGNvbXByZXNzID0gZnVuY3Rpb24gY29tcHJlc3MoaW1hZ2UsIGVuY29kZURhdGEsIHNvdXJjZUZpbGVuYW1lKSB7XG4gIHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgdmFyIGRlY29kZWQsIGNvbXByZXNzZWREYXRhLCBlbmNvZGVyO1xuICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZm1uIHRlc3QgY29tcHJlc3NcIiwgaW1hZ2UsIGVuY29kZURhdGEsIHNvdXJjZUZpbGVuYW1lKTtcbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzO1xuICAgICAgICAgICAgcmV0dXJuIGRlY29kZUltYWdlJDEoaW1hZ2UpO1xuXG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgZGVjb2RlZCA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImRlY29kZWRcIiwgZGVjb2RlZCk7XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNztcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZW5jb2RlRGF0YS50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSB0eXBlOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXJQbmdFbmNvZGUoZGVjb2RlZCk7XG5cbiAgICAgICAgICAgICAgICBjYXNlIHR5cGUkMTpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBicm93c2VySnBlZ0VuY29kZShkZWNvZGVkLCBlbmNvZGVEYXRhLm9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSB0eXBlJDI6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYnJvd3NlcldlYnBFbmNvZGUoZGVjb2RlZCwgZW5jb2RlRGF0YS5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICAvLyBjYXNlIGJyb3dzZXJHSUYudHlwZTogcmV0dXJuIHByb2Nlc3Nvci5icm93c2VyR2lmRW5jb2RlKGRlY29kZWQpO1xuICAgICAgICAgICAgICAgIC8vIGNhc2UgYnJvd3NlclRJRkYudHlwZTogcmV0dXJuIHByb2Nlc3Nvci5icm93c2VyVGlmZkVuY29kZShkZWNvZGVkKTtcbiAgICAgICAgICAgICAgICAvLyBjYXNlIGJyb3dzZXJKUDIudHlwZTogcmV0dXJuIHByb2Nlc3Nvci5icm93c2VySnAyRW5jb2RlKGRlY29kZWQpO1xuICAgICAgICAgICAgICAgIC8vIGNhc2UgYnJvd3NlckJNUC50eXBlOiByZXR1cm4gcHJvY2Vzc29yLmJyb3dzZXJCbXBFbmNvZGUoZGVjb2RlZCk7XG4gICAgICAgICAgICAgICAgLy8gY2FzZSBicm93c2VyUERGLnR5cGU6IHJldHVybiBwcm9jZXNzb3IuYnJvd3NlclBkZkVuY29kZShkZWNvZGVkKTtcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIlVuZXhwZWN0ZWQgZW5jb2RlciBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoZW5jb2RlRGF0YSkpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgY29tcHJlc3NlZERhdGEgPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgZW5jb2RlciA9IGVuY29kZXJNYXBbZW5jb2RlRGF0YS50eXBlXTtcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgbmV3IEZpbGVpc2goW2NvbXByZXNzZWREYXRhXSwgc291cmNlRmlsZW5hbWUucmVwbGFjZSgvLlteLl0qJC8sIFwiLlwiLmNvbmNhdChlbmNvZGVyLmV4dGVuc2lvbikpLCB7XG4gICAgICAgICAgICAgIHR5cGU6IGVuY29kZXIubWltZVR5cGVcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF9jYWxsZWUpO1xuICB9KSk7XG59O1xuXG5leHBvcnQgeyBjb21wcmVzcywgZG93bmxvYWRJbWcgfTtcbiJdLCJuYW1lcyI6WyJfaXNPYmplY3QiLCJpdCIsIl9hbk9iamVjdCIsIlR5cGVFcnJvciIsIl9kZWZpbmVkIiwidW5kZWZpbmVkIiwiX3RvT2JqZWN0IiwiT2JqZWN0IiwiY2VpbCIsIk1hdGgiLCJmbG9vciIsIl90b0ludGVnZXIiLCJpc05hTiIsIm1pbiIsIl90b0xlbmd0aCIsImF0IiwidGhhdCIsInBvcyIsImEiLCJiIiwicyIsIlN0cmluZyIsImkiLCJsIiwibGVuZ3RoIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsInNsaWNlIiwiX2FkdmFuY2VTdHJpbmdJbmRleCIsIlMiLCJpbmRleCIsInVuaWNvZGUiLCJ0b1N0cmluZyIsIl9jb2YiLCJjYWxsIiwiY3JlYXRlQ29tbW9uanNNb2R1bGUiLCJmbiIsImJhc2VkaXIiLCJtb2R1bGUiLCJwYXRoIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJiYXNlIiwiRXJyb3IiLCJjb21tb25qc1JlcXVpcmUiLCJyZTEiLCJyZTIiLCJfY29yZSIsImNvcmUiLCJ2ZXJzaW9uIiwiX19lIiwiX2dsb2JhbCIsImdsb2JhbCIsIndpbmRvdyIsInNlbGYiLCJGdW5jdGlvbiIsIl9fZyIsIl9zaGFyZWQiLCJTSEFSRUQiLCJzdG9yZSIsImtleSIsInZhbHVlIiwicHVzaCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJpZCIsInB4IiwicmFuZG9tIiwiX3VpZCIsImNvbmNhdCIsIl93a3MiLCJTeW1ib2wiLCJVU0VfU1lNQk9MIiwibmFtZSIsIlRBRyIsIkFSRyIsImFyZ3VtZW50cyIsIl9jbGFzc29mIiwiTyIsIlQiLCJCIiwiZSIsInRyeUdldCIsImNhbGxlZSIsImJ1aWx0aW5FeGVjIiwiUmVnRXhwIiwicHJvdG90eXBlIiwiZXhlYyIsIl9yZWdleHBFeGVjQWJzdHJhY3QiLCJSIiwicmVzdWx0IiwiX2ZsYWdzIiwidGhpcyIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJzdGlja3kiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInJlcGxhY2UiLCJwYXRjaGVkRXhlYyIsIkxBU1RfSU5ERVgiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJOUENHX0lOQ0xVREVEIiwic3RyIiwibGFzdEluZGV4IiwicmVDb3B5IiwibWF0Y2giLCJyZSIsInNvdXJjZSIsIl9yZWdleHBFeGVjIiwiX2ZhaWxzIiwiX2Rlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJkb2N1bWVudCQxIiwiZG9jdW1lbnQiLCJpcyIsImNyZWF0ZUVsZW1lbnQiLCJfZG9tQ3JlYXRlIiwiX2llOERvbURlZmluZSIsIl90b1ByaW1pdGl2ZSIsInZhbCIsInZhbHVlT2YiLCJkUCIsIl9vYmplY3REcCIsImYiLCJQIiwiQXR0cmlidXRlcyIsIl9wcm9wZXJ0eURlc2MiLCJiaXRtYXAiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfaGlkZSIsIm9iamVjdCIsImhhc093blByb3BlcnR5IiwiX2hhcyIsIl9mdW5jdGlvblRvU3RyaW5nIiwiX3JlZGVmaW5lIiwiU1JDIiwiVE9fU1RSSU5HIiwiVFBMIiwic3BsaXQiLCJpbnNwZWN0U291cmNlIiwic2FmZSIsImlzRnVuY3Rpb24iLCJqb2luIiwiX2FGdW5jdGlvbiIsIl9jdHgiLCJjIiwiYXBwbHkiLCJQUk9UT1RZUEUiLCIkZXhwb3J0IiwidHlwZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiSVNfUFJPVE8iLCJJU19CSU5EIiwidGFyZ2V0IiwiZXhwUHJvdG8iLCJVIiwiVyIsIl9leHBvcnQiLCJwcm90byIsImZvcmNlZCIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwiZ3JvdXBzIiwibWF4Iiwib3JpZ2luYWxFeGVjIiwibWluJDEiLCJmbG9vciQxIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsIl9nZXRQcm90b3R5cGVPZiIsIm8iLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX3NldFByb3RvdHlwZU9mIiwicCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwiRGF0ZSIsIl9jb25zdHJ1Y3QiLCJQYXJlbnQiLCJhcmdzIiwiQ2xhc3MiLCJpbnN0YW5jZSIsImJpbmQiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiX2NhY2hlIiwiTWFwIiwiaW5kZXhPZiIsImhhcyIsInNldCIsIldyYXBwZXIiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsIktFWSIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJmbnMiLCJkZWZpbmVkIiwiUkVQTEFDRSIsIiRyZXBsYWNlIiwibWF5YmVDYWxsTmF0aXZlIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJyZWdleHAiLCJyZXMiLCJkb25lIiwicngiLCJmdW5jdGlvbmFsUmVwbGFjZSIsImZ1bGxVbmljb2RlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsInBvc2l0aW9uIiwiY2FwdHVyZXMiLCJqIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VyQXJncyIsInJlcGxhY2VtZW50IiwiZ2V0U3Vic3RpdHV0aW9uIiwidGFpbFBvcyIsIm0iLCJzeW1ib2xzIiwiY2giLCJjYXB0dXJlIiwibiIsIm5hdGl2ZU1ldGhvZCIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmZuIiwicnhmbiIsInN0cmluZyIsImFyZyIsIl9maXhSZVdrcyIsInJ1bnRpbWUiLCJ1bmRlZmluZWQkMSIsIk9wIiwiaGFzT3duIiwiJFN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiaXRlcmF0b3IiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlcnIiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY29udGV4dCIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwibWV0aG9kIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwicmVzb2x2ZSIsInJlamVjdCIsIl9fYXdhaXQiLCJ0aGVuIiwidW53cmFwcGVkIiwiZXJyb3IiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJpdGVyIiwia2V5cyIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiZFAkMSIsIkZQcm90byIsIm5hbWVSRSIsIk5BTUUiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsImZ1bGZpbGxlZCIsInN0ZXAiLCJyZWplY3RlZCIsIlR5cGVkIiwiVFlQRUQiLCJWSUVXIiwiQUJWIiwiQXJyYXlCdWZmZXIiLCJEYXRhVmlldyIsIkNPTlNUUiIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMiLCJfdHlwZWQiLCJfcmVkZWZpbmVBbGwiLCJzcmMiLCJfYW5JbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJfdG9JbmRleCIsIm51bWJlciIsIlJhbmdlRXJyb3IiLCJfaW9iamVjdCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX3RvSW9iamVjdCIsIm1heCQxIiwibWluJDIiLCJfdG9BYnNvbHV0ZUluZGV4IiwiX2FycmF5SW5jbHVkZXMiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJzaGFyZWQiLCJfc2hhcmVkS2V5IiwiYXJyYXlJbmRleE9mIiwiSUVfUFJPVE8iLCJfb2JqZWN0S2V5c0ludGVybmFsIiwibmFtZXMiLCJfZW51bUJ1Z0tleXMiLCJoaWRkZW5LZXlzIiwiX29iamVjdEdvcG4iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX2FycmF5RmlsbCIsImFMZW4iLCJlbmQiLCJlbmRQb3MiLCJkZWYiLCJUQUckMSIsIl9zZXRUb1N0cmluZ1RhZyIsInRhZyIsInN0YXQiLCJfdHlwZWRCdWZmZXIiLCJnT1BOIiwiQVJSQVlfQlVGRkVSIiwiREFUQV9WSUVXIiwiV1JPTkdfSU5ERVgiLCIkQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJJbmZpbml0eSIsIkJhc2VCdWZmZXIiLCJhYnMiLCJwb3ciLCJsb2ciLCJMTjIiLCJCVUZGRVIiLCJCWVRFX0xFTkdUSCIsIkJZVEVfT0ZGU0VUIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwiYnVmZmVyIiwiQXJyYXkiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJOYU4iLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJhZGRHZXR0ZXIiLCJDIiwiaW50ZXJuYWwiLCJ2aWV3IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsIl9iIiwic3RhcnQiLCJwYWNrIiwiY29udmVyc2lvbiIsIkFycmF5QnVmZmVyUHJvdG8iLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4IiwiYnl0ZU9mZnNldCIsInNldFVpbnQ4IiwiYnl0ZUxlbmd0aCIsImJ1ZmZlckxlbmd0aCIsIm9mZnNldCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwiX2l0ZXJhdG9ycyIsIklURVJBVE9SIiwiQXJyYXlQcm90byIsIl9pc0FycmF5SXRlciIsIl9vYmplY3RLZXlzIiwiX29iamVjdERwcyIsImRlZmluZVByb3BlcnRpZXMiLCJQcm9wZXJ0aWVzIiwiZG9jdW1lbnQkMiIsIl9odG1sIiwiZG9jdW1lbnRFbGVtZW50IiwiSUVfUFJPVE8kMSIsIkVtcHR5IiwiUFJPVE9UWVBFJDEiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiX29iamVjdENyZWF0ZSIsIklFX1BST1RPJDIiLCJPYmplY3RQcm90byIsIl9vYmplY3RHcG8iLCJJVEVSQVRPUiQxIiwiY29yZV9nZXRJdGVyYXRvck1ldGhvZCIsImdldEl0ZXJhdG9yTWV0aG9kIiwiX2lzQXJyYXkiLCJpc0FycmF5IiwiU1BFQ0lFUyQxIiwiX2FycmF5U3BlY2llc0NyZWF0ZSIsIm9yaWdpbmFsIiwiX2FycmF5TWV0aG9kcyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiY2FsbGJhY2tmbiIsIlNQRUNJRVMkMiIsIl9zcGVjaWVzQ29uc3RydWN0b3IiLCJEIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvJDEiLCJfYWRkVG9VbnNjb3BhYmxlcyIsIl9pdGVyU3RlcCIsIl9pdGVyQ3JlYXRlIiwiSVRFUkFUT1IkMiIsIkJVR0dZIiwiS0VZUyIsIlZBTFVFUyIsInJldHVyblRoaXMiLCJlczZfYXJyYXlfaXRlcmF0b3IiLCJCYXNlIiwiREVGQVVMVCIsIl90Iiwia2luZCIsIl9rIiwiX2kiLCJtZXRob2RzIiwiZ2V0TWV0aG9kIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsImVudHJpZXMiLCJfaXRlckRlZmluZSIsIml0ZXJhdGVkIiwiQXJndW1lbnRzIiwiSVRFUkFUT1IkMyIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwiZnJvbSIsIl9pdGVyRGV0ZWN0Iiwic2tpcENsb3NpbmciLCJhcnIiLCJTUEVDSUVTJDMiLCJfc2V0U3BlY2llcyIsIl9hcnJheUNvcHlXaXRoaW4iLCJjb3B5V2l0aGluIiwibGVuIiwidG8iLCJjb3VudCIsImluYyIsIl9vYmplY3RQaWUiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX29iamVjdEdvcGQiLCJfdHlwZWRBcnJheSIsImZhaWxzIiwiJHR5cGVkIiwiJGJ1ZmZlciIsImN0eCIsImFuSW5zdGFuY2UiLCJwcm9wZXJ0eURlc2MiLCJoaWRlIiwicmVkZWZpbmVBbGwiLCJ0b0ludGVnZXIiLCJ0b0xlbmd0aCIsInRvSW5kZXgiLCJ0b0Fic29sdXRlSW5kZXgiLCJ0b1ByaW1pdGl2ZSIsImNsYXNzb2YiLCJpc09iamVjdCIsInRvT2JqZWN0IiwiaXNBcnJheUl0ZXIiLCJnZXRJdGVyRm4iLCJ1aWQiLCJ3a3MiLCJjcmVhdGVBcnJheU1ldGhvZCIsImNyZWF0ZUFycmF5SW5jbHVkZXMiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJBcnJheUl0ZXJhdG9ycyIsIkl0ZXJhdG9ycyIsIiRpdGVyRGV0ZWN0Iiwic2V0U3BlY2llcyIsImFycmF5RmlsbCIsImFycmF5Q29weVdpdGhpbiIsIiREUCIsIiRHT1BEIiwiVWludDhBcnJheSIsIlNIQVJFRF9CVUZGRVIiLCJCWVRFU19QRVJfRUxFTUVOVCIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5VmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwiYXJyYXlMYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyYXlSZWR1Y2UiLCJyZWR1Y2UiLCJhcnJheVJlZHVjZVJpZ2h0IiwicmVkdWNlUmlnaHQiLCJhcnJheUpvaW4iLCJhcnJheVNvcnQiLCJzb3J0IiwiYXJyYXlTbGljZSIsImFycmF5VG9TdHJpbmciLCJhcnJheVRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJUWVBFRF9DT05TVFJVQ1RPUiIsIkRFRl9DT05TVFJVQ1RPUiIsIkFMTF9DT05TVFJVQ1RPUlMiLCJUWVBFRF9BUlJBWSIsIldST05HX0xFTkdUSCIsIiRtYXAiLCJhbGxvY2F0ZSIsIkxJVFRMRV9FTkRJQU4iLCJVaW50MTZBcnJheSIsIkZPUkNFRF9TRVQiLCJ0b09mZnNldCIsIkJZVEVTIiwidmFsaWRhdGUiLCJzcGVjaWVzRnJvbUxpc3QiLCJsaXN0IiwiZnJvbUxpc3QiLCJfZCIsIiRmcm9tIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlckZuIiwiJG9mIiwiVE9fTE9DQUxFX0JVRyIsIiR0b0xvY2FsZVN0cmluZyIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJzZWFyY2hFbGVtZW50IiwiaW5jbHVkZXMiLCJzZXBhcmF0b3IiLCJtYXAiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsIiRiZWdpbiIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCIkVHlwZWRBcnJheVByb3RvdHlwZSQiLCJ3cmFwcGVyIiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIlR5cGVkQXJyYXkiLCJUQUMiLCJGT1JDRUQiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiYWRkRWxlbWVudCIsImRhdGEiLCJ2IiwiZ2V0dGVyIiwicm91bmQiLCJzZXR0ZXIiLCIkb2Zmc2V0IiwiJGxlbmd0aCIsImtsYXNzIiwiJGxlbiIsIiRuYXRpdmVJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwiJGl0ZXJhdG9yIiwib2YiLCJpbml0IiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsIl9pdGVyQ2FsbCIsInJldCIsIl9mb3JPZiIsIkJSRUFLIiwiUkVUVVJOIiwicHJvY2VzcyIsInNldFRhc2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhclRhc2siLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJPTlJFQURZU1RBVEVDSEFOR0UiLCJydW4iLCJsaXN0ZW5lciIsImV2ZW50IiwibmV4dFRpY2siLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsIl90YXNrIiwiY2xlYXIiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwicHJvY2VzcyQxIiwiUHJvbWlzZSQxIiwiaXNOb2RlIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlIiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiX25ld1Byb21pc2VDYXBhYmlsaXR5IiwiX3BlcmZvcm0iLCJuYXZpZ2F0b3IiLCJfdXNlckFnZW50IiwidXNlckFnZW50IiwidGFzayIsIm1pY3JvdGFzayIsImhlYWQiLCJsYXN0Iiwibm90aWZ5IiwiZmx1c2giLCJwYXJlbnQiLCJkb21haW4iLCJleGl0IiwiZW50ZXIiLCJzdGFuZGFsb25lIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJfbWljcm90YXNrIiwiUFJPTUlTRSIsIlR5cGVFcnJvciQxIiwicHJvY2VzcyQyIiwidmVyc2lvbnMiLCJ2OCIsIiRQcm9taXNlIiwiaXNOb2RlJDEiLCJlbXB0eSIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwiVVNFX05BVElWRSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0IiwiX24iLCJjaGFpbiIsIl9jIiwiX3YiLCJvayIsIl9zIiwicmVhY3Rpb24iLCJleGl0ZWQiLCJoYW5kbGVyIiwiZmFpbCIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsImNvbnNvbGUiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsInIiLCJjYXBhYmlsaXR5IiwieCIsInByb21pc2VDYXBhYmlsaXR5IiwiX3Byb21pc2VSZXNvbHZlIiwiYWxsIiwicmVtYWluaW5nIiwiJGluZGV4IiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCJ0ZXN0IiwibmF0aXZlRGVjb2RlIiwiYmxvYiIsIl9jYWxsZWUiLCJkcmF3YWJsZSIsIl9jb250ZXh0IiwiY3JlYXRlSW1hZ2VCaXRtYXAiLCJ0MCIsImJsb2JUb0ltZyIsImRyYXdhYmxlVG9JbWFnZURhdGEiLCJfY2FsbGVlMiIsInVybCIsIl9jb250ZXh0MiIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImRlY29kZUltYWdlIiwicmV2b2tlT2JqZWN0VVJMIiwiX2NhbGxlZTMiLCJpbWciLCJsb2FkZWQiLCJfY29udGV4dDMiLCJJbWFnZSIsImRlY29kaW5nIiwib25sb2FkIiwib25lcnJvciIsImRlY29kZSIsImNhdGNoIiwib3B0cyIsIl9vcHRzJHdpZHRoIiwid2lkdGgiLCJfb3B0cyRoZWlnaHQiLCJoZWlnaHQiLCJfb3B0cyRzeCIsInN4IiwiX29wdHMkc3kiLCJzeSIsIl9vcHRzJHN3Iiwic3ciLCJfb3B0cyRzaCIsInNoIiwiY2FudmFzIiwiZ2V0Q29udGV4dCIsImRyYXdJbWFnZSIsImdldEltYWdlRGF0YSIsImNhbnZhc0VuY29kZSIsInF1YWxpdHkiLCJfY2FsbGVlNCIsImRhdGFVcmwiLCJvdXRwdXRUeXBlIiwiYmluYXJ5U3RyIiwiX2RhdGEiLCJfY29udGV4dDQiLCJwdXRJbWFnZURhdGEiLCJ0b0Jsb2IiLCJ0b0RhdGFVUkwiLCJhdG9iIiwiQmxvYiIsImRlY29kZUltYWdlJDEiLCJfZW5jb2Rlck1hcCIsIm1pbWVUeXBlIiwiYnJvd3NlclBORyIsImZyZWV6ZSIsImxhYmVsIiwiZXh0ZW5zaW9uIiwiZGVmYXVsdE9wdGlvbnMiLCJ0eXBlJDEiLCJtaW1lVHlwZSQxIiwiYnJvd3NlckpQRUciLCJ0eXBlJDIiLCJtaW1lVHlwZSQyIiwiYnJvd3NlcldlYlAiLCJicm93c2VySnBlZ0VuY29kZSIsIl9yZWYiLCJlbmNvZGUkMSIsImJyb3dzZXJXZWJwRW5jb2RlIiwiZW5jb2RlJDIiLCJGaWxlaXNoIiwiX0Jsb2IiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfaW5oZXJpdHMiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9zdXBlciIsIlN1cGVyIiwiTmV3VGFyZ2V0IiwiUmVmZXJlbmNlRXJyb3IiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfdGhpcyIsIl9jbGFzc0NhbGxDaGVjayIsImVuY29kZXJNYXAiLCJjb21wcmVzcyIsImltYWdlIiwiZW5jb2RlRGF0YSIsInNvdXJjZUZpbGVuYW1lIiwiZGVjb2RlZCIsImNvbXByZXNzZWREYXRhIiwiZW5jb2RlciIsImVuY29kZSIsIm9wdGlvbnMiLCJKU09OIiwic3RyaW5naWZ5Il0sInNvdXJjZVJvb3QiOiIifQ==