/*! For license information please see 549.bundle.js.LICENSE.txt */
(self.webpackChunkgithub_page=self.webpackChunkgithub_page||[]).push([[549],{3807:function(e){e.exports=function(){"use strict";function e(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function t(t){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?e(Object(a),!0).forEach((function(e){i(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):e(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function r(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,n(i.key),i)}}function i(e,t,r){return(t=n(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(){return a=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i])}return e},a.apply(this,arguments)}function n(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,t||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}var o={exports:{}};!function(e){"undefined"!=typeof window&&function(t){var r=t.HTMLCanvasElement&&t.HTMLCanvasElement.prototype,i=t.Blob&&function(){try{return Boolean(new Blob)}catch(e){return!1}}(),a=i&&t.Uint8Array&&function(){try{return 100===new Blob([new Uint8Array(100)]).size}catch(e){return!1}}(),n=t.BlobBuilder||t.WebKitBlobBuilder||t.MozBlobBuilder||t.MSBlobBuilder,o=/^data:((.*?)(;charset=.*?)?)(;base64)?,/,l=(i||n)&&t.atob&&t.ArrayBuffer&&t.Uint8Array&&function(e){var t,r,l,s,u,c,h,f,d;if(!(t=e.match(o)))throw new Error("invalid data URI");for(r=t[2]?t[1]:"text/plain"+(t[3]||";charset=US-ASCII"),l=!!t[4],s=e.slice(t[0].length),u=l?atob(s):decodeURIComponent(s),c=new ArrayBuffer(u.length),h=new Uint8Array(c),f=0;f<u.length;f+=1)h[f]=u.charCodeAt(f);return i?new Blob([a?h:c],{type:r}):((d=new n).append(c),d.getBlob(r))};t.HTMLCanvasElement&&!r.toBlob&&(r.mozGetAsFile?r.toBlob=function(e,t,i){var a=this;setTimeout((function(){i&&r.toDataURL&&l?e(l(a.toDataURL(t,i))):e(a.mozGetAsFile("blob",t))}))}:r.toDataURL&&l&&(r.msToBlob?r.toBlob=function(e,t,i){var a=this;setTimeout((function(){(t&&"image/png"!==t||i)&&r.toDataURL&&l?e(l(a.toDataURL(t,i))):e(a.msToBlob(t))}))}:r.toBlob=function(e,t,r){var i=this;setTimeout((function(){e(l(i.toDataURL(t,r)))}))})),e.exports?e.exports=l:t.dataURLtoBlob=l}(window)}(o);var l=o.exports,s={strict:!0,checkOrientation:!0,retainExif:!1,maxWidth:1/0,maxHeight:1/0,minWidth:0,minHeight:0,width:void 0,height:void 0,resize:"none",quality:.8,mimeType:"auto",convertTypes:["image/png"],convertSize:5e6,beforeDraw:null,drew:null,success:null,error:null},u="undefined"!=typeof window&&void 0!==window.document?window:{},c=function(e){return e>0&&e<1/0},h=Array.prototype.slice;function f(e){return Array.from?Array.from(e):h.call(e)}var d=/^image\/.+$/;function p(e){return d.test(e)}var v=String.fromCharCode;var m=u.btoa;function b(e,t){for(var r=[],i=new Uint8Array(e);i.length>0;)r.push(v.apply(null,f(i.subarray(0,8192)))),i=i.subarray(8192);return"data:".concat(t,";base64,").concat(m(r.join("")))}function g(e){var t,r=new DataView(e);try{var i,a,n;if(255===r.getUint8(0)&&216===r.getUint8(1))for(var o=r.byteLength,l=2;l+1<o;){if(255===r.getUint8(l)&&225===r.getUint8(l+1)){a=l;break}l+=1}if(a){var s=a+10;if("Exif"===function(e,t,r){var i,a="";for(r+=t,i=t;i<r;i+=1)a+=v(e.getUint8(i));return a}(r,a+4,4)){var u=r.getUint16(s);if(((i=18761===u)||19789===u)&&42===r.getUint16(s+2,i)){var c=r.getUint32(s+4,i);c>=8&&(n=s+c)}}}if(n){var h,f,d=r.getUint16(n,i);for(f=0;f<d;f+=1)if(h=n+12*f+2,274===r.getUint16(h,i)){h+=8,t=r.getUint16(h,i),r.setUint16(h,1,i);break}}}catch(e){t=1}return t}var y=/\.\d*(?:0|9){12}\d*$/;function w(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e11;return y.test(e)?Math.round(e*t)/t:e}function k(e){var t=e.aspectRatio,r=e.height,i=e.width,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"none",n=c(i),o=c(r);if(n&&o){var l=r*t;("contain"===a||"none"===a)&&l>i||"cover"===a&&l<i?r=i/t:i=r*t}else n?r=i/t:o&&(i=r*t);return{width:i,height:r}}var x=u.ArrayBuffer,U=u.FileReader,L=u.URL||u.webkitURL,B=/\.\w+$/,O=u.Compressor;return function(){function e(r,i){(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,e),this.file=r,this.exif=[],this.image=new Image,this.options=t(t({},s),i),this.aborted=!1,this.result=null,this.init()}return i=e,o=[{key:"noConflict",value:function(){return window.Compressor=O,e}},{key:"setDefaults",value:function(e){a(s,e)}}],(n=[{key:"init",value:function(){var e,t=this,r=this.file,i=this.options;if(e=r,"undefined"!=typeof Blob&&(e instanceof Blob||"[object Blob]"===Object.prototype.toString.call(e))){var n=r.type;if(p(n))if(L&&U){x||(i.checkOrientation=!1,i.retainExif=!1);var o="image/jpeg"===n,l=o&&i.checkOrientation,s=o&&i.retainExif;if(!L||l||s){var u=new U;this.reader=u,u.onload=function(e){var i=e.target.result,o={},u=1;l&&(u=g(i))>1&&a(o,function(e){var t=0,r=1,i=1;switch(e){case 2:r=-1;break;case 3:t=-180;break;case 4:i=-1;break;case 5:t=90,i=-1;break;case 6:t=90;break;case 7:t=90,r=-1;break;case 8:t=-90}return{rotate:t,scaleX:r,scaleY:i}}(u)),s&&(t.exif=function(e){for(var t=f(new Uint8Array(e)),r=t.length,i=[],a=0;a+3<r;){var n=t[a],o=t[a+1];if(255===n&&218===o)break;if(255===n&&216===o)a+=2;else{var l=a+(256*t[a+2]+t[a+3])+2,s=t.slice(a,l);i.push(s),a=l}}return i.reduce((function(e,t){return 255===t[0]&&225===t[1]?e.concat(t):e}),[])}(i)),o.url=l||s?!L||u>1?b(i,n):L.createObjectURL(r):i,t.load(o)},u.onabort=function(){t.fail(new Error("Aborted to read the image with FileReader."))},u.onerror=function(){t.fail(new Error("Failed to read the image with FileReader."))},u.onloadend=function(){t.reader=null},l||s?u.readAsArrayBuffer(r):u.readAsDataURL(r)}else this.load({url:L.createObjectURL(r)})}else this.fail(new Error("The current browser does not support image compression."));else this.fail(new Error("The first argument must be an image File or Blob object."))}else this.fail(new Error("The first argument must be a File or Blob object."))}},{key:"load",value:function(e){var r=this,i=this.file,a=this.image;a.onload=function(){r.draw(t(t({},e),{},{naturalWidth:a.naturalWidth,naturalHeight:a.naturalHeight}))},a.onabort=function(){r.fail(new Error("Aborted to load the image."))},a.onerror=function(){r.fail(new Error("Failed to load the image."))},u.navigator&&/(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(u.navigator.userAgent)&&(a.crossOrigin="anonymous"),a.alt=i.name,a.src=e.url}},{key:"draw",value:function(e){var t=this,r=e.naturalWidth,i=e.naturalHeight,a=e.rotate,n=void 0===a?0:a,o=e.scaleX,s=void 0===o?1:o,u=e.scaleY,h=void 0===u?1:u,d=this.file,v=this.image,m=this.options,g=document.createElement("canvas"),y=g.getContext("2d"),x=Math.abs(n)%180==90,L=("contain"===m.resize||"cover"===m.resize)&&c(m.width)&&c(m.height),B=Math.max(m.maxWidth,0)||1/0,O=Math.max(m.maxHeight,0)||1/0,j=Math.max(m.minWidth,0)||0,R=Math.max(m.minHeight,0)||0,A=r/i,E=m.width,T=m.height;if(x){var M=[O,B];B=M[0],O=M[1];var z=[R,j];j=z[0],R=z[1];var C=[T,E];E=C[0],T=C[1]}L&&(A=E/T);var D=k({aspectRatio:A,width:B,height:O},"contain");B=D.width,O=D.height;var F=k({aspectRatio:A,width:j,height:R},"cover");if(j=F.width,R=F.height,L){var P=k({aspectRatio:A,width:E,height:T},m.resize);E=P.width,T=P.height}else{var H=k({aspectRatio:A,width:E,height:T}),S=H.width;E=void 0===S?r:S;var W=H.height;T=void 0===W?i:W}var I=-(E=Math.floor(w(Math.min(Math.max(E,j),B))))/2,K=-(T=Math.floor(w(Math.min(Math.max(T,R),O))))/2,_=E,q=T,V=[];if(L){var X,J,$,G,Y=k({aspectRatio:A,width:r,height:i},{contain:"cover",cover:"contain"}[m.resize]);$=Y.width,G=Y.height,X=(r-$)/2,J=(i-G)/2,V.push(X,J,$,G)}if(V.push(I,K,_,q),x){var N=[T,E];E=N[0],T=N[1]}g.width=E,g.height=T,p(m.mimeType)||(m.mimeType=d.type);var Q="transparent";d.size>m.convertSize&&m.convertTypes.indexOf(m.mimeType)>=0&&(m.mimeType="image/jpeg");var Z="image/jpeg"===m.mimeType;if(Z&&(Q="#fff"),y.fillStyle=Q,y.fillRect(0,0,E,T),m.beforeDraw&&m.beforeDraw.call(this,y,g),!this.aborted&&(y.save(),y.translate(E/2,T/2),y.rotate(n*Math.PI/180),y.scale(s,h),y.drawImage.apply(y,[v].concat(V)),y.restore(),m.drew&&m.drew.call(this,y,g),!this.aborted)){var ee=function(e){if(!t.aborted){var a=function(e){return t.done({naturalWidth:r,naturalHeight:i,result:e})};if(e&&Z&&m.retainExif&&t.exif&&t.exif.length>0){var n=function(e){return a(l(b(function(e,t){var r=f(new Uint8Array(e));if(255!==r[2]||224!==r[3])return e;var i=256*r[4]+r[5],a=[255,216].concat(t,r.slice(4+i));return new Uint8Array(a)}(e,t.exif),m.mimeType)))};if(e.arrayBuffer)e.arrayBuffer().then(n).catch((function(){t.fail(new Error("Failed to read the compressed image with Blob.arrayBuffer()."))}));else{var o=new U;t.reader=o,o.onload=function(e){var t=e.target;n(t.result)},o.onabort=function(){t.fail(new Error("Aborted to read the compressed image with FileReader."))},o.onerror=function(){t.fail(new Error("Failed to read the compressed image with FileReader."))},o.onloadend=function(){t.reader=null},o.readAsArrayBuffer(e)}}else a(e)}};g.toBlob?g.toBlob(ee,m.mimeType,m.quality):ee(l(g.toDataURL(m.mimeType,m.quality)))}}},{key:"done",value:function(e){var t,r,i=e.naturalWidth,a=e.naturalHeight,n=e.result,o=this.file,l=this.image,s=this.options;if(L&&0===l.src.indexOf("blob:")&&L.revokeObjectURL(l.src),n)if(s.strict&&!s.retainExif&&n.size>o.size&&s.mimeType===o.type&&!(s.width>i||s.height>a||s.minWidth>i||s.minHeight>a||s.maxWidth<i||s.maxHeight<a))n=o;else{var u=new Date;n.lastModified=u.getTime(),n.lastModifiedDate=u,n.name=o.name,n.name&&n.type!==o.type&&(n.name=n.name.replace(B,(t=n.type,"jpeg"===(r=p(t)?t.substr(6):"")&&(r="jpg"),".".concat(r))))}else n=o;this.result=n,s.success&&s.success.call(this,n)}},{key:"fail",value:function(e){var t=this.options;if(!t.error)throw e;t.error.call(this,e)}},{key:"abort",value:function(){this.aborted||(this.aborted=!0,this.reader?this.reader.abort():this.image.complete?this.fail(new Error("The compression process has been aborted.")):(this.image.onload=null,this.image.onabort()))}}])&&r(i.prototype,n),o&&r(i,o),Object.defineProperty(i,"prototype",{writable:!1}),e;var i,n,o}()}()},7549:function(e,t,r){"use strict";r.r(t),r.d(t,{default:function(){return d}});var i=r(641),a=r(3751),n=r(33),o=r(953),l=r(3807),s=r.n(l);const u={style:{margin:"10px 0"}},c={key:0},h=["src"],f=["href"];var d=(0,i.pM)({__name:"Compress",props:{imgFile:{}},setup(e){const t=e,r=(0,o.Kh)({name:"",size:0,type:"",link:"",width:0,height:0}),l=(0,o.KR)(.7),d=(0,o.KR)(0),p=(0,o.KR)(0),v=async()=>{let e={quality:l.value,success(e){r.name=e.name,r.size=e.size,r.type=e.type,r.link=URL.createObjectURL(e)},error(e){console.log(e.message)}};d.value&&(e.height=d.value),p.value&&(e.width=p.value),new(s())(t.imgFile,e)};return(e,o)=>((0,i.uX)(),(0,i.CE)("div",null,[o[8]||(o[8]=(0,i.Lk)("h1",null,"图片压缩",-1)),o[9]||(o[9]=(0,i.Lk)("p",null,"提示：此压缩模块整个过程由前端完成，无需后端参与。高宽推荐选择其中一个，等比例缩放图片，不设置高宽尺寸则是原图大小。",-1)),(0,i.Lk)("div",u,[(0,i.Lk)("div",null,[o[3]||(o[3]=(0,i.Lk)("label",null,"高度：",-1)),(0,i.bo)((0,i.Lk)("input",{class:"input",type:"",placeholder:"高度","onUpdate:modelValue":o[0]||(o[0]=e=>d.value=e),style:{"max-width":"400px"}},null,512),[[a.Jo,d.value]])]),(0,i.Lk)("div",null,[o[4]||(o[4]=(0,i.Lk)("label",null,"宽度：",-1)),(0,i.bo)((0,i.Lk)("input",{class:"input",type:"",placeholder:"宽度","onUpdate:modelValue":o[1]||(o[1]=e=>p.value=e),style:{"max-width":"400px"}},null,512),[[a.Jo,p.value]])]),(0,i.Lk)("div",null,[o[5]||(o[5]=(0,i.Lk)("label",null,"图片质量：",-1)),(0,i.bo)((0,i.Lk)("input",{class:"input",type:"number",placeholder:"Text input","onUpdate:modelValue":o[2]||(o[2]=e=>l.value=e),style:{"max-width":"400px"}},null,512),[[a.Jo,l.value]])]),(0,i.Lk)("button",{class:"button is-primary",onClick:v},"压缩")]),(0,i.Lk)("div",null,[(0,i.Lk)("p",null,"图片原始大小为："+(0,n.v_)((t.imgFile.size/1024/1024).toFixed(2))+"MB",1),r.link?((0,i.uX)(),(0,i.CE)("div",c,[o[7]||(o[7]=(0,i.Lk)("p",null,"质量为0.7，压缩成功！",-1)),(0,i.Lk)("p",null,"压缩后大小为："+(0,n.v_)((r.size/1024/1024).toFixed(2))+"MB",1),(0,i.Lk)("div",null,[(0,i.Lk)("img",{src:r.link,style:{height:"200px"},alt:""},null,8,h)]),(0,i.Lk)("a",{href:r.link,download:""},o[6]||(o[6]=[(0,i.Lk)("button",{class:"button is-link"},"下载图片",-1)]),8,f)])):(0,i.Q3)("v-if",!0)])]))}})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,